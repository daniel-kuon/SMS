{"version":3,"sources":["/source/wwwroot/js/Sidebars.ts"],"names":["SidebarPositions","Sidebar","sidebarElem","transitionTime","this","map","$","active","is","position","Right","bodyClass","Left","Bottom","prototype","IsActiv","Show","addClass","mapViewModel","Map","invalidateSize","not","Hide","removeClass"],"mappings":"AAAA,GAAKA,mBAAL,SAAKA,GACDA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,UAHCA,mBAAAA,qBAML,IAAAC,SAAA,WAEI,QAAAA,GAAoBC,EAA6BC,GAAR,SAAAA,IAAAA,EAAA,KAArBC,KAAAF,YAAAA,EAA6BE,KAAAD,eAAAA,EAezCC,KAAAC,IAAMC,EAAE,QACRF,KAAAG,QAAS,EAfTL,EAAYM,GAAG,WACfJ,KAAKK,SAAWT,iBAAiBU,MACjCN,KAAKO,UAAY,mBACVT,EAAYM,GAAG,UACtBJ,KAAKO,UAAY,iBACjBP,KAAKK,SAAWT,iBAAiBY,MAC1BV,EAAYM,GAAG,aACtBJ,KAAKO,UAAY,mBACjBP,KAAKK,SAAWT,iBAAiBa,QAyD7C,MAhDIZ,GAAAa,UAAAC,QAAA,WACI,MAAOX,MAAKG,QAGhBN,EAAAa,UAAAE,KAAA,WACSZ,KAAKG,SACNH,KAAKC,IAAIY,SAASb,KAAKO,UAAWP,KAAKD,eAAgB,WAAM,MAAAe,cAAaC,IAAIC,gBAAe,KAC7FhB,KAAKF,YAAYe,SAAS,SAAUb,KAAKD,gBACzCC,KAAKG,QAAS,EACVH,KAAKK,WAAaT,iBAAiBa,QACnCP,EAAE,YAAYe,IAAI,WAAWJ,SAAS,mBAAoBb,KAAKD,kBAK3EF,EAAAa,UAAAQ,KAAA,WACQlB,KAAKG,SACLH,KAAKC,IAAIkB,YAAYnB,KAAKO,UAAWP,KAAKD,eAAe,WAAI,MAAAe,cAAaC,IAAIC,gBAAe,KAC7FhB,KAAKF,YAAYqB,YAAY,SAAUnB,KAAKD,gBAC5CC,KAAKG,QAAS,EACVH,KAAKK,WAAaT,iBAAiBa,QACnCP,EAAE,YAAYe,IAAI,WAAWE,YAAY,mBAAoBnB,KAAKD,kBA2BlFF","file":"wwwroot/js/Sidebars.min.js","sourcesContent":["enum SidebarPositions {\r\n    Left,\r\n    Right,\r\n    Bottom\r\n}\r\n\r\nclass Sidebar {\r\n\r\n    constructor(private sidebarElem: JQuery, private transitionTime = 400) {\r\n        if (sidebarElem.is(\".right\")) {\r\n            this.position = SidebarPositions.Right;\r\n            this.bodyClass = \"hasRightSidebar\";\r\n        } else if (sidebarElem.is(\".left\")) {\r\n            this.bodyClass = \"hasLeftSidebar\";\r\n            this.position = SidebarPositions.Left;\r\n        } else if (sidebarElem.is(\".bottom\")) {\r\n            this.bodyClass = \"hasBottomSidebar\";\r\n            this.position = SidebarPositions.Bottom;\r\n        }\r\n    }\r\n\r\n    private bodyClass: string;\r\n    private position: SidebarPositions;\r\n    private map = $(\"#map\");\r\n    private active = false;\r\n\r\n    IsActiv() {\r\n        return this.active;\r\n    }\r\n\r\n    Show() {\r\n        if (!this.active) {\r\n            this.map.addClass(this.bodyClass, this.transitionTime, () => mapViewModel.Map.invalidateSize(true));\r\n            this.sidebarElem.addClass(\"active\", this.transitionTime);\r\n            this.active = true;\r\n            if (this.position === SidebarPositions.Bottom) {\r\n                $(\".sidebar\").not(\".bottom\").addClass(\"hasBottomSidebar\", this.transitionTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    Hide() {\r\n        if (this.active) {\r\n            this.map.removeClass(this.bodyClass, this.transitionTime,()=>mapViewModel.Map.invalidateSize(true));\r\n            this.sidebarElem.removeClass(\"active\", this.transitionTime);\r\n            this.active = false;\r\n            if (this.position === SidebarPositions.Bottom)\r\n                $(\".sidebar\").not(\".bottom\").removeClass(\"hasBottomSidebar\", this.transitionTime);\r\n        }\r\n    }\r\n\r\n    //Add(elem: JQuery) {\r\n    //    elem.data(\"sidebar\", this);\r\n    //    if (this.active) {\r\n    //        elem.hide();\r\n    //        elem.show(\"blind\", {}, this.transitionTime);\r\n    //        elem.appendTo(this.sidebarElem);\r\n    //    } else {\r\n    //        elem.show();\r\n    //        elem.appendTo(this.sidebarElem);\r\n    //        this.Show();\r\n    //    }\r\n    //}\r\n\r\n    //Remove(elem: JQuery) {\r\n    //    if (elem.data(\"sidebar\") === this) {\r\n    //        if (this.sidebarElem.children().length > 1) {\r\n    //            elem.hide(\"blind\", {}, this.transitionTime, () => elem.removeData(\"sidebar\").remove());\r\n    //        } else {\r\n    //            this.Hide();\r\n    //            elem.removeData(\"sidebar\").remove();\r\n    //        }\r\n    //    }\r\n    //}\r\n}"],"sourceRoot":"/source/"}