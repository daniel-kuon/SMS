{"version":3,"sources":["/source/wwwroot/js/ServerApi.ts"],"names":["WaypointConnection","ServerModel","WaypointTack","AlbumImage","HttpMethod","AlbumImageApi","baseUrl","this","prototype","Get","ServerApi","CreateRequest","BuildRequestBody","GET","CrewApi","ConnectionApi","Connect","id1","id2","POST","Disconnect","DELETE","WaypointConnectionApi","undefined","toString","url","method","data","contentType","dataType","JSON","stringify","id","Delete","Create","entity","Update","Id","PUT","body","conntectionCount","$","ajax","fail","alert","console","log","arguments","always","GetApi","type","ClientModel","Person","Persons","Job","Jobs","Trip","Trips","Tack","Tacks","Address","Addresses","Image","Images","Location","Locations","Harbour","Harbours","Album","Albums","Comment","Comments","Waypoint","Waypoints","LogBookEntry","LogBookEntries","Wifi","Wifis","ContentPage","ContentPages","ko","observable","connectionOpen","computed","AlbumImages","Crews","WaypointConnections"],"mappings":"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","file":"wwwroot/js/ServerApi.min.js","sourcesContent":["import Entity = ServerModel.Entity;\r\nimport WaypointConnection = ServerModel.WaypointConnection;\r\nimport WaypointTack = ServerModel.WaypointTack;\r\nimport AlbumImage = ServerModel.AlbumImage;\r\n\r\nenum HttpMethod {\r\n    POST,\r\n    GET,\r\n    PUT,\r\n    DELETE\r\n}\r\n\r\nclass AlbumImageApi {\r\n\r\n    constructor(public baseUrl: string) {\r\n\r\n    }\r\n\r\n    Get(): JQueryPromise<AlbumImage[]> {\r\n        return ServerApi.CreateRequest(ServerApi.BuildRequestBody(this.baseUrl, HttpMethod.GET));\r\n    }\r\n\r\n}\r\n\r\nclass CrewApi {\r\n\r\n    constructor(public baseUrl: string) {\r\n\r\n    }\r\n\r\n    Get(): JQueryPromise<ServerModel.Crew[]> {\r\n        return ServerApi.CreateRequest(ServerApi.BuildRequestBody(this.baseUrl, HttpMethod.GET));\r\n    }\r\n\r\n}\r\n\r\nabstract class ConnectionApi<T> {\r\n\r\n    Get(): JQueryPromise<T[]> {\r\n        return ServerApi.CreateRequest<T[]>(ServerApi.BuildRequestBody(\"\", HttpMethod.GET));\r\n    }\r\n\r\n    Connect(id1: number, id2: number): JQueryPromise<T> {\r\n        return ServerApi.CreateRequest<T>(ServerApi.BuildRequestBody(id1 + \"/\" + id2, HttpMethod.POST));\r\n    }\r\n\r\n    Disconnect(id1: number, id2: number): JQueryPromise<T> {\r\n        return ServerApi.CreateRequest<T>(ServerApi.BuildRequestBody(id1 + \"/\" + id2, HttpMethod.DELETE));\r\n    }\r\n\r\n    constructor(public baseUrl: string) {\r\n\r\n    }\r\n\r\n}\r\n\r\nclass WaypointConnectionApi {\r\n\r\n    Get(): JQueryPromise<WaypointConnection[]> {\r\n        return ServerApi.CreateRequest<WaypointConnection[]>(ServerApi.BuildRequestBody(this.baseUrl, HttpMethod.GET));\r\n    }\r\n\r\n    Connect(id1: number, id2: number): JQueryPromise<WaypointConnection> {\r\n        return ServerApi.CreateRequest<WaypointConnection>(ServerApi.BuildRequestBody(this.baseUrl + \"/\" + id1 + \"/\" + id2, HttpMethod.POST));\r\n    }\r\n    Disconnect(id: number): JQueryPromise<WaypointConnection>;\r\n    Disconnect(id1: number, id2: number): JQueryPromise<WaypointConnection>;\r\n    Disconnect(id1: number, id2?: number): JQueryPromise<WaypointConnection> {\r\n        if (id2 !== undefined)\r\n            return ServerApi.CreateRequest<WaypointConnection>(ServerApi.BuildRequestBody(this.baseUrl + \"/\" + id1 + \"/\" + id2, HttpMethod.DELETE));\r\n        return ServerApi.CreateRequest<WaypointConnection>(ServerApi.BuildRequestBody(this.baseUrl + \"/\" + id1.toString(), HttpMethod.DELETE));\r\n    }\r\n\r\n    constructor(public baseUrl: string) {\r\n\r\n    }\r\n}\r\n\r\nclass ServerApi {\r\n    private static conntectionCount = ko.observable(0);\r\n\r\n    private static connectionOpen = ko.computed(() => {\r\n        return ServerApi.conntectionCount() > 0;\r\n    });\r\n\r\n    constructor(public baseUrl: string) {\r\n\r\n    }\r\n\r\n    static BuildRequestBody(url: string, method: HttpMethod, data?: any): JQueryAjaxSettings {\r\n        return {\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\",\r\n            method: HttpMethod[method],\r\n            url: url,\r\n            data: JSON.stringify(data)\r\n        };\r\n    }\r\n\r\n    Get(): JQueryPromise<Entity[]>;\r\n    Get(id: number): JQueryPromise<Entity>;\r\n    Get(id?: number): any {\r\n        if (id === undefined)\r\n            return ServerApi.CreateRequest<Entity[]>((ServerApi.BuildRequestBody(this.baseUrl, HttpMethod.GET)));\r\n        else\r\n            return ServerApi.CreateRequest<Entity>((ServerApi.BuildRequestBody(this.baseUrl + \"/\" + id.toString(), HttpMethod.GET)));\r\n    }\r\n\r\n    Delete(id: number): JQueryPromise<Entity> {\r\n        return ServerApi.CreateRequest<Entity>((ServerApi.BuildRequestBody(this.baseUrl + \"/\" + id.toString(), HttpMethod.DELETE)));\r\n    }\r\n\r\n    Create(entity: Entity): JQueryPromise<Entity> {\r\n        return ServerApi.CreateRequest<Entity>((ServerApi.BuildRequestBody(this.baseUrl, HttpMethod.POST, entity)));\r\n    }\r\n\r\n    Update(entity: Entity): JQueryPromise<Entity> {\r\n        return ServerApi.CreateRequest<Entity>(ServerApi.BuildRequestBody(this.baseUrl + \"/\" + entity.Id.toString(), HttpMethod.PUT, entity));\r\n    }\r\n\r\n    static CreateRequest<T>(body: JQueryAjaxSettings): JQueryPromise<T> {\r\n        ServerApi.conntectionCount(ServerApi.conntectionCount() + 1);\r\n        return $.ajax(body).fail(function () {\r\n            //alert(d);\r\n            alert(\"Es gab ein Fehler beim Verarbeiten der Daten auf dem Server. Bitte überprüfe deine Eingaben und versuche er erneut.\");\r\n            console.log(arguments);\r\n        }).always(() => {\r\n            ServerApi.conntectionCount(ServerApi.conntectionCount() - 1);\r\n        });\r\n    }\r\n\r\n\r\n    static Persons = new ServerApi(\"/api/People\");\r\n\r\n    static Jobs = new ServerApi(\"/api/Jobs\");\r\n\r\n    static Trips = new ServerApi(\"/api/Trips\");\r\n\r\n    static Tacks = new ServerApi(\"/api/Tacks\");\r\n\r\n    static Addresses = new ServerApi(\"/api/Addresses\");\r\n\r\n    static Images = new ServerApi(\"/api/Images\");\r\n\r\n    static Locations = new ServerApi(\"api/Locations\");\r\n\r\n    //static Supermarkets = new EntityApi(\"/api/Supermarkets\");\r\n    //static Restaurants = new EntityApi(\"/api/Restaurants\");\r\n\r\n    static Harbours = new ServerApi(\"/api/Harbours\");\r\n\r\n    static Albums = new ServerApi(\"/api/Albums\");\r\n\r\n    static Comments = new ServerApi(\"/api/Comments\");\r\n\r\n    static Waypoints = new ServerApi(\"/api/Waypoints\");\r\n\r\n    static Wifis = new ServerApi(\"/api/Wifis\");\r\n\r\n    static AlbumImages = new AlbumImageApi(\"/api/AlbumImages\");\r\n\r\n    static Crews = new CrewApi(\"/api/Crews\");\r\n\r\n    static LogBookEntries = new ServerApi(\"/api/LogBookEntries\");\r\n    static ContentPages = new ServerApi(\"/api/ContentPages\");\r\n\r\n    static WaypointConnections = new WaypointConnectionApi(\"/api/WaypointConnections\");\r\n\r\n    static GetApi(type: ClientModel.Entity): ServerApi {\r\n        if (type instanceof ClientModel.Person)\r\n            return ServerApi.Persons;\r\n        if (type instanceof ClientModel.Job)\r\n            return ServerApi.Jobs;\r\n        if (type instanceof ClientModel.Trip)\r\n            return ServerApi.Trips;\r\n        if (type instanceof ClientModel.Tack)\r\n            return ServerApi.Tacks;\r\n        if (type instanceof ClientModel.Address)\r\n            return ServerApi.Addresses;\r\n        if (type instanceof ClientModel.Image)\r\n            return ServerApi.Images;\r\n        if (type instanceof ClientModel.Location)\r\n            return ServerApi.Locations;\r\n        //if (type instanceof ClientModel.Supermarket)\r\n        //return ServerApi.Supermarkets;\r\n        //if (type instanceof ClientModel.Restaurant)\r\n        //return ServerApi.Restaurants;\r\n        if (type instanceof ClientModel.Harbour)\r\n            return ServerApi.Harbours;\r\n        if (type instanceof ClientModel.Album)\r\n            return ServerApi.Albums;\r\n        if (type instanceof ClientModel.Comment)\r\n            return ServerApi.Comments;\r\n        if (type instanceof ClientModel.Waypoint)\r\n            return ServerApi.Waypoints;\r\n        if (type instanceof ClientModel.LogBookEntry)\r\n            return ServerApi.LogBookEntries;\r\n        if (type instanceof ClientModel.Wifi)\r\n            return ServerApi.Wifis;\r\n        if (type instanceof ClientModel.ContentPage)\r\n            return ServerApi.ContentPages;\r\n        throw (\"No suitable Api found\");\r\n    }\r\n}"],"sourceRoot":"/source/"}