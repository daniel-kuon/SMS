{"version":3,"sources":["wwwroot/js/ClientModel.js","/source/wwwroot/js/ClientModel.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","ClientModel","Entity","AlbumId","ko","observable","CommentListId","Album","CreateObservable","AddTransferMode","TransferMode","Include","UpdateTransferMode","InsertDate","Date","UpdateDate","ClientId","clientIdCounter","ServerApi","GetApi","Id","entityDb","toString","DeleteOnServer","Delete","SaveToServer","_this","undefined","Create","ConvertToServerEntity","done","data","savedState","LoadFromServerEntity","Update","serverEntity","_i","_a","GetObservableNames","length","prop","sVal","Array","_b","sVal_1","obj","entity","cVal","idOnly","propName","val","arr","val_1","elem","push","CopyTo","SaveState","unwrap","slice","val_2","out","isWriteableObservable","Block","RevertState","ignoreError","val_3","_super","apply","arguments","Images","observableArray","Person","LastName","FirstName","FullName","computed","Job","DueTo","AssignedTo","AssignedToId","Title","Content","Done","SuperJob","SuperJobId","Trip","TripId","SubJobs","Waypoint","latLng","markerType","Map","call","WaypointNumber","polylines","Latitude","Longitude","Distance","Precessor","RouteDistance","RoutePrecessor","Name","Description","LatLng","L","lat","lng","subscribe","value","Redraw","Polylines","Popup","content","popup","removeLayer","marker","bindPopup","Show","highlight","setOpacity","IsDummy","$","_icon","addClass","Hide","removeClass","updatePolylines","setLatLng","i","redrawPolyline","GetConnectedWaypoints","ret","line","_c","Waypoints","waypoint","sort","w1","w2","distanceTo","convertFromDummyHandle","splitPolyline","MarkerType","w","wCA","WaypointConnections","Disconnect","Connect","IsInPolyline","polyline","currentPolyline","RemoveFromMap","Dummy","removePolyline","AddToPolyline","DummyHandle","addLatLng","redraw","RemoveFromPolyline","removeFromArray","getLatLngs","RemoveIfHasZeroOrOnePolylines","SetLatLng","CenterOnMap","setView","Harbour","map","Locations","Rating","Website","label","getLabel","updateLabelContent","bindLabel","direction","Address","Street","Zip","Town","Comment","Image","Path","Height","Width","TackBase","StartDate","EndDate","Start","StartId","EndId","End","Persons","CrewList","read","persons","first","list","deferEvaluation","SaillingTime","startDate","endDate","renderTime","Tacks","LogBookEntry","MotorHoursStart","MotorHoursEnd","LogStart","LogEnd","SpecialOccurences","Tack","CanRemoveTack","mapViewModel","SelectedTrip","tacks","index","indexOf","prevTack","nextTack","ComputePlaceholder","moment","format","ParentId","Location","HarbourId","AddressId","Restaurant","Supermarket","WaypointDistance","calculaterdWaypoints","calculateRoute","ConnectedWayPoints","ConnectedDistances","wp"],"mappings":"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","file":"wwwroot/js/ClientModel.min.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ClientModel;\n(function (ClientModel) {\n    var Entity = (function () {\n        function Entity() {\n            this.AlbumId = ko.observable();\n            this.CommentListId = ko.observable();\n            this.Album = CreateObservable({ AddTransferMode: TransferMode.Include, UpdateTransferMode: TransferMode.Include });\n            this.InsertDate = ko.observable(Date);\n            this.UpdateDate = ko.observable(Date);\n            this.ClientId = ++Entity.clientIdCounter;\n            this.ServerApi = ServerApi.GetApi(this);\n            this.Id = ko.observable();\n            Entity.entityDb[this.ClientId.toString()] = this;\n        }\n        Entity.prototype.DeleteOnServer = function () {\n            return this.ServerApi.Delete(this.Id());\n        };\n        ;\n        Entity.prototype.SaveToServer = function () {\n            var _this = this;\n            if (this.Id() === undefined)\n                return this.ServerApi.Create(this.ConvertToServerEntity())\n                    .done(function (data) {\n                    _this.savedState = undefined;\n                    _this.LoadFromServerEntity(data);\n                });\n            return this.ServerApi.Update(this.ConvertToServerEntity())\n                .done(function (data) {\n                _this.savedState = undefined;\n                _this.LoadFromServerEntity(data);\n            });\n            ;\n        };\n        Entity.prototype.LoadFromServerEntity = function (serverEntity) {\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var sVal = serverEntity[prop];\n                if (sVal !== undefined && sVal !== null) {\n                    if (sVal instanceof Array) {\n                        for (var _b = 0, sVal_1 = sVal; _b < sVal_1.length; _b++) {\n                            var obj = sVal_1[_b];\n                            var entity = Entity.entityDb[obj.ClientId.toString()];\n                            if (entity !== undefined)\n                                entity.LoadFromServerEntity(obj);\n                        }\n                    }\n                    else {\n                        var cVal = this[prop]();\n                        if (cVal instanceof Entity)\n                            cVal.LoadFromServerEntity(sVal);\n                        else\n                            this[prop](sVal);\n                    }\n                }\n            }\n            return this;\n        };\n        Entity.prototype.ConvertToServerEntity = function (idOnly) {\n            if (idOnly === void 0) { idOnly = false; }\n            var serverEntity = { ClientId: this.ClientId };\n            var entity = this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var propName = _a[_i];\n                var prop = entity[propName];\n                var val = prop();\n                if (val !== undefined && val !== Date) {\n                    if (val instanceof Array) {\n                        var arr = new Array();\n                        for (var _b = 0, val_1 = val; _b < val_1.length; _b++) {\n                            var elem = val_1[_b];\n                            arr.push(elem.ConvertToServerEntity());\n                        }\n                        serverEntity[propName] = arr;\n                    }\n                    else\n                        serverEntity[propName] = val instanceof Entity ? val.ConvertToServerEntity() : val;\n                }\n            }\n            return serverEntity;\n        };\n        Entity.prototype.CopyTo = function (entity) {\n            entity.Id(this.Id());\n        };\n        Entity.prototype.SaveState = function () {\n            var entity = this;\n            entity.savedState = new Object();\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var val = ko.unwrap(entity[prop]);\n                if (val instanceof Array) {\n                    val = val.slice(0);\n                    for (var _b = 0, val_2 = val; _b < val_2.length; _b++) {\n                        var elem = val_2[_b];\n                        if (elem instanceof Entity)\n                            elem.SaveState();\n                    }\n                }\n                else if (val instanceof Entity)\n                    val.SaveState();\n                entity.savedState[prop] = val;\n            }\n        };\n        Entity.prototype.GetObservableNames = function () {\n            var out = new Array();\n            var entity = this;\n            for (var prop in entity)\n                if (entity.hasOwnProperty(prop))\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\n                        out.push(prop);\n            return out;\n        };\n        Entity.prototype.RevertState = function (ignoreError) {\n            if (ignoreError === void 0) { ignoreError = false; }\n            if (this.savedState === undefined)\n                if (ignoreError)\n                    return;\n                else\n                    throw \"No saved state\";\n            var entity = this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var val = entity.savedState[prop];\n                //this.savedState[prop] = val;\n                entity[prop](val);\n                if (val instanceof Entity)\n                    val.RevertState();\n                else if (val instanceof Array)\n                    for (var _b = 0, val_3 = val; _b < val_3.length; _b++) {\n                        var elem = val_3[_b];\n                        if (elem instanceof Entity)\n                            elem.RevertState();\n                    }\n            }\n        };\n        Entity.clientIdCounter = 0;\n        Entity.entityDb = {};\n        return Entity;\n    }());\n    ClientModel.Entity = Entity;\n    var Album = (function (_super) {\n        __extends(Album, _super);\n        function Album() {\n            _super.apply(this, arguments);\n            this.Images = ko.observableArray();\n        }\n        return Album;\n    }(Entity));\n    ClientModel.Album = Album;\n    var Person = (function (_super) {\n        __extends(Person, _super);\n        function Person() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.LastName = ko.observable();\n            this.FirstName = ko.observable();\n            this.FullName = ko.computed(function () { return _this.FirstName() + \" \" + _this.LastName(); });\n        }\n        return Person;\n    }(Entity));\n    ClientModel.Person = Person;\n    var Job = (function (_super) {\n        __extends(Job, _super);\n        function Job() {\n            _super.apply(this, arguments);\n            this.DueTo = ko.observable(Date);\n            this.AssignedTo = ko.observable();\n            this.AssignedToId = ko.observable();\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n            this.Done = ko.observable();\n            this.SuperJob = ko.observable();\n            this.SuperJobId = ko.observable();\n            this.Trip = ko.observable();\n            this.TripId = ko.observable();\n            this.SubJobs = ko.observableArray();\n        }\n        return Job;\n    }(Entity));\n    ClientModel.Job = Job;\n    var Waypoint = (function (_super) {\n        __extends(Waypoint, _super);\n        function Waypoint(latLng, markerType, Map) {\n            var _this = this;\n            _super.call(this);\n            this.Map = Map;\n            this.WaypointNumber = ko.observable();\n            this.polylines = new Array();\n            this.Latitude = ko.observable(0);\n            this.Longitude = ko.observable(0);\n            this.Distance = ko.observable();\n            this.Precessor = ko.observable();\n            this.RouteDistance = ko.observable();\n            this.RoutePrecessor = ko.observable();\n            this.Name = ko.observable();\n            this.Description = ko.observable();\n            if (Map === undefined) {\n                if (typeof markerType == \"number\") {\n                    Map = latLng;\n                    latLng = markerType;\n                    markerType = Map;\n                }\n                this.Map = (markerType);\n                this.LatLng = new L.LatLng(0, 0);\n                markerType = latLng;\n            }\n            else {\n                this.Latitude(latLng.lat);\n                this.Longitude(latLng.lng);\n            }\n            this.LatLng = new L.LatLng(this.Latitude(), this.Longitude());\n            this.Latitude.subscribe(function (value) {\n                if (_this.LatLng.lat !== value) {\n                    _this.LatLng.lat = value;\n                    _this.Redraw();\n                }\n            });\n            this.Longitude.subscribe(function (value) {\n                if (_this.LatLng.lng !== value) {\n                    _this.LatLng.lng = value;\n                    _this.Redraw();\n                }\n            });\n            this.markerType = markerType;\n            this.LatLng.Polylines = new Array();\n            this.LatLng.Waypoint = this;\n            //this.Latitude.subscribe((value) => {\n            //    if (this.LatLng.lat !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            //this.Longitude.subscribe((value) => {\n            //    if (this.LatLng.lng !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            this.Precessor.Block = true;\n            this.Distance.Block = true;\n        }\n        Waypoint.prototype.Popup = function (content) {\n            if (this.popup !== undefined) {\n                this.Map.removeLayer(this.popup);\n                this.popup = undefined;\n            }\n            if (content !== undefined) {\n                //this.popup = L.popup();\n                this.marker.bindPopup(content); //.openPopup();\n            }\n        };\n        Waypoint.prototype.Show = function (highlight) {\n            if (highlight === void 0) { highlight = false; }\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\n            if (highlight)\n                $(this.marker._icon).addClass(\"expose\");\n        };\n        Waypoint.prototype.Hide = function () {\n            this.marker.setOpacity(0.1);\n            $(this.marker._icon).removeClass(\"expose\");\n        };\n        Waypoint.prototype.Redraw = function (updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            if (this.marker !== undefined)\n                this.marker.setLatLng(this.LatLng);\n            if (updatePolylines)\n                for (var i = 0; i < this.polylines.length; i++)\n                    redrawPolyline(this.polylines[i]);\n        };\n        Waypoint.prototype.GetConnectedWaypoints = function () {\n            var _this = this;\n            var ret = new Array();\n            for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                var line = _a[_i];\n                for (var _b = 0, _c = line.Waypoints; _b < _c.length; _b++) {\n                    var waypoint = _c[_b];\n                    if (waypoint !== this)\n                        ret.push(waypoint);\n                }\n            }\n            return ret.sort(function (w1, w2) {\n                return w1.LatLng.distanceTo(_this.LatLng) - w2.LatLng.distanceTo(_this.LatLng);\n            });\n        };\n        Waypoint.prototype.convertFromDummyHandle = function () {\n            this.marker.setOpacity(1);\n            var w1 = this.polylines[0].Waypoints[0];\n            var w2 = this.polylines[0].Waypoints[1];\n            splitPolyline(this.polylines[0]);\n            this.markerType = MarkerType.Waypoint;\n            this.SaveToServer()\n                .done(function (w) {\n                var wCA = ServerApi.WaypointConnections;\n                wCA.Disconnect(w1.Id(), w2.Id());\n                wCA.Connect(w1.Id(), w.Id);\n                wCA.Connect(w2.Id(), w.Id);\n            });\n        };\n        Waypoint.prototype.IsInPolyline = function (polyline) {\n            for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                var currentPolyline = _a[_i];\n                if (polyline === currentPolyline)\n                    return true;\n            }\n            return false;\n        };\n        Waypoint.prototype.RemoveFromMap = function () {\n            if (this.markerType !== MarkerType.Dummy)\n                for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                    var polyline = _a[_i];\n                    removePolyline(polyline);\n                }\n            this.Map.removeLayer(this.marker);\n        };\n        Waypoint.prototype.AddToPolyline = function (polyline) {\n            if (this.IsInPolyline(polyline))\n                return false;\n            if (polyline.DummyHandle !== this) {\n                polyline.Waypoints.push(this);\n                polyline.addLatLng(this.LatLng);\n                polyline.redraw();\n            }\n            this.LatLng.Polylines.push(polyline);\n            this.polylines.push(polyline);\n            //ServerApi.WaypointConnectionApi.GetDefault().\n            return true;\n        };\n        Waypoint.prototype.RemoveFromPolyline = function (polyline) {\n            if (!this.IsInPolyline(polyline))\n                return false;\n            removeFromArray(polyline.Waypoints, this);\n            removeFromArray(this.polylines, polyline);\n            removeFromArray(this.LatLng.Polylines, polyline);\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\n            polyline.redraw();\n            return true;\n        };\n        Waypoint.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return true;\n        };\n        Waypoint.prototype.SetLatLng = function (latLng, updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            this.LatLng.lat = latLng.lat;\n            this.LatLng.lng = latLng.lng;\n            this.Latitude(latLng.lat);\n            this.Longitude(latLng.lng);\n            this.Redraw(updatePolylines);\n        };\n        Waypoint.prototype.CenterOnMap = function () {\n            this.Map.setView(this.LatLng);\n        };\n        Waypoint.prototype.IsDummy = function () {\n            return this.markerType === MarkerType.Dummy;\n        };\n        return Waypoint;\n    }(Entity));\n    ClientModel.Waypoint = Waypoint;\n    var Harbour = (function (_super) {\n        __extends(Harbour, _super);\n        function Harbour(latLng, map) {\n            var _this = this;\n            _super.call(this, latLng, MarkerType.Harbour, map);\n            this.Album = ko.observable(new Album());\n            this.Locations = ko.observableArray();\n            this.Rating = ko.observable();\n            this.Content = ko.observable();\n            this.Website = ko.observable();\n            //if (map)\n            //this.Distance.subscribe((d) => {\n            //    const label = this.marker.getLabel();\n            //    if (d > 0) {\n            //        if (label !== undefined) {\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\n            //        } else {\n            //            this.marker.bindLabel(d.toString() + \" km\",\n            //                <any>{\n            //                    direction: \"auto\"\n            //                });\n            //        }\n            //    } else if (label !== undefined) {\n            //        this.marker.unbindLabel();\n            //    }\n            //});\n            this.Name.subscribe(function (d) {\n                var label = _this.marker.getLabel();\n                if (label !== undefined) {\n                    _this.marker.updateLabelContent(d);\n                }\n                else {\n                    _this.marker.bindLabel(d, {\n                        direction: \"auto\"\n                    });\n                }\n            });\n        }\n        Harbour.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return false;\n        };\n        return Harbour;\n    }(Waypoint));\n    ClientModel.Harbour = Harbour;\n    var Address = (function (_super) {\n        __extends(Address, _super);\n        function Address() {\n            _super.apply(this, arguments);\n            this.Street = ko.observable();\n            this.Zip = ko.observable();\n            this.Town = ko.observable();\n            this.Comment = ko.observable();\n        }\n        return Address;\n    }(Entity));\n    ClientModel.Address = Address;\n    var Image = (function (_super) {\n        __extends(Image, _super);\n        function Image() {\n            _super.apply(this, arguments);\n            this.Path = ko.observable();\n            this.Height = ko.observable();\n            this.Width = ko.observable();\n        }\n        return Image;\n    }(Entity));\n    ClientModel.Image = Image;\n    var TackBase = (function (_super) {\n        __extends(TackBase, _super);\n        function TackBase() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.StartDate = ko.observable();\n            this.EndDate = ko.observable();\n            this.Start = ko.observable();\n            this.StartId = ko.observable();\n            this.EndId = ko.observable();\n            this.End = ko.observable();\n            this.Persons = ko.observableArray();\n            this.Distance = ko.observable(0);\n            this.CrewList = ko.computed({\n                read: function () {\n                    var persons = _this.Persons();\n                    var first = persons[0];\n                    if (first === undefined)\n                        return \"\";\n                    if (persons.length === 1)\n                        return first.FullName();\n                    else {\n                        var list = first.FullName();\n                        for (var i = 1; i < persons.length; i++) {\n                            list += \", \" + persons[i].FullName();\n                        }\n                        return list;\n                    }\n                },\n                deferEvaluation: true\n            });\n            this.SaillingTime = ko.computed(function () {\n                var startDate = _this.StartDate();\n                var endDate = _this.EndDate();\n                if (startDate === undefined || endDate === undefined || renderTime === undefined)\n                    return \"\";\n                return renderTime(new Date(startDate), new Date(endDate));\n            });\n        }\n        return TackBase;\n    }(Entity));\n    ClientModel.TackBase = TackBase;\n    var Trip = (function (_super) {\n        __extends(Trip, _super);\n        function Trip() {\n            _super.apply(this, arguments);\n            this.Name = ko.observable();\n            this.Content = ko.observable();\n            this.Tacks = ko.observableArray();\n            this.IsDummy = ko.observable();\n        }\n        return Trip;\n    }(TackBase));\n    ClientModel.Trip = Trip;\n    var LogBookEntry = (function (_super) {\n        __extends(LogBookEntry, _super);\n        function LogBookEntry() {\n            _super.apply(this, arguments);\n            this.MotorHoursStart = ko.observable();\n            this.MotorHoursEnd = ko.observable();\n            this.LogStart = ko.observable();\n            this.LogEnd = ko.observable();\n            this.SpecialOccurences = ko.observable();\n        }\n        return LogBookEntry;\n    }(TackBase));\n    ClientModel.LogBookEntry = LogBookEntry;\n    var Tack = (function (_super) {\n        __extends(Tack, _super);\n        function Tack() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.Waypoints = ko.observableArray();\n            this.CanRemoveTack = ko.computed({\n                read: function () {\n                    if (mapViewModel.SelectedTrip() === undefined)\n                        return false;\n                    var tacks = mapViewModel.SelectedTrip().Tacks;\n                    var index = tacks.indexOf(_this);\n                    var prevTack = tacks()[index - 1];\n                    var nextTack = tacks()[index + 1];\n                    if (prevTack !== undefined)\n                        if (nextTack !== undefined)\n                            return prevTack.Start() !== nextTack.Start();\n                        else\n                            return true;\n                    else\n                        return nextTack !== undefined;\n                },\n                deferEvaluation: true\n            });\n            this.ComputePlaceholder = ko.computed(function () {\n                if (_this.StartDate() !== undefined)\n                    return moment(_this.StartDate()).format(\"L\");\n                return \"\";\n            });\n        }\n        return Tack;\n    }(TackBase));\n    ClientModel.Tack = Tack;\n    var Comment = (function (_super) {\n        __extends(Comment, _super);\n        function Comment() {\n            _super.apply(this, arguments);\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n            this.Rating = ko.observable();\n            this.ParentId = ko.observable();\n        }\n        return Comment;\n    }(Entity));\n    ClientModel.Comment = Comment;\n    var Location = (function (_super) {\n        __extends(Location, _super);\n        function Location() {\n            _super.apply(this, arguments);\n            this.HarbourId = ko.observable();\n            this.Website = ko.observable();\n            this.Name = ko.observable();\n            this.Rating = ko.observable();\n            this.Address = ko.observable();\n            this.AddressId = ko.observable();\n        }\n        return Location;\n    }(Entity));\n    ClientModel.Location = Location;\n    var Restaurant = (function (_super) {\n        __extends(Restaurant, _super);\n        function Restaurant() {\n            _super.apply(this, arguments);\n        }\n        return Restaurant;\n    }(Location));\n    ClientModel.Restaurant = Restaurant;\n    var Supermarket = (function (_super) {\n        __extends(Supermarket, _super);\n        function Supermarket() {\n            _super.apply(this, arguments);\n        }\n        return Supermarket;\n    }(Location));\n    ClientModel.Supermarket = Supermarket;\n    var WaypointDistance = (function () {\n        function WaypointDistance(Precessor, Waypoint, Distance, calculaterdWaypoints, calculateRoute) {\n            this.Precessor = Precessor;\n            this.Waypoint = Waypoint;\n            this.Distance = Distance;\n            this.ConnectedWayPoints = new Array();\n            this.ConnectedDistances = new Array();\n            this.LatLng = Waypoint.LatLng;\n            calculaterdWaypoints.push(Waypoint);\n            for (var _i = 0, _a = Waypoint.GetConnectedWaypoints(); _i < _a.length; _i++) {\n                var wp = _a[_i];\n                if (calculaterdWaypoints.indexOf(wp) === -1)\n                    this.ConnectedWayPoints.push(wp);\n            }\n            if (calculateRoute) {\n                Waypoint.RoutePrecessor(Precessor);\n                Waypoint.RouteDistance(Distance);\n            }\n            else {\n                Waypoint.Precessor(Precessor);\n                Waypoint.Distance(Distance);\n            }\n        }\n        return WaypointDistance;\n    }());\n    ClientModel.WaypointDistance = WaypointDistance;\n})(ClientModel || (ClientModel = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[MarkerType[\"Harbour\"] = 0] = \"Harbour\";\n    MarkerType[MarkerType[\"Dummy\"] = 1] = \"Dummy\";\n    MarkerType[MarkerType[\"Waypoint\"] = 2] = \"Waypoint\";\n    MarkerType[MarkerType[\"WeatherStation\"] = 3] = \"WeatherStation\";\n})(MarkerType || (MarkerType = {}));\n\n","module ClientModel {\r\n\r\n    import SEntity = ServerModel.Entity\r\n    import SWaypointConnection = ServerModel.WaypointConnection\r\n\r\n    export interface IEntity {\r\n        Id: KnockoutObservable<number>;\r\n        ClientId: number;\r\n    }\r\n\r\n    export abstract class Entity implements IEntity {\r\n        constructor() {\r\n            Entity.entityDb[this.ClientId.toString()] = this;\r\n        }\r\n\r\n        AlbumId = ko.observable<number>();\r\n        CommentListId = ko.observable<number>();\r\n        Album = CreateObservable<Album>({ AddTransferMode: TransferMode.Include, UpdateTransferMode: TransferMode.Include });\r\n        InsertDate = ko.observable<number>(<any>Date);\r\n        UpdateDate = ko.observable<number>(<any>Date);\r\n\r\n\r\n        private static clientIdCounter = 0;\r\n        private static entityDb = {};\r\n\r\n        ClientId = ++Entity.clientIdCounter;\r\n\r\n        protected ServerApi = ServerApi.GetApi(this);\r\n\r\n        DeleteOnServer(): JQueryPromise<SEntity> {\r\n            return this.ServerApi.Delete(this.Id());\r\n        };\r\n\r\n        SaveToServer(): JQueryPromise<SEntity> {\r\n            if (this.Id() === undefined)\r\n                return this.ServerApi.Create(this.ConvertToServerEntity())\r\n                    .done(data => {\r\n                        this.savedState = undefined;\r\n                        this.LoadFromServerEntity(data);\r\n                    });\r\n            return this.ServerApi.Update(this.ConvertToServerEntity())\r\n                .done((data) => {\r\n                    this.savedState = undefined;\r\n                    this.LoadFromServerEntity(data);\r\n                });;\r\n        }\r\n\r\n        LoadFromServerEntity(serverEntity: SEntity): this {\r\n            for (let prop of this.GetObservableNames()) {\r\n                const sVal = serverEntity[prop];\r\n                if (sVal !== undefined && sVal !== null) {\r\n                    if (sVal instanceof Array) {\r\n                        for (let obj of sVal) {\r\n                            var entity = Entity.entityDb[obj.ClientId.toString()];\r\n                            if (entity !== undefined)\r\n                                entity.LoadFromServerEntity(obj);\r\n                        }\r\n                    } else {\r\n                        const cVal = this[prop]();\r\n                        if (cVal instanceof Entity)\r\n                            cVal.LoadFromServerEntity(sVal);\r\n                        //else if (cVal === Date)\r\n                        //    this[prop](new Date(sVal));\r\n                        //else if (cVal instanceof Date)\r\n                        //    (<Date>cVal).setTime(new Date(sVal).getTime());\r\n                        else\r\n                            this[prop](sVal);\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        ConvertToServerEntity(idOnly: boolean = false): SEntity {\r\n            const serverEntity = { ClientId: this.ClientId };\r\n            const entity = this;\r\n            for (let propName of this.GetObservableNames()) {\r\n                const prop = entity[propName];\r\n                const val = prop();\r\n                if (val !== undefined && val !== Date) {\r\n                    if (val instanceof Array) {\r\n                        const arr = new Array();\r\n                        for (let elem of val) {\r\n                            arr.push(elem.ConvertToServerEntity());\r\n                        }\r\n                        serverEntity[propName] = arr;\r\n                    }\r\n                    //else if (val instanceof Date) {\r\n                    //    serverEntity[propName] = (<Date>val).toJSON();\r\n                    //}\r\n                    else\r\n                        serverEntity[propName] = val instanceof Entity ? val.ConvertToServerEntity() : val;\r\n                }\r\n            }\r\n            return <any>serverEntity;\r\n        }\r\n\r\n        CopyTo(entity: this) {\r\n            entity.Id(this.Id());\r\n        }\r\n\r\n        private savedState: any;\r\n\r\n        SaveState() {\r\n            const entity = this;\r\n            entity.savedState = new Object();\r\n            for (let prop of this.GetObservableNames()) {\r\n                let val = ko.unwrap(entity[prop]);\r\n                if (val instanceof Array) {\r\n                    val = val.slice(0);\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.SaveState();\r\n                    }\r\n                } else if (val instanceof Entity)\r\n                    val.SaveState();\r\n                entity.savedState[prop] = val;\r\n            }\r\n        }\r\n\r\n        protected GetObservableNames(): string[] {\r\n            const out = new Array<string>();\r\n            const entity = this;\r\n            for (let prop in entity)\r\n                if (entity.hasOwnProperty(prop))\r\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\r\n                        out.push(prop);\r\n            return out;\r\n        }\r\n\r\n        RevertState(ignoreError: boolean = false) {\r\n            if (this.savedState === undefined)\r\n                if (ignoreError)\r\n                    return;\r\n                else\r\n                    throw \"No saved state\";\r\n            const entity = this;\r\n            for (let prop of this.GetObservableNames()) {\r\n                const val = entity.savedState[prop];\r\n                //this.savedState[prop] = val;\r\n                entity[prop](val);\r\n                if (val instanceof Entity)\r\n                    val.RevertState();\r\n                else if (val instanceof Array)\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.RevertState();\r\n                    }\r\n            }\r\n        }\r\n\r\n        Id: KnockoutObservable<number> = ko.observable<number>();\r\n    }\r\n\r\n    export class Album extends Entity {\r\n        Images = ko.observableArray<Image>();\r\n    }\r\n\r\n    export class Person extends Entity {\r\n        LastName = ko.observable<string>();\r\n        FirstName = ko.observable<string>();\r\n        FullName = ko.computed(() => this.FirstName() + \" \" + this.LastName());\r\n\r\n    }\r\n\r\n    export class Job extends Entity {\r\n        DueTo = ko.observable<Date>(<any>Date);\r\n        AssignedTo = ko.observable<Person>();\r\n        AssignedToId = ko.observable<number>();\r\n        Title = ko.observable<String>();\r\n        Content = ko.observable<String>();\r\n        Done = ko.observable<boolean>();\r\n        SuperJob = ko.observable<Job>();\r\n        SuperJobId = ko.observable<number>();\r\n        Trip = ko.observable<Trip>();\r\n        TripId = ko.observable<number>();\r\n        SubJobs = ko.observableArray<Job>();\r\n    }\r\n\r\n    export class Waypoint extends Entity {\r\n        constructor(latLng: L.LatLng, markerType: MarkerType, map: L.mapbox.Map);\r\n        constructor(markerType: MarkerType, map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng | MarkerType, markerType: MarkerType | L.mapbox.Map, protected Map?: L.mapbox.Map) {\r\n            super();\r\n            if (Map === undefined) {\r\n                if (typeof markerType == \"number\") {\r\n                    Map = <L.mapbox.Map><any>latLng;\r\n                    latLng = <MarkerType>markerType;\r\n                    markerType = Map;\r\n                }\r\n                this.Map = <L.mapbox.Map>(markerType);\r\n                this.LatLng = new L.LatLng(0, 0);\r\n                markerType = <MarkerType>latLng;\r\n            } else {\r\n                this.Latitude((<L.LatLng>latLng).lat);\r\n                this.Longitude((<L.LatLng>latLng).lng);\r\n            }\r\n            this.LatLng = new L.LatLng(this.Latitude(), this.Longitude());\r\n            this.Latitude.subscribe((value) => {\r\n                if (this.LatLng.lat !== value) {\r\n                    this.LatLng.lat = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.Longitude.subscribe((value) => {\r\n                if (this.LatLng.lng !== value) {\r\n                    this.LatLng.lng = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.markerType = markerType;\r\n            this.LatLng.Polylines = new Array();\r\n            this.LatLng.Waypoint = this;\r\n            //this.Latitude.subscribe((value) => {\r\n            //    if (this.LatLng.lat !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            //this.Longitude.subscribe((value) => {\r\n            //    if (this.LatLng.lng !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            this.Precessor.Block = true;\r\n            this.Distance.Block = true;\r\n        }\r\n\r\n        Popup(content: string);\r\n        Popup();\r\n        Popup(content?: string) {\r\n            if (this.popup !== undefined) {\r\n                this.Map.removeLayer(this.popup);\r\n                this.popup = undefined;\r\n            }\r\n            if (content !== undefined) {\r\n                //this.popup = L.popup();\r\n                this.marker.bindPopup(content); //.openPopup();\r\n\r\n\r\n            }\r\n        }\r\n\r\n        Show(highlight: boolean = false): void {\r\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\r\n            if (highlight)\r\n                $(this.marker._icon).addClass(\"expose\");\r\n        }\r\n\r\n        Hide(): void {\r\n            this.marker.setOpacity(0.1);\r\n            $(this.marker._icon).removeClass(\"expose\");\r\n        }\r\n\r\n        Redraw(updatePolylines = true): void {\r\n            if (this.marker !== undefined)\r\n                this.marker.setLatLng(this.LatLng);\r\n            if (updatePolylines)\r\n                for (let i = 0; i < this.polylines.length; i++)\r\n                    redrawPolyline(this.polylines[i]);\r\n        }\r\n\r\n        GetConnectedWaypoints(): Waypoint[] {\r\n            const ret = new Array<Waypoint>();\r\n            for (let line of this.polylines) {\r\n                for (let waypoint of line.Waypoints) {\r\n                    if (waypoint !== this)\r\n                        ret.push(waypoint);\r\n                }\r\n            }\r\n            return ret.sort((w1, w2) => {\r\n                return w1.LatLng.distanceTo(this.LatLng) - w2.LatLng.distanceTo(this.LatLng);\r\n            });\r\n        }\r\n\r\n        convertFromDummyHandle() {\r\n            this.marker.setOpacity(1);\r\n            var w1 = this.polylines[0].Waypoints[0];\r\n            var w2 = this.polylines[0].Waypoints[1];\r\n            splitPolyline(this.polylines[0]);\r\n            this.markerType = MarkerType.Waypoint;\r\n            this.SaveToServer()\r\n                .done((w) => {\r\n                    const wCA = ServerApi.WaypointConnections;\r\n                    wCA.Disconnect(w1.Id(), w2.Id());\r\n                    wCA.Connect(w1.Id(), w.Id);\r\n                    wCA.Connect(w2.Id(), w.Id);\r\n                });\r\n        }\r\n\r\n        IsInPolyline(polyline: L.Polyline): boolean {\r\n            for (const currentPolyline of this.polylines) {\r\n                if (polyline === currentPolyline)\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        RemoveFromMap() {\r\n            if (this.markerType !== MarkerType.Dummy)\r\n                for (let polyline of this.polylines)\r\n                    removePolyline(polyline);\r\n            this.Map.removeLayer(this.marker);\r\n        }\r\n\r\n        AddToPolyline(polyline: L.Polyline): boolean {\r\n            if (this.IsInPolyline(polyline))\r\n                return false;\r\n            if (polyline.DummyHandle !== this) {\r\n                polyline.Waypoints.push(this);\r\n                polyline.addLatLng(this.LatLng);\r\n                polyline.redraw();\r\n            }\r\n            this.LatLng.Polylines.push(polyline);\r\n            this.polylines.push(polyline);\r\n            //ServerApi.WaypointConnectionApi.GetDefault().\r\n            return true;\r\n        }\r\n\r\n        RemoveFromPolyline(polyline: L.Polyline): boolean {\r\n            if (!this.IsInPolyline(polyline))\r\n                return false;\r\n            removeFromArray(polyline.Waypoints, this);\r\n            removeFromArray(this.polylines, polyline);\r\n            removeFromArray(this.LatLng.Polylines, polyline);\r\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\r\n            polyline.redraw();\r\n            return true;\r\n        }\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return true;\r\n        }\r\n\r\n        WaypointNumber = ko.observable<number>();\r\n        private polylines = new Array<L.Polyline>();\r\n\r\n\r\n        SetLatLng(latLng: L.LatLng, updatePolylines = true): void {\r\n            this.LatLng.lat = latLng.lat;\r\n            this.LatLng.lng = latLng.lng;\r\n            this.Latitude(latLng.lat);\r\n            this.Longitude(latLng.lng);\r\n            this.Redraw(updatePolylines);\r\n        }\r\n\r\n        CenterOnMap() {\r\n            this.Map.setView(this.LatLng);\r\n        }\r\n\r\n        IsDummy(): boolean {\r\n            return this.markerType === MarkerType.Dummy;\r\n        }\r\n\r\n        Latitude = ko.observable<number>(0);\r\n        Longitude = ko.observable<number>(0);\r\n        Distance = ko.observable<number>();\r\n        Precessor = ko.observable<Waypoint>();\r\n        RouteDistance = ko.observable<number>();\r\n        RoutePrecessor = ko.observable<Waypoint>();\r\n        protected popup: L.Popup;\r\n        LatLng: L.LatLng;\r\n        protected markerType: MarkerType | L.mapbox.Map;\r\n        marker: L.Marker;\r\n\r\n        Name = ko.observable<string>();\r\n        Description = ko.observable<string>();\r\n    }\r\n\r\n    export class Harbour extends Waypoint {\r\n\r\n        constructor(map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng, map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng | L.mapbox.Map, map?: L.mapbox.Map) {\r\n            super(<L.LatLng>latLng, MarkerType.Harbour, map);\r\n            //if (map)\r\n            //this.Distance.subscribe((d) => {\r\n            //    const label = this.marker.getLabel();\r\n            //    if (d > 0) {\r\n            //        if (label !== undefined) {\r\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\r\n            //        } else {\r\n            //            this.marker.bindLabel(d.toString() + \" km\",\r\n            //                <any>{\r\n            //                    direction: \"auto\"\r\n            //                });\r\n            //        }\r\n            //    } else if (label !== undefined) {\r\n            //        this.marker.unbindLabel();\r\n            //    }\r\n            //});\r\n            this.Name.subscribe((d) => {\r\n                const label = this.marker.getLabel();\r\n                if (label !== undefined) {\r\n                    this.marker.updateLabelContent(d);\r\n                } else {\r\n                    this.marker.bindLabel(d,\r\n                        {\r\n                            direction: \"auto\"\r\n                        } as any);\r\n                }\r\n            });\r\n        }\r\n\r\n        Album = ko.observable(new Album());\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return false;\r\n        }\r\n\r\n        Locations = ko.observableArray<Location>();\r\n        Rating = ko.observable<number>();\r\n        Content = ko.observable<string>();\r\n        Website = ko.observable<string>();\r\n    }\r\n\r\n    export class Address extends Entity {\r\n        Street = ko.observable<string>();\r\n        Zip = ko.observable<string>();\r\n        Town = ko.observable<string>();\r\n        Comment = ko.observable<string>();\r\n    }\r\n\r\n    export class Image extends Entity {\r\n\r\n        Path = ko.observable<string>();\r\n        Height = ko.observable<number>();\r\n        Width = ko.observable<number>();\r\n    }\r\n\r\n    export abstract class TackBase extends Entity {\r\n        StartDate = ko.observable<string>();\r\n        EndDate = ko.observable<string>();\r\n        Start = ko.observable<Harbour>();\r\n        StartId = ko.observable<number>();\r\n        EndId = ko.observable<number>();\r\n        End = ko.observable<Harbour>();\r\n        Persons = ko.observableArray<Person>();\r\n        Distance = ko.observable<number>(0);\r\n\r\n        CrewList = ko.computed({\r\n            read: () => {\r\n                var persons = this.Persons();\r\n                var first = persons[0];\r\n                if (first === undefined)\r\n                    return \"\";\r\n                if (persons.length === 1)\r\n                    return first.FullName();\r\n                else {\r\n                    var list = first.FullName();\r\n                    for (let i = 1; i < persons.length; i++) {\r\n                        list += \", \" + persons[i].FullName();\r\n                    }\r\n                    return list;\r\n                }\r\n            },\r\n            deferEvaluation: true\r\n            \r\n        });\r\n\r\n        SaillingTime = ko.computed(() => {\r\n            const startDate = this.StartDate();\r\n            const endDate = this.EndDate();\r\n            if (startDate === undefined || endDate === undefined || renderTime === undefined)\r\n                return \"\";\r\n            return renderTime(new Date(startDate), new Date(endDate));\r\n        });\r\n    }\r\n\r\n    export class Trip extends TackBase {\r\n        Name = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n        Tacks = ko.observableArray<Tack>();\r\n        IsDummy = ko.observable<boolean>();\r\n    }\r\n\r\n    export class LogBookEntry extends TackBase {\r\n        MotorHoursStart = ko.observable<number>();\r\n        MotorHoursEnd = ko.observable<number>();\r\n        LogStart = ko.observable<number>();\r\n        LogEnd = ko.observable<number>();\r\n        SpecialOccurences = ko.observable<string>();\r\n\r\n        }\r\n\r\n    export class Tack extends TackBase {\r\n        Waypoints = ko.observableArray<ServerModel.WaypointTack>();\r\n\r\n        CanRemoveTack = ko.computed({\r\n            read: () => {\r\n                if (mapViewModel.SelectedTrip() === undefined)\r\n                    return false;\r\n                const tacks = mapViewModel.SelectedTrip().Tacks;\r\n                const index = tacks.indexOf(this);\r\n                const prevTack = tacks()[index - 1];\r\n                const nextTack = tacks()[index + 1];\r\n                if (prevTack !== undefined)\r\n                    if (nextTack !== undefined)\r\n                        return prevTack.Start() !== nextTack.Start();\r\n                    else\r\n                        return true;\r\n                else\r\n                    return nextTack !== undefined;\r\n            },\r\n            deferEvaluation: true\r\n        });\r\n\r\n        ComputePlaceholder = ko.computed((): string => {\r\n            if (this.StartDate() !== undefined)\r\n                return moment(this.StartDate()).format(\"L\");\r\n            return \"\";\r\n        });\r\n\r\n    }\r\n    export class Comment extends Entity {\r\n        Title = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n        Rating = ko.observable<number>();\r\n        ParentId = ko.observable<number>();\r\n\r\n    }\r\n\r\n    export class Location extends Entity {\r\n        HarbourId = ko.observable<number>();\r\n        Website = ko.observable<string>();\r\n        Name = ko.observable<string>();\r\n        Rating = ko.observable<number>();\r\n        Address = ko.observable<Address>();\r\n        AddressId = ko.observable<number>();\r\n    }\r\n\r\n    export class Restaurant extends Location {\r\n    }\r\n\r\n\r\n    export class Supermarket extends Location {\r\n    }\r\n\r\n\r\n    export class WaypointDistance {\r\n        constructor(public Precessor: Waypoint,\r\n            public Waypoint: Waypoint,\r\n            public Distance: number,\r\n            calculaterdWaypoints: Waypoint[],\r\n            calculateRoute: boolean) {\r\n            this.LatLng = Waypoint.LatLng;\r\n            calculaterdWaypoints.push(Waypoint);\r\n            for (let wp of Waypoint.GetConnectedWaypoints()) {\r\n                if (calculaterdWaypoints.indexOf(wp) === -1)\r\n                    this.ConnectedWayPoints.push(wp);\r\n            }\r\n            if (calculateRoute) {\r\n                Waypoint.RoutePrecessor(Precessor);\r\n                Waypoint.RouteDistance(Distance);\r\n            } else {\r\n                Waypoint.Precessor(Precessor);\r\n                Waypoint.Distance(Distance);\r\n            }\r\n        }\r\n\r\n        ConnectedWayPoints = new Array<Waypoint>();\r\n        ConnectedDistances = new Array<WaypointDistance>();\r\n        LatLng: L.LatLng;\r\n    }\r\n\r\n}\r\n\r\nenum MarkerType {\r\n    Harbour,\r\n    Dummy,\r\n    Waypoint,\r\n    WeatherStation\r\n}"],"sourceRoot":"/source/"}