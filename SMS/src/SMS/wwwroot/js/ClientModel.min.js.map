{"version":3,"sources":["wwwroot/js/ClientModel.js","/source/wwwroot/js/ClientModel.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","ClientModel","SPerson","ServerModel","Person","SAddress","Address","SAlbum","Album","SCommentList","CommentList","Entity","Id","ko","observable","AlbumId","CommentListId","CreateObservable","AddTransferMode","TransferMode","Include","UpdateTransferMode","ClientId","ClientIdCounter","EntityDB","toString","DeleteOnServer","ServerApi","Delete","SaveToServer","_this","undefined","Create","ConvertToServerEntity","done","data","savedState","LoadFromServerEntity","Update","serverEntity","_i","_a","GetObservableNames","length","prop","sVal","Array","_b","sVal_1","obj","entity","cVal","idOnly","propName","val","arr","val_1","elem","push","CopyTo","SaveState","unwrap","slice","val_2","out","isWriteableObservable","Block","RevertState","ignoreError","val_3","_super","apply","arguments","Images","observableArray","AlbumApi","GetDefault","CreateServerEntity","AlbumImage","CommentListApi","PersonApi","LastName","FirstName","FullName","computed","Job","DueTo","AssignedTo","AssignedToId","Title","Content","Done","SuperJob","SuperJobId","Trip","TripId","SubJobs","JobApi","Waypoint","latLng","markerType","Map","call","WaypointNumber","polylines","Latitude","Longitude","Distance","Precessor","RouteDistance","RoutePrecessor","Name","Description","WaypointApi","lat","lng","LatLng","L","subscribe","value","Redraw","Polylines","Popup","content","popup","removeLayer","marker","bindPopup","Show","highlight","setOpacity","IsDummy","$","_icon","addClass","Hide","removeClass","updatePolylines","setLatLng","i","redrawPolyline","GetConnectedWaypoints","ret","line","_c","Waypoints","waypoint","sort","w1","w2","distanceTo","convertFromDummyHandle","splitPolyline","MarkerType","w","wCA","WaypointConnectionApi","Disconnect","Connect","IsInPolyline","polyline","currentPolyline","RemoveFromMap","Dummy","removePolyline","AddToPolyline","DummyHandle","addLatLng","redraw","RemoveFromPolyline","removeFromArray","getLatLngs","RemoveIfHasZeroOrOnePolylines","SetLatLng","CenterOnMap","setView","Harbour","name","map","HarbourApi","Locations","Rating","Website","label","getLabel","updateLabelContent","bindLabel","direction","Start","End","Tacks","TripApi","Street","Zip","Town","Comment","AddressApi","Image","Path","Height","Width","ImageApi","Tack","StartDate","EndDate","Crew","TackApi","CanRemoveTack","read","mapViewModel","SelectedTrip","tacks","index","indexOf","prevTack","nextTack","deferEvaluation","ComputePlaceholder","moment","format","Location","HarbourId","AddressId","LocationApi","Restaurant","RestaurantApi","Supermarket","SupermarketApi","WaypointDistance","calculaterdWaypoints","calculateRoute","ConnectedWayPoints","ConnectedDistances","wp"],"mappings":"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","file":"wwwroot/js/ClientModel.min.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ClientModel;\n(function (ClientModel) {\n    var SPerson = ServerModel.Person;\n    var SAddress = ServerModel.Address;\n    var SAlbum = ServerModel.Album;\n    var SCommentList = ServerModel.CommentList;\n    var Entity = (function () {\n        function Entity() {\n            this.Id = ko.observable();\n            this.AlbumId = ko.observable();\n            this.CommentListId = ko.observable();\n            this.Album = CreateObservable({ AddTransferMode: TransferMode.Include, UpdateTransferMode: TransferMode.Include });\n            this.CommentList = ko.observable();\n            this.ClientId = ++Entity.ClientIdCounter;\n            Entity.EntityDB[this.ClientId.toString()] = this;\n        }\n        Entity.prototype.DeleteOnServer = function () {\n            return this.ServerApi.Delete(this.Id());\n        };\n        ;\n        Entity.prototype.SaveToServer = function () {\n            var _this = this;\n            if (this.Id() === undefined)\n                return this.ServerApi.Create(this.ConvertToServerEntity())\n                    .done(function (data) {\n                    _this.savedState = undefined;\n                    _this.LoadFromServerEntity(data);\n                });\n            return this.ServerApi.Update(this.ConvertToServerEntity())\n                .done(function (data) {\n                _this.savedState = undefined;\n                _this.LoadFromServerEntity(data);\n            });\n            ;\n        };\n        Entity.prototype.LoadFromServerEntity = function (serverEntity) {\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var sVal = serverEntity[prop];\n                if (sVal !== undefined && sVal !== null) {\n                    if (sVal instanceof Array) {\n                        for (var _b = 0, sVal_1 = sVal; _b < sVal_1.length; _b++) {\n                            var obj = sVal_1[_b];\n                            var entity = Entity.EntityDB[obj.ClientId.toString()];\n                            if (entity !== undefined)\n                                entity.LoadFromServerEntity(obj);\n                        }\n                    }\n                    else {\n                        var cVal = this[prop]();\n                        if (cVal instanceof Entity)\n                            cVal.LoadFromServerEntity(sVal);\n                        else\n                            this[prop](sVal);\n                    }\n                }\n            }\n            return this;\n        };\n        Entity.prototype.ConvertToServerEntity = function (idOnly) {\n            if (idOnly === void 0) { idOnly = false; }\n            var serverEntity = { ClientId: this.ClientId };\n            var entity = this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var propName = _a[_i];\n                var prop = entity[propName];\n                var val = prop();\n                if (val !== undefined) {\n                    if (val instanceof Array) {\n                        var arr = new Array();\n                        for (var _b = 0, val_1 = val; _b < val_1.length; _b++) {\n                            var elem = val_1[_b];\n                            arr.push(elem.ConvertToServerEntity());\n                        }\n                        serverEntity[propName] = arr;\n                    }\n                    else\n                        serverEntity[propName] = val instanceof Entity ? val.ConvertToServerEntity() : val;\n                }\n            }\n            return serverEntity;\n        };\n        Entity.prototype.CopyTo = function (entity) {\n            entity.Id(this.Id());\n        };\n        Entity.prototype.SaveState = function () {\n            var entity = this;\n            entity.savedState = new Object();\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var val = ko.unwrap(entity[prop]);\n                if (val instanceof Array) {\n                    val = val.slice(0);\n                    for (var _b = 0, val_2 = val; _b < val_2.length; _b++) {\n                        var elem = val_2[_b];\n                        if (elem instanceof Entity)\n                            elem.SaveState();\n                    }\n                }\n                else if (val instanceof Entity)\n                    val.SaveState();\n                entity.savedState[prop] = val;\n            }\n        };\n        Entity.prototype.GetObservableNames = function () {\n            var out = new Array();\n            var entity = this;\n            for (var prop in entity)\n                if (entity.hasOwnProperty(prop))\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\n                        out.push(prop);\n            return out;\n        };\n        Entity.prototype.RevertState = function (ignoreError) {\n            if (ignoreError === void 0) { ignoreError = false; }\n            if (this.savedState === undefined)\n                if (ignoreError)\n                    return;\n                else\n                    throw \"No saved state\";\n            var entity = this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var val = entity.savedState[prop];\n                //this.savedState[prop] = val;\n                entity[prop](val);\n                if (val instanceof Entity)\n                    val.RevertState();\n                else if (val instanceof Array)\n                    for (var _b = 0, val_3 = val; _b < val_3.length; _b++) {\n                        var elem = val_3[_b];\n                        if (elem instanceof Entity)\n                            elem.RevertState();\n                    }\n            }\n        };\n        Entity.ClientIdCounter = 0;\n        Entity.EntityDB = {};\n        return Entity;\n    }());\n    ClientModel.Entity = Entity;\n    var Album = (function (_super) {\n        __extends(Album, _super);\n        function Album() {\n            _super.apply(this, arguments);\n            this.Images = ko.observableArray();\n            this.ServerApi = ServerApi.AlbumApi.GetDefault();\n        }\n        Album.prototype.CreateServerEntity = function () {\n            return new SAlbum();\n        };\n        return Album;\n    }(Entity));\n    ClientModel.Album = Album;\n    var AlbumImage = (function () {\n        function AlbumImage() {\n        }\n        return AlbumImage;\n    }());\n    ClientModel.AlbumImage = AlbumImage;\n    var CommentList = (function (_super) {\n        __extends(CommentList, _super);\n        function CommentList() {\n            _super.apply(this, arguments);\n            this.ServerApi = ServerApi.CommentListApi.GetDefault();\n        }\n        CommentList.prototype.CreateServerEntity = function () {\n            return new SCommentList();\n        };\n        return CommentList;\n    }(Entity));\n    ClientModel.CommentList = CommentList;\n    var Person = (function (_super) {\n        __extends(Person, _super);\n        function Person() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.ServerApi = ServerApi.PersonApi.GetDefault();\n            this.LastName = ko.observable();\n            this.FirstName = ko.observable();\n            this.FullName = ko.computed(function () { return _this.FirstName() + \" \" + _this.LastName(); });\n        }\n        Person.prototype.CreateServerEntity = function () {\n            return new SPerson();\n        };\n        return Person;\n    }(Entity));\n    ClientModel.Person = Person;\n    var Job = (function (_super) {\n        __extends(Job, _super);\n        function Job() {\n            _super.apply(this, arguments);\n            this.DueTo = ko.observable();\n            this.AssignedTo = ko.observable();\n            this.AssignedToId = ko.observable();\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n            this.Done = ko.observable();\n            this.SuperJob = ko.observable();\n            this.SuperJobId = ko.observable();\n            this.Trip = ko.observable();\n            this.TripId = ko.observable();\n            this.SubJobs = ko.observableArray();\n            this.ServerApi = ServerApi.JobApi.GetDefault();\n        }\n        Job.prototype.CreateServerEntity = function () {\n            return new ServerModel.Job();\n        };\n        return Job;\n    }(Entity));\n    ClientModel.Job = Job;\n    var Waypoint = (function (_super) {\n        __extends(Waypoint, _super);\n        function Waypoint(latLng, markerType, Map) {\n            var _this = this;\n            _super.call(this);\n            this.Map = Map;\n            this.WaypointNumber = ko.observable();\n            this.polylines = new Array();\n            this.Latitude = ko.observable();\n            this.Longitude = ko.observable();\n            this.Distance = ko.observable();\n            this.Precessor = ko.observable();\n            this.RouteDistance = ko.observable();\n            this.RoutePrecessor = ko.observable();\n            this.Name = ko.observable();\n            this.Description = ko.observable();\n            this.ServerApi = ServerApi.WaypointApi.GetDefault();\n            this.Latitude(latLng.lat);\n            this.Longitude(latLng.lng);\n            this.LatLng = new L.LatLng(latLng.lat, latLng.lng);\n            this.Latitude.subscribe(function (value) {\n                if (_this.LatLng.lat !== value) {\n                    _this.LatLng.lat = value;\n                    _this.Redraw();\n                }\n            });\n            this.Longitude.subscribe(function (value) {\n                if (_this.LatLng.lng !== value) {\n                    _this.LatLng.lng = value;\n                    _this.Redraw();\n                }\n            });\n            this.markerType = markerType;\n            this.LatLng.Polylines = new Array();\n            this.LatLng.Waypoint = this;\n            //this.Latitude.subscribe((value) => {\n            //    if (this.LatLng.lat !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            //this.Longitude.subscribe((value) => {\n            //    if (this.LatLng.lng !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            this.Precessor.Block = true;\n            this.Distance.Block = true;\n        }\n        Waypoint.prototype.Popup = function (content) {\n            if (this.popup !== undefined) {\n                this.Map.removeLayer(this.popup);\n                this.popup = undefined;\n            }\n            if (content !== undefined) {\n                //this.popup = L.popup();\n                this.marker.bindPopup(content); //.openPopup();\n            }\n        };\n        Waypoint.prototype.Show = function (highlight) {\n            if (highlight === void 0) { highlight = false; }\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\n            if (highlight)\n                $(this.marker._icon).addClass(\"expose\");\n        };\n        Waypoint.prototype.Hide = function () {\n            this.marker.setOpacity(0.1);\n            $(this.marker._icon).removeClass(\"expose\");\n        };\n        Waypoint.prototype.Redraw = function (updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            this.marker.setLatLng(this.LatLng);\n            if (updatePolylines)\n                for (var i = 0; i < this.polylines.length; i++)\n                    redrawPolyline(this.polylines[i]);\n        };\n        Waypoint.prototype.GetConnectedWaypoints = function () {\n            var _this = this;\n            var ret = new Array();\n            for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                var line = _a[_i];\n                for (var _b = 0, _c = line.Waypoints; _b < _c.length; _b++) {\n                    var waypoint = _c[_b];\n                    if (waypoint !== this)\n                        ret.push(waypoint);\n                }\n            }\n            return ret.sort(function (w1, w2) {\n                return w1.LatLng.distanceTo(_this.LatLng) - w2.LatLng.distanceTo(_this.LatLng);\n            });\n        };\n        Waypoint.prototype.convertFromDummyHandle = function () {\n            this.marker.setOpacity(1);\n            var w1 = this.polylines[0].Waypoints[0];\n            var w2 = this.polylines[0].Waypoints[1];\n            splitPolyline(this.polylines[0]);\n            this.markerType = MarkerType.Waypoint;\n            this.SaveToServer()\n                .done(function (w) {\n                var wCA = ServerApi.WaypointConnectionApi.GetDefault();\n                wCA.Disconnect(w1.Id(), w2.Id());\n                wCA.Connect(w1.Id(), w.Id);\n                wCA.Connect(w2.Id(), w.Id);\n            });\n        };\n        Waypoint.prototype.IsInPolyline = function (polyline) {\n            for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                var currentPolyline = _a[_i];\n                if (polyline === currentPolyline)\n                    return true;\n            }\n            return false;\n        };\n        Waypoint.prototype.RemoveFromMap = function () {\n            if (this.markerType !== MarkerType.Dummy)\n                for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                    var polyline = _a[_i];\n                    removePolyline(polyline);\n                }\n            this.Map.removeLayer(this.marker);\n        };\n        Waypoint.prototype.AddToPolyline = function (polyline) {\n            if (this.IsInPolyline(polyline))\n                return false;\n            if (polyline.DummyHandle !== this) {\n                polyline.Waypoints.push(this);\n                polyline.addLatLng(this.LatLng);\n                polyline.redraw();\n            }\n            this.LatLng.Polylines.push(polyline);\n            this.polylines.push(polyline);\n            //ServerApi.WaypointConnectionApi.GetDefault().\n            return true;\n        };\n        Waypoint.prototype.RemoveFromPolyline = function (polyline) {\n            if (!this.IsInPolyline(polyline))\n                return false;\n            removeFromArray(polyline.Waypoints, this);\n            removeFromArray(this.polylines, polyline);\n            removeFromArray(this.LatLng.Polylines, polyline);\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\n            polyline.redraw();\n            return true;\n        };\n        Waypoint.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return true;\n        };\n        Waypoint.prototype.SetLatLng = function (latLng, updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            this.LatLng.lat = latLng.lat;\n            this.LatLng.lng = latLng.lng;\n            this.Latitude(latLng.lat);\n            this.Longitude(latLng.lng);\n            this.Redraw(updatePolylines);\n        };\n        Waypoint.prototype.CenterOnMap = function () {\n            this.Map.setView(this.LatLng);\n        };\n        Waypoint.prototype.IsDummy = function () {\n            return this.markerType === MarkerType.Dummy;\n        };\n        Waypoint.prototype.CreateServerEntity = function () {\n            return new ServerModel.Waypoint();\n        };\n        return Waypoint;\n    }(Entity));\n    ClientModel.Waypoint = Waypoint;\n    var Harbour = (function (_super) {\n        __extends(Harbour, _super);\n        function Harbour(name, latLng, map) {\n            var _this = this;\n            _super.call(this, latLng, MarkerType.Harbour, map);\n            this.Album = ko.observable(new Album());\n            this.CommentList = ko.observable(new CommentList());\n            this.ServerApi = ServerApi.HarbourApi.GetDefault();\n            this.Locations = ko.observableArray();\n            this.Rating = ko.observable();\n            this.Content = ko.observable();\n            this.Website = ko.observable();\n            this.Name(name);\n            //this.Distance.subscribe((d) => {\n            //    const label = this.marker.getLabel();\n            //    if (d > 0) {\n            //        if (label !== undefined) {\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\n            //        } else {\n            //            this.marker.bindLabel(d.toString() + \" km\",\n            //                <any>{\n            //                    direction: \"auto\"\n            //                });\n            //        }\n            //    } else if (label !== undefined) {\n            //        this.marker.unbindLabel();\n            //    }\n            //});\n            this.Name.subscribe(function (d) {\n                var label = _this.marker.getLabel();\n                if (label !== undefined) {\n                    _this.marker.updateLabelContent(d);\n                }\n                else {\n                    _this.marker.bindLabel(d, {\n                        direction: \"auto\"\n                    });\n                }\n            });\n        }\n        Harbour.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return false;\n        };\n        Harbour.prototype.CreateServerEntity = function () {\n            return new ServerModel.Harbour();\n        };\n        return Harbour;\n    }(Waypoint));\n    ClientModel.Harbour = Harbour;\n    var Trip = (function (_super) {\n        __extends(Trip, _super);\n        function Trip() {\n            _super.apply(this, arguments);\n            this.Name = ko.observable();\n            this.Start = ko.observable();\n            this.End = ko.observable();\n            this.Content = ko.observable();\n            this.Tacks = ko.observableArray();\n            this.ServerApi = ServerApi.TripApi.GetDefault();\n        }\n        Trip.prototype.CreateServerEntity = function () {\n            return new ServerModel.Trip();\n        };\n        return Trip;\n    }(Entity));\n    ClientModel.Trip = Trip;\n    var Address = (function (_super) {\n        __extends(Address, _super);\n        function Address() {\n            _super.apply(this, arguments);\n            this.Street = ko.observable();\n            this.Zip = ko.observable();\n            this.Town = ko.observable();\n            this.Comment = ko.observable();\n            this.ServerApi = ServerApi.AddressApi.GetDefault();\n        }\n        Address.prototype.CreateServerEntity = function () {\n            return new SAddress;\n        };\n        return Address;\n    }(Entity));\n    ClientModel.Address = Address;\n    var Image = (function (_super) {\n        __extends(Image, _super);\n        function Image() {\n            _super.apply(this, arguments);\n            this.Path = ko.observable();\n            this.Height = ko.observable();\n            this.Width = ko.observable();\n            this.ServerApi = ServerApi.ImageApi.GetDefault();\n        }\n        Image.prototype.CreateServerEntity = function () {\n            return new ServerModel.Image();\n        };\n        return Image;\n    }(Entity));\n    ClientModel.Image = Image;\n    var Tack = (function (_super) {\n        __extends(Tack, _super);\n        function Tack() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.StartDate = ko.observable();\n            this.EndDate = ko.observable();\n            this.Start = ko.observable();\n            this.End = ko.observable();\n            this.Waypoints = ko.observableArray();\n            this.Crew = ko.observableArray();\n            this.Distance = ko.observable();\n            this.ServerApi = ServerApi.TackApi.GetDefault();\n            this.CanRemoveTack = ko.computed({\n                read: function () {\n                    if (mapViewModel.SelectedTrip() === undefined)\n                        return false;\n                    var tacks = mapViewModel.SelectedTrip().Tacks;\n                    var index = tacks.indexOf(_this);\n                    var prevTack = tacks()[index - 1];\n                    var nextTack = tacks()[index + 1];\n                    if (prevTack !== undefined)\n                        if (nextTack !== undefined)\n                            return prevTack.Start() !== nextTack.Start();\n                        else\n                            return true;\n                    else\n                        return nextTack !== undefined;\n                },\n                deferEvaluation: true\n            });\n            this.ComputePlaceholder = ko.computed(function () {\n                if (_this.StartDate() !== undefined)\n                    return moment(_this.StartDate()).format(\"L\");\n                return \"\";\n            });\n        }\n        Tack.prototype.CreateServerEntity = function () {\n            return new ServerModel.Tack();\n        };\n        return Tack;\n    }(Entity));\n    ClientModel.Tack = Tack;\n    var Location = (function (_super) {\n        __extends(Location, _super);\n        function Location() {\n            _super.apply(this, arguments);\n            this.HarbourId = ko.observable();\n            this.Website = ko.observable();\n            this.Name = ko.observable();\n            this.Rating = ko.observable();\n            this.Address = ko.observable();\n            this.AddressId = ko.observable();\n            this.ServerApi = ServerApi.LocationApi.GetDefault();\n        }\n        Location.prototype.CreateServerEntity = function () {\n            return new ServerModel.Location();\n        };\n        return Location;\n    }(Entity));\n    ClientModel.Location = Location;\n    var Restaurant = (function (_super) {\n        __extends(Restaurant, _super);\n        function Restaurant() {\n            _super.apply(this, arguments);\n            this.ServerApi = ServerApi.RestaurantApi.GetDefault();\n        }\n        Restaurant.prototype.CreateServerEntity = function () {\n            return new ServerModel.Restaurant();\n        };\n        return Restaurant;\n    }(Location));\n    ClientModel.Restaurant = Restaurant;\n    var Supermarket = (function (_super) {\n        __extends(Supermarket, _super);\n        function Supermarket() {\n            _super.apply(this, arguments);\n            this.ServerApi = ServerApi.SupermarketApi.GetDefault();\n        }\n        Supermarket.prototype.CreateServerEntity = function () {\n            return new ServerModel.Supermarket();\n        };\n        return Supermarket;\n    }(Location));\n    ClientModel.Supermarket = Supermarket;\n    var WaypointDistance = (function () {\n        function WaypointDistance(Precessor, Waypoint, Distance, calculaterdWaypoints, calculateRoute) {\n            this.Precessor = Precessor;\n            this.Waypoint = Waypoint;\n            this.Distance = Distance;\n            this.ConnectedWayPoints = new Array();\n            this.ConnectedDistances = new Array();\n            this.LatLng = Waypoint.LatLng;\n            calculaterdWaypoints.push(Waypoint);\n            for (var _i = 0, _a = Waypoint.GetConnectedWaypoints(); _i < _a.length; _i++) {\n                var wp = _a[_i];\n                if (calculaterdWaypoints.indexOf(wp) === -1)\n                    this.ConnectedWayPoints.push(wp);\n            }\n            if (calculateRoute) {\n                Waypoint.RoutePrecessor(Precessor);\n                Waypoint.RouteDistance(Distance);\n            }\n            else {\n                Waypoint.Precessor(Precessor);\n                Waypoint.Distance(Distance);\n            }\n        }\n        return WaypointDistance;\n    }());\n    ClientModel.WaypointDistance = WaypointDistance;\n})(ClientModel || (ClientModel = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[MarkerType[\"Harbour\"] = 0] = \"Harbour\";\n    MarkerType[MarkerType[\"Dummy\"] = 1] = \"Dummy\";\n    MarkerType[MarkerType[\"Waypoint\"] = 2] = \"Waypoint\";\n    MarkerType[MarkerType[\"WeatherStation\"] = 3] = \"WeatherStation\";\n})(MarkerType || (MarkerType = {}));\n\n","\r\n\r\nmodule ClientModel {\r\n\r\n\r\n\r\n    import SEntity = ServerModel.Entity\r\n    import SWaypoint = ServerModel.Waypoint\r\n    import SWaypointConnection = ServerModel.WaypointConnection\r\n    import SHarbour = ServerModel.Harbour\r\n    import SPerson = ServerModel.Person\r\n    import SJob = ServerModel.Job\r\n    import STrip = ServerModel.Trip\r\n    import SAddress = ServerModel.Address\r\n    import SImage = ServerModel.Image\r\n    import SAlbum = ServerModel.Album\r\n    import SWaypointTack = ServerModel.WaypointTack\r\n    import STack = ServerModel.Tack\r\n    import SLocation = ServerModel.Location\r\n    import SRestaurant = ServerModel.Restaurant\r\n    import SSupermarket = ServerModel.Supermarket\r\n    import SComment = ServerModel.Comment;\r\n    import SCommentList = ServerModel.CommentList;\r\n\r\n    export interface IEntity {\r\n        Id: KnockoutObservable<number>;\r\n        ClientId: number;\r\n    }\r\n\r\n    export abstract class Entity<T extends ServerModel.Entity> implements IEntity {\r\n        constructor() {\r\n            Entity.EntityDB[this.ClientId.toString()] = this;\r\n        }\r\n\r\n        Id = ko.observable<number>();\r\n        AlbumId = ko.observable<number>();\r\n        CommentListId = ko.observable<number>();\r\n        Album = CreateObservable<Album>({ AddTransferMode: TransferMode.Include, UpdateTransferMode: TransferMode.Include });\r\n        CommentList = ko.observable<CommentList>();\r\n\r\n\r\n\r\n        private static ClientIdCounter = 0;\r\n        private static EntityDB = {};\r\n\r\n        ClientId = ++Entity.ClientIdCounter;\r\n\r\n        protected ServerApi: ServerApi.Api<T>;\r\n\r\n        DeleteOnServer(): JQueryPromise<T> {\r\n            return this.ServerApi.Delete(this.Id());\r\n        };\r\n\r\n        SaveToServer(): JQueryPromise<T> {\r\n            if (this.Id() === undefined)\r\n                return this.ServerApi.Create(this.ConvertToServerEntity())\r\n                    .done(data => {\r\n                        this.savedState = undefined;\r\n                        this.LoadFromServerEntity(data);\r\n                    });\r\n            return this.ServerApi.Update(this.ConvertToServerEntity())\r\n                .done((data) => {\r\n                    this.savedState = undefined;\r\n                    this.LoadFromServerEntity(data);\r\n                });;\r\n        }\r\n\r\n        LoadFromServerEntity(serverEntity: T): this {\r\n            for (let prop of this.GetObservableNames()) {\r\n                const sVal = serverEntity[prop];\r\n                if (sVal !== undefined && sVal !== null) {\r\n                    if (sVal instanceof Array) {\r\n                        for (let obj of sVal) {\r\n                            var entity = Entity.EntityDB[obj.ClientId.toString()];\r\n                            if (entity !== undefined)\r\n                                entity.LoadFromServerEntity(obj);\r\n                        }\r\n                    } else {\r\n                        const cVal = this[prop]();\r\n                        if (cVal instanceof Entity)\r\n                            cVal.LoadFromServerEntity(sVal);\r\n                        else\r\n                            this[prop](sVal);\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        ConvertToServerEntity(idOnly: boolean = false): T {\r\n            const serverEntity = { ClientId: this.ClientId };\r\n            const entity = this;\r\n            for (let propName of this.GetObservableNames()) {\r\n                const prop = entity[propName];\r\n                const val = prop();\r\n                if (val !== undefined) {\r\n                    if (val instanceof Array) {\r\n                        const arr = new Array<T>();\r\n                        for (let elem of val) {\r\n                            arr.push(elem.ConvertToServerEntity());\r\n                        }\r\n                        serverEntity[propName] = arr;\r\n                    }\r\n                    else\r\n                        serverEntity[propName] = val instanceof Entity ? val.ConvertToServerEntity() : val;\r\n                }\r\n            }\r\n            return <any>serverEntity;\r\n        }\r\n\r\n        CopyTo(entity: this) {\r\n            entity.Id(this.Id());\r\n        }\r\n\r\n        abstract CreateServerEntity(): T;\r\n\r\n        private savedState: any;\r\n\r\n        SaveState() {\r\n            const entity = this;\r\n            entity.savedState = new Object();\r\n            for (let prop of this.GetObservableNames()) {\r\n                let val = ko.unwrap(entity[prop]);\r\n                if (val instanceof Array) {\r\n                    val = val.slice(0);\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.SaveState();\r\n                    }\r\n                } else if (val instanceof Entity)\r\n                    val.SaveState();\r\n                entity.savedState[prop] = val;\r\n            }\r\n        }\r\n\r\n        protected GetObservableNames(): string[] {\r\n            const out = new Array<string>();\r\n            const entity = this;\r\n            for (let prop in entity)\r\n                if (entity.hasOwnProperty(prop))\r\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\r\n                        out.push(prop);\r\n            return out;\r\n        }\r\n\r\n        RevertState(ignoreError: boolean = false) {\r\n            if (this.savedState === undefined)\r\n                if (ignoreError)\r\n                    return;\r\n                else\r\n                    throw \"No saved state\";\r\n            const entity = this;\r\n            for (let prop of this.GetObservableNames()) {\r\n                const val = entity.savedState[prop];\r\n                //this.savedState[prop] = val;\r\n                entity[prop](val);\r\n                if (val instanceof Entity)\r\n                    val.RevertState();\r\n                else if (val instanceof Array)\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.RevertState();\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n    export class Album extends Entity<SAlbum> {\r\n        CreateServerEntity(): SAlbum {\r\n            return new SAlbum();\r\n        }\r\n\r\n        Images = ko.observableArray<Image>();\r\n\r\n\r\n        ServerApi = ServerApi.AlbumApi.GetDefault();\r\n    }\r\n\r\n    export class AlbumImage {\r\n        \r\n    }\r\n\r\n    export class CommentList extends Entity<SCommentList> {\r\n        CreateServerEntity(): SCommentList {\r\n            return new SCommentList();\r\n        }\r\n\r\n        ServerApi = ServerApi.CommentListApi.GetDefault();\r\n    }\r\n\r\n    export class Person extends Entity<SPerson> {\r\n\r\n        CreateServerEntity(): SPerson {\r\n            return new SPerson();\r\n        }\r\n\r\n        ServerApi = ServerApi.PersonApi.GetDefault();\r\n        LastName = ko.observable<string>();\r\n        FirstName = ko.observable<string>();\r\n        FullName = ko.computed(() => this.FirstName() + \" \" + this.LastName());\r\n\r\n    }\r\n\r\n    export class Job extends Entity<SJob> {\r\n        DueTo = ko.observable<Date>();\r\n        AssignedTo = ko.observable<Person>();\r\n        AssignedToId = ko.observable<number>();\r\n        Title = ko.observable<String>();\r\n        Content = ko.observable<String>();\r\n        Done = ko.observable<boolean>();\r\n        SuperJob = ko.observable<Job>();\r\n        SuperJobId = ko.observable<number>();\r\n        Trip = ko.observable<Trip>();\r\n        TripId = ko.observable<number>();\r\n        SubJobs = ko.observableArray<Job>();\r\n\r\n\r\n        CreateServerEntity(): ServerModel.Job {\r\n            return new ServerModel.Job();\r\n        }\r\n\r\n        ServerApi = ServerApi.JobApi.GetDefault();\r\n    }\r\n\r\n    export class Waypoint extends Entity<SWaypoint> {\r\n        constructor(latLng: L.LatLng, markerType: MarkerType, protected Map: L.mapbox.Map) {\r\n            super();\r\n            this.Latitude(latLng.lat);\r\n            this.Longitude(latLng.lng);\r\n            this.LatLng = new L.LatLng(latLng.lat, latLng.lng);\r\n            this.Latitude.subscribe((value) => {\r\n                if (this.LatLng.lat !== value) {\r\n                    this.LatLng.lat = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.Longitude.subscribe((value) => {\r\n                if (this.LatLng.lng !== value) {\r\n                    this.LatLng.lng = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.markerType = markerType;\r\n            this.LatLng.Polylines = new Array();\r\n            this.LatLng.Waypoint = this;\r\n            //this.Latitude.subscribe((value) => {\r\n            //    if (this.LatLng.lat !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            //this.Longitude.subscribe((value) => {\r\n            //    if (this.LatLng.lng !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            this.Precessor.Block = true;\r\n            this.Distance.Block = true;\r\n        }\r\n\r\n        Popup(content: string);\r\n        Popup();\r\n        Popup(content?: string) {\r\n            if (this.popup !== undefined) {\r\n                this.Map.removeLayer(this.popup);\r\n                this.popup = undefined;\r\n            }\r\n            if (content !== undefined) {\r\n                //this.popup = L.popup();\r\n                this.marker.bindPopup(content); //.openPopup();\r\n\r\n\r\n            }\r\n        }\r\n\r\n        Show(highlight: boolean = false): void {\r\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\r\n            if (highlight)\r\n                $(this.marker._icon).addClass(\"expose\");\r\n        }\r\n\r\n        Hide(): void {\r\n            this.marker.setOpacity(0.1);\r\n            $(this.marker._icon).removeClass(\"expose\");\r\n        }\r\n\r\n        Redraw(updatePolylines = true): void {\r\n            this.marker.setLatLng(this.LatLng);\r\n            if (updatePolylines)\r\n                for (let i = 0; i < this.polylines.length; i++)\r\n                    redrawPolyline(this.polylines[i]);\r\n        }\r\n\r\n        GetConnectedWaypoints(): Waypoint[] {\r\n            const ret = new Array<Waypoint>();\r\n            for (let line of this.polylines) {\r\n                for (let waypoint of line.Waypoints) {\r\n                    if (waypoint !== this)\r\n                        ret.push(waypoint);\r\n                }\r\n            }\r\n            return ret.sort((w1, w2) => {\r\n                return w1.LatLng.distanceTo(this.LatLng) - w2.LatLng.distanceTo(this.LatLng);\r\n            });\r\n        }\r\n\r\n        convertFromDummyHandle() {\r\n            this.marker.setOpacity(1);\r\n            var w1 = this.polylines[0].Waypoints[0];\r\n            var w2 = this.polylines[0].Waypoints[1];\r\n            splitPolyline(this.polylines[0]);\r\n            this.markerType = MarkerType.Waypoint;\r\n            this.SaveToServer()\r\n                .done((w) => {\r\n                    const wCA = ServerApi.WaypointConnectionApi.GetDefault();\r\n                    wCA.Disconnect(w1.Id(), w2.Id());\r\n                    wCA.Connect(w1.Id(), w.Id);\r\n                    wCA.Connect(w2.Id(), w.Id);\r\n                });\r\n        }\r\n\r\n        IsInPolyline(polyline: L.Polyline): boolean {\r\n            for (const currentPolyline of this.polylines) {\r\n                if (polyline === currentPolyline)\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        RemoveFromMap() {\r\n            if (this.markerType !== MarkerType.Dummy)\r\n                for (let polyline of this.polylines)\r\n                    removePolyline(polyline);\r\n            this.Map.removeLayer(this.marker);\r\n        }\r\n\r\n        AddToPolyline(polyline: L.Polyline): boolean {\r\n            if (this.IsInPolyline(polyline))\r\n                return false;\r\n            if (polyline.DummyHandle !== this) {\r\n                polyline.Waypoints.push(this);\r\n                polyline.addLatLng(this.LatLng);\r\n                polyline.redraw();\r\n            }\r\n            this.LatLng.Polylines.push(polyline);\r\n            this.polylines.push(polyline);\r\n            //ServerApi.WaypointConnectionApi.GetDefault().\r\n            return true;\r\n        }\r\n\r\n        RemoveFromPolyline(polyline: L.Polyline): boolean {\r\n            if (!this.IsInPolyline(polyline))\r\n                return false;\r\n            removeFromArray(polyline.Waypoints, this);\r\n            removeFromArray(this.polylines, polyline);\r\n            removeFromArray(this.LatLng.Polylines, polyline);\r\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\r\n            polyline.redraw();\r\n            return true;\r\n        }\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return true;\r\n        }\r\n\r\n        WaypointNumber = ko.observable<number>();\r\n        private polylines = new Array<L.Polyline>();\r\n\r\n\r\n        SetLatLng(latLng: L.LatLng, updatePolylines = true): void {\r\n            this.LatLng.lat = latLng.lat;\r\n            this.LatLng.lng = latLng.lng;\r\n            this.Latitude(latLng.lat);\r\n            this.Longitude(latLng.lng);\r\n            this.Redraw(updatePolylines);\r\n        }\r\n\r\n        CenterOnMap() {\r\n            this.Map.setView(this.LatLng);\r\n        }\r\n\r\n        IsDummy(): boolean {\r\n            return this.markerType === MarkerType.Dummy;\r\n        }\r\n\r\n        Latitude = ko.observable<number>();\r\n        Longitude = ko.observable<number>();\r\n        Distance = ko.observable<number>();\r\n        Precessor = ko.observable<Waypoint>();\r\n        RouteDistance = ko.observable<number>();\r\n        RoutePrecessor = ko.observable<Waypoint>();\r\n        protected popup: L.Popup;\r\n        LatLng: L.LatLng;\r\n        protected markerType: MarkerType;\r\n        marker: L.Marker;\r\n\r\n        Name = ko.observable<string>();\r\n        Description = ko.observable<string>();\r\n\r\n        CreateServerEntity(): ServerModel.Waypoint {\r\n            return new ServerModel.Waypoint();\r\n        }\r\n\r\n        ServerApi = ServerApi.WaypointApi.GetDefault();\r\n    }\r\n\r\n    export class Harbour extends Waypoint {\r\n\r\n        constructor(name: string, latLng: L.LatLng, map: L.mapbox.Map) {\r\n            super(latLng, MarkerType.Harbour, map);\r\n            this.Name(name);\r\n            //this.Distance.subscribe((d) => {\r\n            //    const label = this.marker.getLabel();\r\n            //    if (d > 0) {\r\n            //        if (label !== undefined) {\r\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\r\n            //        } else {\r\n            //            this.marker.bindLabel(d.toString() + \" km\",\r\n            //                <any>{\r\n            //                    direction: \"auto\"\r\n            //                });\r\n            //        }\r\n            //    } else if (label !== undefined) {\r\n            //        this.marker.unbindLabel();\r\n            //    }\r\n            //});\r\n            this.Name.subscribe((d) => {\r\n                const label = this.marker.getLabel();\r\n                if (label !== undefined) {\r\n                    this.marker.updateLabelContent(d);\r\n                } else {\r\n                    this.marker.bindLabel(d,\r\n                        {\r\n                            direction: \"auto\"\r\n                        } as any);\r\n                }\r\n            });\r\n        }\r\n\r\n        Album = ko.observable(new Album());\r\n        CommentList = ko.observable(new CommentList());\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return false;\r\n        }\r\n\r\n        CreateServerEntity(): ServerModel.Harbour {\r\n            return new ServerModel.Harbour();\r\n        }\r\n\r\n        ServerApi = ServerApi.HarbourApi.GetDefault();\r\n\r\n        Locations = ko.observableArray<Location>();\r\n        Rating = ko.observable<number>();\r\n        Content = ko.observable<string>();\r\n        Website = ko.observable<string>();\r\n    }\r\n\r\n    export class Trip extends Entity<STrip> {\r\n        Name = ko.observable<string>();\r\n        Start = ko.observable<Date>();\r\n        End = ko.observable<Date>();\r\n        Content = ko.observable<string>();\r\n        Tacks = ko.observableArray<Tack>();\r\n\r\n        ServerApi = ServerApi.TripApi.GetDefault();\r\n\r\n        CreateServerEntity(): ServerModel.Trip {\r\n            return new ServerModel.Trip();\r\n        }\r\n    }\r\n\r\n    export class Address extends Entity<SAddress> {\r\n        Street = ko.observable<string>();\r\n        Zip = ko.observable<string>();\r\n        Town = ko.observable<string>();\r\n        Comment = ko.observable<string>();\r\n\r\n        CreateServerEntity(): SAddress {\r\n            return new SAddress;\r\n        }\r\n\r\n        ServerApi = ServerApi.AddressApi.GetDefault();\r\n    }\r\n\r\n    export class Image extends Entity<SImage> {\r\n\r\n        Path = ko.observable<string>();\r\n        Height = ko.observable<number>();\r\n        Width = ko.observable<number>();\r\n\r\n        CreateServerEntity(): ServerModel.Image {\r\n            return new ServerModel.Image();\r\n        }\r\n\r\n        ServerApi = ServerApi.ImageApi.GetDefault();\r\n    }\r\n\r\n    export class Tack extends Entity<STack> {\r\n        StartDate = ko.observable<Date>();\r\n        EndDate = ko.observable<Date>();\r\n        Start = ko.observable<Harbour>();\r\n        End = ko.observable<Harbour>();\r\n        Waypoints = ko.observableArray<ServerModel.WaypointTack>();\r\n        Crew = ko.observableArray<Person>();\r\n        Distance = ko.observable<number>();\r\n\r\n        CreateServerEntity(): ServerModel.Tack {\r\n            return new ServerModel.Tack();\r\n        }\r\n\r\n        ServerApi = ServerApi.TackApi.GetDefault();\r\n\r\n\r\n\r\n        CanRemoveTack = ko.computed({\r\n            read: () => {\r\n                if (mapViewModel.SelectedTrip() === undefined)\r\n                    return false;\r\n                const tacks = mapViewModel.SelectedTrip().Tacks;\r\n                const index = tacks.indexOf(this);\r\n                const prevTack = tacks()[index - 1];\r\n                const nextTack = tacks()[index + 1];\r\n                if (prevTack !== undefined)\r\n                    if (nextTack !== undefined)\r\n                        return prevTack.Start() !== nextTack.Start();\r\n                    else\r\n                        return true;\r\n                else\r\n                    return nextTack !== undefined;\r\n            },\r\n            deferEvaluation: true\r\n        });\r\n\r\n        ComputePlaceholder = ko.computed((): string => {\r\n            if (this.StartDate() !== undefined)\r\n                return moment(this.StartDate()).format(\"L\");\r\n            return \"\";\r\n        });\r\n\r\n    }\r\n\r\n    export class Location extends Entity<SLocation> {\r\n        HarbourId = ko.observable<number>();\r\n        Website = ko.observable<string>();\r\n        Name = ko.observable<string>();\r\n        Rating = ko.observable<number>();\r\n        Address = ko.observable<Address>();\r\n        AddressId = ko.observable<number>();\r\n\r\n        CreateServerEntity(): ServerModel.Location {\r\n            return new ServerModel.Location();\r\n        }\r\n\r\n        ServerApi = ServerApi.LocationApi.GetDefault();\r\n    }\r\n\r\n    export class Restaurant extends Location {\r\n\r\n        CreateServerEntity(): ServerModel.Restaurant {\r\n            return new ServerModel.Restaurant();\r\n        }\r\n\r\n        ServerApi = ServerApi.RestaurantApi.GetDefault();\r\n    }\r\n\r\n\r\n    export class Supermarket extends Location {\r\n\r\n        CreateServerEntity(): ServerModel.Supermarket {\r\n            return new ServerModel.Supermarket();\r\n        }\r\n\r\n        ServerApi = ServerApi.SupermarketApi.GetDefault();\r\n    }\r\n\r\n\r\n    export class WaypointDistance {\r\n        constructor(public Precessor: Waypoint,\r\n            public Waypoint: Waypoint,\r\n            public Distance: number,\r\n            calculaterdWaypoints: Waypoint[],\r\n            calculateRoute: boolean) {\r\n            this.LatLng = Waypoint.LatLng;\r\n            calculaterdWaypoints.push(Waypoint);\r\n            for (let wp of Waypoint.GetConnectedWaypoints()) {\r\n                if (calculaterdWaypoints.indexOf(wp) === -1)\r\n                    this.ConnectedWayPoints.push(wp);\r\n            }\r\n            if (calculateRoute) {\r\n                Waypoint.RoutePrecessor(Precessor);\r\n                Waypoint.RouteDistance(Distance);\r\n            } else {\r\n                Waypoint.Precessor(Precessor);\r\n                Waypoint.Distance(Distance);\r\n            }\r\n        }\r\n\r\n        ConnectedWayPoints = new Array<Waypoint>();\r\n        ConnectedDistances = new Array<WaypointDistance>();\r\n        LatLng: L.LatLng;\r\n    }\r\n\r\n}\r\n\r\ninterface KnockoutObservable<T> extends KnockoutSubscribable<T>, KnockoutObservableFunctions<T> {\r\n    Block: boolean;\r\n}\r\n\r\nenum MarkerType {\r\n    Harbour,\r\n    Dummy,\r\n    Waypoint,\r\n    WeatherStation\r\n}"],"sourceRoot":"/source/"}