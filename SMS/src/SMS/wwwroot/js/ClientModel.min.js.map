{"version":3,"sources":["wwwroot/js/ClientModel.js","/source/wwwroot/js/ClientModel.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","ClientModel","Entity","_this","AlbumId","ko","observable","CommentListId","Album","CreateObservable","ForeignKey","t","InsertDate","Date","UpdateDate","ClientId","clientIdCounter","ServerApi","GetApi","savedStates","Array","SaveState","alreadySavedEntities","savedState","indexOf","push","_i","_a","GetObservableNames","length","prop","val","unwrap","slice","_b","val_1","elem","RevertState","ignoreError","alreadyRevertedEntities","val_2","shift","Id","entityDb","toString","DeleteOnServer","Delete","done","removeFromContext","SaveToServer","undefined","Create","ConvertToServerEntity","data","LoadFromServerEntity","addToContext","Update","LoadNavigationProperties","propName","Context","remove","serverEntity","ProcessOnServer","sVal","sVal_1","obj","entity","cVal","idOnly","isUpdate","arr","_c","UpdateTransferMode","TransferMode","Include","AddTransferMode","CopyTo","out","isWriteableObservable","Block","OnSaving","OnSaved","OnDeleted","_super","apply","arguments","Images","observableArray","mapViewModel","Albums","Person","LastName","FirstName","FullName","computed","Persons","Job","DueTo","AssignedTo","AssignedToId","Title","Content","Done","SuperJob","SuperJobId","Trip","TripId","SubJobs","Jobs","Waypoint","latLng","markerType","Map","call","WaypointNumber","polylines","Latitude","Longitude","Distance","Precessor","RouteDistance","RoutePrecessor","Name","Description","Wifis","LatLng","L","lat","lng","subscribe","value","Redraw","Polylines","Popup","content","popup","removeLayer","marker","bindPopup","Show","highlight","setOpacity","IsDummy","$","_icon","addClass","Hide","removeClass","updatePolylines","setLatLng","i","redrawPolyline","GetConnectedWaypoints","ret","line","Waypoints","waypoint","sort","w1","w2","distanceTo","convertFromDummyHandle","MarkerType","Dummy","splitPolyline","w","wCA","WaypointConnections","Disconnect","Connect","IsInPolyline","polyline","wp","RemoveFromMap","removePolyline","AddToPolyline","DummyHandle","addLatLng","redraw","RemoveFromPolyline","removeFromArray","getLatLngs","RemoveIfHasZeroOrOnePolylines","SetLatLng","CenterOnMap","setView","Harbour","map","Locations","Rating","Website","label","getLabel","updateLabelContent","bindLabel","direction","Harbours","Address","Street","Zip","Town","Comment","Addresses","Image","Path","Height","Width","TackBase","StartDate","EndDate","Start","StartId","EndId","End","CrewList","read","persons","first","list","deferEvaluation","SaillingTime","startDate","endDate","renderTime","sEntity","crew","person","PersonId","TackId","Crew","Tacks","Trips","LogBookEntry","MotorHoursStart","MotorHoursEnd","LogStart","LogEnd","WindSpeed","WindDirection","SpecialOccurences","LogBookEntries","Tack","CanRemoveTack","TripHelper","Editing","tacks","index","prevTack","nextTack","ComputePlaceholder","moment","format","ParentId","Location","HarbourId","AddressId","Restaurant","Supermarket","WaypointDistance","calculaterdWaypoints","calculateRoute","ConnectedWayPoints","ConnectedDistances","Wifi","Password","Speed","Free","ContentPage","ContentPages"],"mappings":"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","file":"wwwroot/js/ClientModel.min.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ClientModel;\n(function (ClientModel) {\n    var Entity = (function () {\n        function Entity() {\n            var _this = this;\n            this.AlbumId = ko.observable();\n            this.CommentListId = ko.observable();\n            this.Album = CreateObservable({\n                ForeignKey: function (t) { return t.AlbumId; }\n            });\n            this.InsertDate = ko.observable(Date);\n            this.UpdateDate = ko.observable(Date);\n            this.ClientId = Entity.clientIdCounter++;\n            this.ServerApi = ServerApi.GetApi(this);\n            this.savedStates = new Array();\n            this.SaveState = function (alreadySavedEntities) {\n                if (alreadySavedEntities === void 0) { alreadySavedEntities = new Array(); }\n                var savedState = new Object();\n                if (alreadySavedEntities.indexOf(_this) !== -1)\n                    return;\n                alreadySavedEntities.push(_this);\n                for (var _i = 0, _a = _this.GetObservableNames(); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    var val = ko.unwrap(_this[prop]);\n                    if (val instanceof Array) {\n                        val = val.slice(0);\n                        for (var _b = 0, val_1 = val; _b < val_1.length; _b++) {\n                            var elem = val_1[_b];\n                            if (elem instanceof Entity)\n                                elem.SaveState(alreadySavedEntities);\n                        }\n                    }\n                    else if (val instanceof Entity)\n                        val.SaveState(alreadySavedEntities);\n                    savedState[prop] = val;\n                }\n                _this.savedStates.push(savedState);\n            };\n            this.RevertState = function (ignoreError, alreadyRevertedEntities) {\n                if (ignoreError === void 0) { ignoreError = false; }\n                if (alreadyRevertedEntities === void 0) { alreadyRevertedEntities = new Array(); }\n                if (alreadyRevertedEntities.indexOf(_this) !== -1)\n                    return;\n                alreadyRevertedEntities.push(_this);\n                if (_this.savedStates.length === 0)\n                    if (ignoreError)\n                        return;\n                    else\n                        throw \"No saved state\";\n                for (var _i = 0, _a = _this.GetObservableNames(); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    var val = _this.savedStates[0][prop];\n                    //this.savedState[prop] = val;\n                    _this[prop](val);\n                    if (val instanceof Entity)\n                        val.RevertState(ignoreError, alreadyRevertedEntities);\n                    else if (val instanceof Array)\n                        for (var _b = 0, val_2 = val; _b < val_2.length; _b++) {\n                            var elem = val_2[_b];\n                            if (elem instanceof Entity)\n                                elem.RevertState(ignoreError, alreadyRevertedEntities);\n                        }\n                }\n                _this.savedStates.shift();\n            };\n            this.Id = ko.observable();\n            Entity.entityDb[this.ClientId.toString()] = this;\n        }\n        Entity.prototype.DeleteOnServer = function () {\n            var _this = this;\n            return this.ServerApi.Delete(this.Id()).done(function () { _this.removeFromContext(); });\n        };\n        ;\n        Entity.prototype.SaveToServer = function () {\n            var _this = this;\n            if (this.Id() === undefined)\n                return this.ServerApi.Create(this.ConvertToServerEntity())\n                    .done(function (data) {\n                    _this.savedStates = [];\n                    _this.LoadFromServerEntity(data);\n                    _this.addToContext();\n                });\n            return this.ServerApi.Update(this.ConvertToServerEntity())\n                .done(function (data) {\n                _this.savedStates = [];\n                _this.LoadFromServerEntity(data);\n            });\n            ;\n        };\n        Entity.prototype.LoadNavigationProperties = function () {\n            for (var propName in this.GetObservableNames()) {\n                var prop = this[propName];\n            }\n        };\n        Entity.prototype.addToContext = function () {\n            if (this.Context().indexOf(this) !== -1)\n                return;\n            this.Context().push(this);\n        };\n        Entity.prototype.removeFromContext = function () {\n            this.Context().remove(this);\n        };\n        Entity.prototype.LoadFromServerEntity = function (serverEntity) {\n            if (serverEntity.ProcessOnServer === false)\n                return this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var sVal = serverEntity[prop];\n                if (sVal !== undefined && sVal !== null) {\n                    if (sVal instanceof Array) {\n                        for (var _b = 0, sVal_1 = sVal; _b < sVal_1.length; _b++) {\n                            var obj = sVal_1[_b];\n                            var entity = Entity.entityDb[obj.ClientId.toString()];\n                            if (entity !== undefined)\n                                entity.LoadFromServerEntity(obj);\n                        }\n                    }\n                    else {\n                        var cVal = this[prop]();\n                        if (cVal instanceof Entity)\n                            cVal.LoadFromServerEntity(sVal);\n                        else\n                            this[prop](sVal);\n                    }\n                }\n            }\n            return this;\n        };\n        Entity.prototype.ConvertToServerEntity = function (idOnly) {\n            if (idOnly === void 0) { idOnly = false; }\n            if (idOnly) {\n                return { Id: this.Id(), ProcessOnServer: false };\n            }\n            var isUpdate = this.Id() !== undefined;\n            var serverEntity = { ClientId: this.ClientId };\n            var entity = this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var propName = _a[_i];\n                var prop = entity[propName];\n                var val = prop();\n                if (val !== undefined) {\n                    if (val instanceof Array) {\n                        var arr = new Array();\n                        for (var _b = 0, _c = val; _b < _c.length; _b++) {\n                            var elem = _c[_b];\n                            if (elem.Id() === undefined ||\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include)\n                                arr.push(elem.ConvertToServerEntity());\n                        }\n                        serverEntity[propName] = arr;\n                    }\n                    else\n                        serverEntity[propName] = val instanceof Entity\n                            ? (val.Id() === undefined ||\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include\n                                ? val.ConvertToServerEntity()\n                                : undefined)\n                            : val;\n                }\n            }\n            return serverEntity;\n        };\n        Entity.prototype.CopyTo = function (entity) {\n            entity.Id(this.Id());\n        };\n        Entity.prototype.GetObservableNames = function () {\n            var out = new Array();\n            var entity = this;\n            for (var prop in entity)\n                if (entity.hasOwnProperty(prop))\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\n                        out.push(prop);\n            return out;\n        };\n        Entity.prototype.OnSaving = function () {\n            return true;\n        };\n        Entity.prototype.OnSaved = function () {\n            return true;\n        };\n        Entity.prototype.OnDeleted = function () {\n            return true;\n        };\n        Entity.clientIdCounter = 0;\n        Entity.entityDb = {};\n        return Entity;\n    }());\n    ClientModel.Entity = Entity;\n    var Album = (function (_super) {\n        __extends(Album, _super);\n        function Album() {\n            _super.apply(this, arguments);\n            this.Images = ko.observableArray();\n        }\n        Album.prototype.Context = function () {\n            return mapViewModel.Albums;\n        };\n        return Album;\n    }(Entity));\n    ClientModel.Album = Album;\n    var Person = (function (_super) {\n        __extends(Person, _super);\n        function Person() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.LastName = ko.observable();\n            this.FirstName = ko.observable();\n            this.FullName = ko.computed(function () { return _this.FirstName() + \" \" + _this.LastName(); });\n        }\n        Person.prototype.Context = function () {\n            return mapViewModel.Persons;\n        };\n        return Person;\n    }(Entity));\n    ClientModel.Person = Person;\n    var Job = (function (_super) {\n        __extends(Job, _super);\n        function Job() {\n            _super.apply(this, arguments);\n            this.DueTo = ko.observable(Date);\n            this.AssignedTo = ko.observable();\n            this.AssignedToId = ko.observable();\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n            this.Done = ko.observable();\n            this.SuperJob = ko.observable();\n            this.SuperJobId = ko.observable();\n            this.Trip = ko.observable();\n            this.TripId = ko.observable();\n            this.SubJobs = ko.observableArray();\n        }\n        Job.prototype.Context = function () {\n            return mapViewModel.Jobs;\n        };\n        return Job;\n    }(Entity));\n    ClientModel.Job = Job;\n    var Waypoint = (function (_super) {\n        __extends(Waypoint, _super);\n        function Waypoint(latLng, markerType, Map) {\n            var _this = this;\n            _super.call(this);\n            this.Map = Map;\n            this.WaypointNumber = ko.observable();\n            this.polylines = new Array();\n            this.Latitude = ko.observable(0);\n            this.Longitude = ko.observable(0);\n            this.Distance = ko.observable();\n            this.Precessor = ko.observable();\n            this.RouteDistance = ko.observable();\n            this.RoutePrecessor = ko.observable();\n            this.Name = ko.observable();\n            this.Description = ko.observable();\n            this.Wifis = ko.observableArray();\n            if (Map === undefined) {\n                if (typeof markerType == \"number\") {\n                    Map = latLng;\n                    latLng = markerType;\n                    markerType = Map;\n                }\n                this.Map = (markerType);\n                this.LatLng = new L.LatLng(0, 0);\n                markerType = latLng;\n            }\n            else {\n                this.Latitude(latLng.lat);\n                this.Longitude(latLng.lng);\n            }\n            this.LatLng = new L.LatLng(this.Latitude(), this.Longitude());\n            this.Latitude.subscribe(function (value) {\n                if (_this.LatLng.lat !== value) {\n                    _this.LatLng.lat = value;\n                    _this.Redraw();\n                }\n            });\n            this.Longitude.subscribe(function (value) {\n                if (_this.LatLng.lng !== value) {\n                    _this.LatLng.lng = value;\n                    _this.Redraw();\n                }\n            });\n            this.markerType = markerType;\n            this.LatLng.Polylines = new Array();\n            this.LatLng.Waypoint = this;\n            //this.Latitude.subscribe((value) => {\n            //    if (this.LatLng.lat !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            //this.Longitude.subscribe((value) => {\n            //    if (this.LatLng.lng !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            this.Precessor.Block = true;\n            this.Distance.Block = true;\n        }\n        Waypoint.prototype.Popup = function (content) {\n            if (this.popup !== undefined) {\n                this.Map.removeLayer(this.popup);\n                this.popup = undefined;\n            }\n            if (content !== undefined) {\n                //this.popup = L.popup();\n                this.marker.bindPopup(content); //.openPopup();\n            }\n        };\n        Waypoint.prototype.Show = function (highlight) {\n            if (highlight === void 0) { highlight = false; }\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\n            if (highlight)\n                $(this.marker._icon).addClass(\"expose\");\n        };\n        Waypoint.prototype.Hide = function () {\n            this.marker.setOpacity(0.1);\n            $(this.marker._icon).removeClass(\"expose\");\n        };\n        Waypoint.prototype.Redraw = function (updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            if (this.marker !== undefined)\n                this.marker.setLatLng(this.LatLng);\n            if (updatePolylines)\n                for (var i = 0; i < this.polylines.length; i++)\n                    redrawPolyline(this.polylines[i]);\n        };\n        Waypoint.prototype.GetConnectedWaypoints = function () {\n            var _this = this;\n            var ret = new Array();\n            for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                var line = _a[_i];\n                for (var _b = 0, _c = line.Waypoints; _b < _c.length; _b++) {\n                    var waypoint = _c[_b];\n                    if (waypoint !== this)\n                        ret.push(waypoint);\n                }\n            }\n            return ret.sort(function (w1, w2) {\n                return w1.LatLng.distanceTo(_this.LatLng) - w2.LatLng.distanceTo(_this.LatLng);\n            });\n        };\n        Waypoint.prototype.convertFromDummyHandle = function () {\n            if (this.markerType !== MarkerType.Dummy)\n                return;\n            this.marker.setOpacity(1);\n            var w1 = this.polylines[0].Waypoints[0];\n            var w2 = this.polylines[0].Waypoints[1];\n            this.markerType = MarkerType.Waypoint;\n            splitPolyline(this.polylines[0]);\n            this.SaveToServer()\n                .done(function (w) {\n                var wCA = ServerApi.WaypointConnections;\n                wCA.Disconnect(w1.Id(), w2.Id());\n                wCA.Connect(w1.Id(), w.Id);\n                wCA.Connect(w2.Id(), w.Id);\n            });\n        };\n        Waypoint.prototype.IsInPolyline = function (polyline) {\n            for (var _i = 0, _a = polyline.Waypoints; _i < _a.length; _i++) {\n                var wp = _a[_i];\n                if (this === wp)\n                    return true;\n            }\n            return false;\n        };\n        Waypoint.prototype.RemoveFromMap = function () {\n            if (this.markerType !== MarkerType.Dummy)\n                for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                    var polyline = _a[_i];\n                    removePolyline(polyline);\n                }\n            this.Map.removeLayer(this.marker);\n        };\n        Waypoint.prototype.AddToPolyline = function (polyline) {\n            if (this.IsInPolyline(polyline))\n                return false;\n            if (!this.IsDummy() && polyline.DummyHandle !== this) {\n                polyline.Waypoints.push(this);\n                polyline.addLatLng(this.LatLng);\n                polyline.redraw();\n            }\n            if (this.polylines[0] !== polyline) {\n                this.LatLng.Polylines.push(polyline);\n                this.polylines.push(polyline);\n            }\n            //ServerApi.WaypointConnectionApi.GetDefault().\n            return true;\n        };\n        Waypoint.prototype.RemoveFromPolyline = function (polyline) {\n            //if (!this.IsInPolyline(polyline))\n            //    return false;\n            removeFromArray(polyline.Waypoints, this);\n            removeFromArray(this.polylines, polyline);\n            removeFromArray(this.LatLng.Polylines, polyline);\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\n            polyline.redraw();\n            return true;\n        };\n        Waypoint.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return true;\n        };\n        Waypoint.prototype.SetLatLng = function (latLng, updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            this.LatLng.lat = latLng.lat;\n            this.LatLng.lng = latLng.lng;\n            this.Latitude(latLng.lat);\n            this.Longitude(latLng.lng);\n            this.Redraw(updatePolylines);\n        };\n        Waypoint.prototype.CenterOnMap = function () {\n            this.Map.setView(this.LatLng);\n        };\n        Waypoint.prototype.IsDummy = function () {\n            return this.markerType === MarkerType.Dummy;\n        };\n        Waypoint.prototype.Context = function () {\n            return mapViewModel.Waypoints;\n        };\n        Waypoint.prototype.DeleteOnServer = function () {\n            var _this = this;\n            return _super.prototype.DeleteOnServer.call(this).done(function () { return _this.RemoveFromMap(); });\n        };\n        return Waypoint;\n    }(Entity));\n    ClientModel.Waypoint = Waypoint;\n    var Harbour = (function (_super) {\n        __extends(Harbour, _super);\n        function Harbour(latLng, map) {\n            var _this = this;\n            _super.call(this, latLng, MarkerType.Harbour, map);\n            this.Album = ko.observable(new Album());\n            this.Locations = ko.observableArray();\n            this.Rating = ko.observable();\n            this.Content = ko.observable();\n            this.Website = ko.observable();\n            //if (map)\n            //this.Distance.subscribe((d) => {\n            //    const label = this.marker.getLabel();\n            //    if (d > 0) {\n            //        if (label !== undefined) {\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\n            //        } else {\n            //            this.marker.bindLabel(d.toString() + \" km\",\n            //                <any>{\n            //                    direction: \"auto\"\n            //                });\n            //        }\n            //    } else if (label !== undefined) {\n            //        this.marker.unbindLabel();\n            //    }\n            //});\n            this.Name.subscribe(function (d) {\n                if (_this.marker !== undefined) {\n                    var label = _this.marker.getLabel();\n                    if (label !== undefined) {\n                        _this.marker.updateLabelContent(d);\n                    }\n                    else {\n                        _this.marker.bindLabel(d, {\n                            direction: \"auto\"\n                        });\n                    }\n                }\n            });\n        }\n        Harbour.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return false;\n        };\n        Harbour.prototype.Context = function () {\n            return mapViewModel.Harbours;\n        };\n        return Harbour;\n    }(Waypoint));\n    ClientModel.Harbour = Harbour;\n    var Address = (function (_super) {\n        __extends(Address, _super);\n        function Address() {\n            _super.apply(this, arguments);\n            this.Street = ko.observable();\n            this.Zip = ko.observable();\n            this.Town = ko.observable();\n            this.Comment = ko.observable();\n        }\n        Address.prototype.Context = function () {\n            return mapViewModel.Addresses;\n        };\n        return Address;\n    }(Entity));\n    ClientModel.Address = Address;\n    var Image = (function (_super) {\n        __extends(Image, _super);\n        function Image() {\n            _super.apply(this, arguments);\n            this.Path = ko.observable();\n            this.Height = ko.observable();\n            this.Width = ko.observable();\n        }\n        Image.prototype.Context = function () {\n            return mapViewModel.Images;\n        };\n        return Image;\n    }(Entity));\n    ClientModel.Image = Image;\n    var TackBase = (function (_super) {\n        __extends(TackBase, _super);\n        function TackBase() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.StartDate = ko.observable();\n            this.EndDate = ko.observable();\n            this.Start = ko.observable();\n            this.StartId = ko.observable();\n            this.EndId = ko.observable();\n            this.End = ko.observable();\n            this.Persons = ko.observableArray();\n            this.Distance = ko.observable(0);\n            this.Album = ko.observable(new Album());\n            this.CrewList = ko.computed({\n                read: function () {\n                    var persons = _this.Persons();\n                    var first = persons[0];\n                    if (first === undefined)\n                        return \"\";\n                    if (persons.length === 1)\n                        return first.FullName();\n                    else {\n                        var list = first.FullName();\n                        for (var i = 1; i < persons.length; i++) {\n                            list += \", \" + persons[i].FullName();\n                        }\n                        return list;\n                    }\n                },\n                deferEvaluation: true\n            });\n            this.SaillingTime = ko.computed(function () {\n                var startDate = _this.StartDate();\n                var endDate = _this.EndDate();\n                if (startDate === undefined || endDate === undefined || renderTime === undefined)\n                    return \"\";\n                return renderTime(new Date(startDate), new Date(endDate));\n            });\n        }\n        TackBase.prototype.ConvertToServerEntity = function (idOnly) {\n            this.EndId(this.End().Id());\n            this.StartId(this.Start().Id());\n            var sEntity = _super.prototype.ConvertToServerEntity.call(this, idOnly);\n            var crew = new Array();\n            for (var _i = 0, _a = this.Persons(); _i < _a.length; _i++) {\n                var person = _a[_i];\n                crew.push({ PersonId: person.Id(), TackId: this.Id() });\n            }\n            sEntity.Crew = crew;\n            return sEntity;\n        };\n        return TackBase;\n    }(Entity));\n    ClientModel.TackBase = TackBase;\n    var Trip = (function (_super) {\n        __extends(Trip, _super);\n        function Trip() {\n            _super.apply(this, arguments);\n            this.Name = ko.observable();\n            this.Content = ko.observable();\n            this.Tacks = ko.observableArray();\n            this.IsDummy = ko.observable();\n        }\n        Trip.prototype.Context = function () {\n            return mapViewModel.Trips;\n        };\n        return Trip;\n    }(TackBase));\n    ClientModel.Trip = Trip;\n    var LogBookEntry = (function (_super) {\n        __extends(LogBookEntry, _super);\n        function LogBookEntry() {\n            _super.apply(this, arguments);\n            this.MotorHoursStart = ko.observable();\n            this.MotorHoursEnd = ko.observable();\n            this.LogStart = ko.observable();\n            this.LogEnd = ko.observable();\n            this.WindSpeed = ko.observable();\n            this.WindDirection = ko.observable();\n            this.SpecialOccurences = ko.observable();\n        }\n        LogBookEntry.prototype.Context = function () {\n            return mapViewModel.LogBookEntries;\n        };\n        return LogBookEntry;\n    }(TackBase));\n    ClientModel.LogBookEntry = LogBookEntry;\n    var Tack = (function (_super) {\n        __extends(Tack, _super);\n        function Tack() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.Waypoints = ko.observableArray();\n            this.CanRemoveTack = ko.computed({\n                read: function () {\n                    if (mapViewModel.TripHelper.Editing() === undefined)\n                        return false;\n                    var tacks = mapViewModel.TripHelper.Editing().Tacks;\n                    var index = tacks.indexOf(_this);\n                    var prevTack = tacks()[index - 1];\n                    var nextTack = tacks()[index + 1];\n                    if (prevTack !== undefined)\n                        if (nextTack !== undefined)\n                            return prevTack.Start() !== nextTack.Start();\n                        else\n                            return true;\n                    else\n                        return nextTack !== undefined;\n                },\n                deferEvaluation: true\n            });\n            this.ComputePlaceholder = ko.computed(function () {\n                if (_this.StartDate() !== undefined)\n                    return moment(_this.StartDate()).format(\"L\");\n                return \"\";\n            });\n        }\n        Tack.prototype.Context = function () {\n            return mapViewModel.Tacks;\n        };\n        return Tack;\n    }(TackBase));\n    ClientModel.Tack = Tack;\n    var Comment = (function (_super) {\n        __extends(Comment, _super);\n        function Comment() {\n            _super.apply(this, arguments);\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n            this.Rating = ko.observable();\n            this.ParentId = ko.observable();\n        }\n        Comment.prototype.Context = function () {\n            throw \"not implemented\";\n        };\n        return Comment;\n    }(Entity));\n    ClientModel.Comment = Comment;\n    var Location = (function (_super) {\n        __extends(Location, _super);\n        function Location() {\n            _super.apply(this, arguments);\n            this.HarbourId = ko.observable();\n            this.Website = ko.observable();\n            this.Name = ko.observable();\n            this.Rating = ko.observable();\n            this.Address = ko.observable();\n            this.AddressId = ko.observable();\n        }\n        Location.prototype.Context = function () {\n            return mapViewModel.Locations;\n        };\n        return Location;\n    }(Entity));\n    ClientModel.Location = Location;\n    var Restaurant = (function (_super) {\n        __extends(Restaurant, _super);\n        function Restaurant() {\n            _super.apply(this, arguments);\n        }\n        return Restaurant;\n    }(Location));\n    ClientModel.Restaurant = Restaurant;\n    var Supermarket = (function (_super) {\n        __extends(Supermarket, _super);\n        function Supermarket() {\n            _super.apply(this, arguments);\n        }\n        return Supermarket;\n    }(Location));\n    ClientModel.Supermarket = Supermarket;\n    var WaypointDistance = (function () {\n        function WaypointDistance(Precessor, Waypoint, Distance, calculaterdWaypoints, calculateRoute) {\n            this.Precessor = Precessor;\n            this.Waypoint = Waypoint;\n            this.Distance = Distance;\n            this.ConnectedWayPoints = new Array();\n            this.ConnectedDistances = new Array();\n            this.LatLng = Waypoint.LatLng;\n            calculaterdWaypoints.push(Waypoint);\n            for (var _i = 0, _a = Waypoint.GetConnectedWaypoints(); _i < _a.length; _i++) {\n                var wp = _a[_i];\n                if (calculaterdWaypoints.indexOf(wp) === -1)\n                    this.ConnectedWayPoints.push(wp);\n            }\n            if (calculateRoute) {\n                Waypoint.RoutePrecessor(Precessor);\n                Waypoint.RouteDistance(Distance);\n            }\n            else {\n                Waypoint.Precessor(Precessor);\n                Waypoint.Distance(Distance);\n            }\n        }\n        return WaypointDistance;\n    }());\n    ClientModel.WaypointDistance = WaypointDistance;\n    var Wifi = (function (_super) {\n        __extends(Wifi, _super);\n        function Wifi() {\n            _super.apply(this, arguments);\n            this.Name = ko.observable();\n            this.Password = ko.observable();\n            this.Speed = ko.observable();\n            this.Free = ko.observable();\n            this.HarbourId = ko.observable();\n            this.Harbour = ko.observable();\n        }\n        Wifi.prototype.Context = function () {\n            return mapViewModel.Wifis;\n        };\n        return Wifi;\n    }(Entity));\n    ClientModel.Wifi = Wifi;\n    var ContentPage = (function (_super) {\n        __extends(ContentPage, _super);\n        function ContentPage() {\n            _super.apply(this, arguments);\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n        }\n        ContentPage.prototype.Context = function () {\n            return mapViewModel.ContentPages;\n        };\n        return ContentPage;\n    }(Entity));\n    ClientModel.ContentPage = ContentPage;\n})(ClientModel || (ClientModel = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[MarkerType[\"Harbour\"] = 0] = \"Harbour\";\n    MarkerType[MarkerType[\"Dummy\"] = 1] = \"Dummy\";\n    MarkerType[MarkerType[\"Waypoint\"] = 2] = \"Waypoint\";\n    MarkerType[MarkerType[\"WeatherStation\"] = 3] = \"WeatherStation\";\n})(MarkerType || (MarkerType = {}));\n\n","module ClientModel {\r\n\r\n    import SEntity = ServerModel.Entity\r\n\r\n    export interface IEntity {\r\n        Id: KnockoutObservable<number>;\r\n        ClientId: number;\r\n    }\r\n\r\n    export abstract class Entity implements IEntity {\r\n        constructor() {\r\n            Entity.entityDb[this.ClientId.toString()] = this;\r\n        }\r\n\r\n        AlbumId = ko.observable<number>();\r\n        CommentListId = ko.observable<number>();\r\n        Album = CreateObservable<Album>({\r\n            ForeignKey: (t: this) => t.AlbumId\r\n        });\r\n        InsertDate = ko.observable<number>(Date as any);\r\n        UpdateDate = ko.observable<number>(Date as any);\r\n\r\n        private static clientIdCounter = 0;\r\n        private static entityDb = {};\r\n\r\n        ClientId = Entity.clientIdCounter++;\r\n\r\n        protected ServerApi = ServerApi.GetApi(this);\r\n\r\n        DeleteOnServer(): JQueryPromise<SEntity> {\r\n            return this.ServerApi.Delete(this.Id()).done(() => { this.removeFromContext(); });\r\n        };\r\n\r\n        SaveToServer(): JQueryPromise<SEntity> {\r\n            if (this.Id() === undefined)\r\n                return this.ServerApi.Create(this.ConvertToServerEntity())\r\n                    .done(data => {\r\n                        this.savedStates=[];\r\n                        this.LoadFromServerEntity(data);\r\n                        this.addToContext();\r\n                    });\r\n            return this.ServerApi.Update(this.ConvertToServerEntity())\r\n                .done((data) => {\r\n                    this.savedStates=[];\r\n                    this.LoadFromServerEntity(data);\r\n                });;\r\n        }\r\n\r\n        private LoadNavigationProperties(): void {\r\n            for (let propName in this.GetObservableNames()) {\r\n                const prop = <KnockoutObservable<any>>this[propName];\r\n                //if (prop.)\r\n            }\r\n        }\r\n\r\n        private addToContext() {\r\n            if (this.Context().indexOf(this) !== -1)\r\n                return;\r\n            this.Context().push(this);\r\n        }\r\n\r\n        private removeFromContext() {\r\n            this.Context().remove(this);\r\n        }\r\n        \r\n        LoadFromServerEntity(serverEntity: SEntity): this {\r\n            if (serverEntity.ProcessOnServer === false)\r\n                return this;\r\n            for (let prop of this.GetObservableNames()) {\r\n                const sVal = serverEntity[prop];\r\n                if (sVal !== undefined && sVal !== null) {\r\n                    if (sVal instanceof Array) {\r\n                        for (let obj of sVal) {\r\n                            const entity = Entity.entityDb[obj.ClientId.toString()];\r\n                            if (entity !== undefined)\r\n                                entity.LoadFromServerEntity(obj);\r\n                        }\r\n                    } else {\r\n                        const cVal = this[prop]();\r\n                        if (cVal instanceof Entity)\r\n                            cVal.LoadFromServerEntity(sVal);\r\n                        else\r\n                            this[prop](sVal);\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        ConvertToServerEntity(idOnly: boolean = false): SEntity {\r\n            if (idOnly) {\r\n                return { Id: this.Id(), ProcessOnServer: false };\r\n            }\r\n            const isUpdate = this.Id() !== undefined;\r\n            const serverEntity = { ClientId: this.ClientId };\r\n            const entity = this;\r\n            for (let propName of this.GetObservableNames()) {\r\n                const prop = entity[propName];\r\n                const val = prop();\r\n                if (val !== undefined) {\r\n                    if (val instanceof Array) {\r\n                        const arr = new Array();\r\n                        for (let elem of val as Entity[]) {\r\n                            if (elem.Id() === undefined ||\r\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\r\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include)\r\n                                arr.push(elem.ConvertToServerEntity());\r\n                        }\r\n                        serverEntity[propName] = arr;\r\n                    } else\r\n                        serverEntity[propName] = val instanceof Entity\r\n                            ? (val.Id() === undefined ||\r\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\r\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include\r\n                                ? val.ConvertToServerEntity()\r\n                                : undefined)\r\n                            : val;\r\n                }\r\n            }\r\n            return serverEntity as any;\r\n        }\r\n\r\n        CopyTo(entity: this) {\r\n            entity.Id(this.Id());\r\n        }\r\n\r\n        private savedStates=new Array();\r\n\r\n        SaveState= (alreadySavedEntities = new Array<Entity>()) => {\r\n            const savedState = new Object();\r\n            if (alreadySavedEntities.indexOf(this) !== -1)\r\n                return;\r\n            alreadySavedEntities.push(this);\r\n            for (let prop of this.GetObservableNames()) {\r\n                let val = ko.unwrap(this[prop]);\r\n                if (val instanceof Array) {\r\n                    val = val.slice(0);\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.SaveState(alreadySavedEntities);\r\n                    }\r\n                } else if (val instanceof Entity)\r\n                    val.SaveState(alreadySavedEntities);\r\n                savedState[prop] = val;\r\n            }\r\n            this.savedStates.push(savedState);\r\n        }\r\n\r\n        protected GetObservableNames(): string[] {\r\n            const out = new Array<string>();\r\n            const entity = this;\r\n            for (let prop in entity)\r\n                if (entity.hasOwnProperty(prop))\r\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\r\n                        out.push(prop);\r\n            return out;\r\n        }\r\n\r\n        RevertState = (ignoreError: boolean = false, alreadyRevertedEntities = new Array<Entity>()) => {\r\n            if (alreadyRevertedEntities.indexOf(this) !== -1)\r\n                return;\r\n            alreadyRevertedEntities.push(this);\r\n            if (this.savedStates.length=== 0)\r\n                if (ignoreError)\r\n                    return;\r\n                else\r\n                    throw \"No saved state\";\r\n            for (let prop of this.GetObservableNames()) {\r\n                const val = this.savedStates[0][prop];\r\n                //this.savedState[prop] = val;\r\n                this[prop](val);\r\n                if (val instanceof Entity)\r\n                    val.RevertState(ignoreError, alreadyRevertedEntities);\r\n                else if (val instanceof Array)\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.RevertState(ignoreError, alreadyRevertedEntities);\r\n                    }\r\n            }\r\n            this.savedStates.shift();\r\n        }\r\n\r\n        OnSaving(): boolean {\r\n            return true;\r\n        }\r\n\r\n        OnSaved(): boolean {\r\n            return true;\r\n        }\r\n\r\n        OnDeleted(): boolean {\r\n            return true;\r\n        }\r\n\r\n        Id = ko.observable<number>();\r\n\r\n        abstract Context(): KnockoutObservableArray<this>;\r\n    }\r\n\r\n    export class Album extends Entity {\r\n        Images = ko.observableArray<Image>();\r\n\r\n        Context() {\r\n            return mapViewModel.Albums as any;\r\n        }\r\n    }\r\n\r\n    export class Person extends Entity {\r\n        LastName = ko.observable<string>();\r\n        FirstName = ko.observable<string>();\r\n        FullName = ko.computed(() => this.FirstName() + \" \" + this.LastName());\r\n\r\n        Context() {\r\n            return mapViewModel.Persons as any;\r\n        }\r\n\r\n    }\r\n\r\n    export class Job extends Entity {\r\n        DueTo = ko.observable<Date>(Date as any);\r\n        AssignedTo = ko.observable<Person>();\r\n        AssignedToId = ko.observable<number>();\r\n        Title = ko.observable<String>();\r\n        Content = ko.observable<String>();\r\n        Done = ko.observable<boolean>();\r\n        SuperJob = ko.observable<Job>();\r\n        SuperJobId = ko.observable<number>();\r\n        Trip = ko.observable<Trip>();\r\n        TripId = ko.observable<number>();\r\n        SubJobs = ko.observableArray<Job>();\r\n\r\n        Context() {\r\n            return mapViewModel.Jobs as any;\r\n        }\r\n    }\r\n\r\n    export class Waypoint extends Entity {\r\n        constructor(latLng: L.LatLng, markerType: MarkerType, map: L.mapbox.Map);\r\n        constructor(markerType: MarkerType, map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng | MarkerType,\r\n            markerType: MarkerType | L.mapbox.Map,\r\n            protected Map?: L.mapbox.\r\n            Map) {\r\n            super();\r\n            if (Map === undefined) {\r\n                if (typeof markerType == \"number\") {\r\n                    Map = ((latLng as any) as L.mapbox.Map);\r\n                    latLng = (markerType as MarkerType);\r\n                    markerType = Map;\r\n                }\r\n                this.Map = ((markerType) as L.mapbox.Map);\r\n                this.LatLng = new L.LatLng(0, 0);\r\n                markerType = (latLng as MarkerType);\r\n            } else {\r\n                this.Latitude((latLng as L.LatLng).lat);\r\n                this.Longitude((latLng as L.LatLng).lng);\r\n            }\r\n            this.LatLng = new L.LatLng(this.Latitude(), this.Longitude());\r\n            this.Latitude.subscribe((value) => {\r\n                if (this.LatLng.lat !== value) {\r\n                    this.LatLng.lat = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.Longitude.subscribe((value) => {\r\n                if (this.LatLng.lng !== value) {\r\n                    this.LatLng.lng = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.markerType = markerType;\r\n            this.LatLng.Polylines = new Array();\r\n            this.LatLng.Waypoint = this;\r\n            //this.Latitude.subscribe((value) => {\r\n            //    if (this.LatLng.lat !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            //this.Longitude.subscribe((value) => {\r\n            //    if (this.LatLng.lng !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            this.Precessor.Block = true;\r\n            this.Distance.Block = true;\r\n        }\r\n\r\n        Popup(content: string);\r\n        Popup();\r\n        Popup(content?: string) {\r\n            if (this.popup !== undefined) {\r\n                this.Map.removeLayer(this.popup);\r\n                this.popup = undefined;\r\n            }\r\n            if (content !== undefined) {\r\n                //this.popup = L.popup();\r\n                this.marker.bindPopup(content); //.openPopup();\r\n\r\n\r\n            }\r\n        }\r\n\r\n\r\n        Show(highlight: boolean = false): void {\r\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\r\n            if (highlight)\r\n                $(this.marker._icon).addClass(\"expose\");\r\n        }\r\n\r\n        Hide(): void {\r\n            this.marker.setOpacity(0.1);\r\n            $(this.marker._icon).removeClass(\"expose\");\r\n        }\r\n\r\n        Redraw(updatePolylines = true): void {\r\n            if (this.marker !== undefined)\r\n                this.marker.setLatLng(this.LatLng);\r\n            if (updatePolylines)\r\n                for (let i = 0; i < this.polylines.length; i++)\r\n                    redrawPolyline(this.polylines[i]);\r\n        }\r\n\r\n        GetConnectedWaypoints(): Waypoint[] {\r\n            const ret = new Array<Waypoint>();\r\n            for (let line of this.polylines) {\r\n                for (let waypoint of line.Waypoints) {\r\n                    if (waypoint !== this)\r\n                        ret.push(waypoint);\r\n                }\r\n            }\r\n            return ret.sort((w1, w2) => {\r\n                return w1.LatLng.distanceTo(this.LatLng) - w2.LatLng.distanceTo(this.LatLng);\r\n            });\r\n        }\r\n\r\n        convertFromDummyHandle() {\r\n            if (this.markerType !== MarkerType.Dummy)\r\n                return;\r\n            this.marker.setOpacity(1);\r\n            var w1 = this.polylines[0].Waypoints[0];\r\n            var w2 = this.polylines[0].Waypoints[1];\r\n            this.markerType = MarkerType.Waypoint;\r\n            splitPolyline(this.polylines[0]);\r\n            this.SaveToServer()\r\n                .done((w) => {\r\n                    const wCA = ServerApi.WaypointConnections;\r\n                    wCA.Disconnect(w1.Id(), w2.Id());\r\n                    wCA.Connect(w1.Id(), w.Id);\r\n                    wCA.Connect(w2.Id(), w.Id);\r\n                });\r\n        }\r\n\r\n        IsInPolyline(polyline: L.Polyline): boolean {\r\n            for (const wp of polyline.Waypoints) {\r\n                if (this === wp)\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        RemoveFromMap() {\r\n            if (this.markerType !== MarkerType.Dummy)\r\n                for (let polyline of this.polylines)\r\n                    removePolyline(polyline);\r\n            this.Map.removeLayer(this.marker);\r\n        }\r\n\r\n        AddToPolyline(polyline: L.Polyline): boolean {\r\n            if (this.IsInPolyline(polyline))\r\n                return false;\r\n            if (!this.IsDummy() && polyline.DummyHandle !== this) {\r\n                polyline.Waypoints.push(this);\r\n                polyline.addLatLng(this.LatLng);\r\n                polyline.redraw();\r\n            }\r\n            if (this.polylines[0] !== polyline) {\r\n                this.LatLng.Polylines.push(polyline);\r\n                this.polylines.push(polyline);\r\n            }\r\n            //ServerApi.WaypointConnectionApi.GetDefault().\r\n            return true;\r\n        }\r\n\r\n        RemoveFromPolyline(polyline: L.Polyline): boolean {\r\n            //if (!this.IsInPolyline(polyline))\r\n            //    return false;\r\n            removeFromArray(polyline.Waypoints, this);\r\n            removeFromArray(this.polylines, polyline);\r\n            removeFromArray(this.LatLng.Polylines, polyline);\r\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\r\n            polyline.redraw();\r\n            return true;\r\n        }\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return true;\r\n        }\r\n\r\n        WaypointNumber = ko.observable<number>();\r\n        private polylines = new Array<L.Polyline>();\r\n\r\n\r\n        SetLatLng(latLng: L.LatLng, updatePolylines = true): void {\r\n            this.LatLng.lat = latLng.lat;\r\n            this.LatLng.lng = latLng.lng;\r\n            this.Latitude(latLng.lat);\r\n            this.Longitude(latLng.lng);\r\n            this.Redraw(updatePolylines);\r\n        }\r\n\r\n        CenterOnMap() {\r\n            this.Map.setView(this.LatLng);\r\n        }\r\n\r\n        IsDummy(): boolean {\r\n            return this.markerType === MarkerType.Dummy;\r\n        }\r\n\r\n        Latitude = ko.observable<number>(0);\r\n        Longitude = ko.observable<number>(0);\r\n        Distance = ko.observable<number>();\r\n        Precessor = ko.observable<Waypoint>();\r\n        RouteDistance = ko.observable<number>();\r\n        RoutePrecessor = ko.observable<Waypoint>();\r\n        protected popup: L.Popup;\r\n        LatLng: L.LatLng;\r\n        protected markerType: MarkerType | L.mapbox.Map;\r\n        marker: L.Marker;\r\n\r\n        Name = ko.observable<string>();\r\n        Description = ko.observable<string>();\r\n        Wifis = ko.observableArray<Wifi>();\r\n\r\n        Context() {\r\n            return mapViewModel.Waypoints as any;\r\n        }\r\n\r\n        DeleteOnServer(): JQueryPromise<Object> {\r\n            return super.DeleteOnServer().done(() => this.RemoveFromMap());\r\n        }\r\n    }\r\n\r\n    export class Harbour extends Waypoint {\r\n\r\n        constructor(map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng, map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng | L.mapbox.Map, map?: L.mapbox.Map) {\r\n            super(latLng as L.LatLng, MarkerType.Harbour, map);\r\n            //if (map)\r\n            //this.Distance.subscribe((d) => {\r\n            //    const label = this.marker.getLabel();\r\n            //    if (d > 0) {\r\n            //        if (label !== undefined) {\r\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\r\n            //        } else {\r\n            //            this.marker.bindLabel(d.toString() + \" km\",\r\n            //                <any>{\r\n            //                    direction: \"auto\"\r\n            //                });\r\n            //        }\r\n            //    } else if (label !== undefined) {\r\n            //        this.marker.unbindLabel();\r\n            //    }\r\n            //});\r\n            this.Name.subscribe((d) => {\r\n                if (this.marker !== undefined) {\r\n                    const label = this.marker.getLabel();\r\n                    if (label !== undefined) {\r\n                        this.marker.updateLabelContent(d);\r\n                    } else {\r\n                        this.marker.bindLabel(d,\r\n                        {\r\n                            direction: \"auto\"\r\n                        } as any);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        Album = ko.observable(new Album());\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return false;\r\n        }\r\n\r\n        Locations = ko.observableArray<Location>();\r\n        Rating = ko.observable<number>();\r\n        Content = ko.observable<string>();\r\n        Website = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.Harbours as any;\r\n        }\r\n    }\r\n\r\n    export class Address extends Entity {\r\n        Street = ko.observable<string>();\r\n        Zip = ko.observable<string>();\r\n        Town = ko.observable<string>();\r\n        Comment = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.Addresses as any;\r\n        }\r\n    }\r\n\r\n    export class Image extends Entity {\r\n\r\n        Path = ko.observable<string>();\r\n        Height = ko.observable<number>();\r\n        Width = ko.observable<number>();\r\n\r\n        Context() {\r\n            return mapViewModel.Images as any;\r\n        }\r\n    }\r\n\r\n    export abstract class TackBase extends Entity {\r\n        StartDate = ko.observable<string>();\r\n        EndDate = ko.observable<string>();\r\n        Start = ko.observable<Harbour>();\r\n        StartId = ko.observable<number>();\r\n        EndId = ko.observable<number>();\r\n        End = ko.observable<Harbour>();\r\n        Persons = ko.observableArray<Person>();\r\n        Distance = ko.observable<number>(0);\r\n        Album = ko.observable(new Album());\r\n\r\n        CrewList = ko.computed({\r\n            read: () => {\r\n                var persons = this.Persons();\r\n                var first = persons[0];\r\n                if (first === undefined)\r\n                    return \"\";\r\n                if (persons.length === 1)\r\n                    return first.FullName();\r\n                else {\r\n                    let list = first.FullName();\r\n                    for (let i = 1; i < persons.length; i++) {\r\n                        list += `, ${persons[i].FullName()}`;\r\n                    }\r\n                    return list;\r\n                }\r\n            },\r\n            deferEvaluation: true\r\n\r\n        });\r\n\r\n        SaillingTime = ko.computed(() => {\r\n            const startDate = this.StartDate();\r\n            const endDate = this.EndDate();\r\n            if (startDate === undefined || endDate === undefined || renderTime === undefined)\r\n                return \"\";\r\n            return renderTime(new Date(startDate), new Date(endDate));\r\n        });\r\n\r\n        ConvertToServerEntity(idOnly?: boolean): SEntity {\r\n            this.EndId(this.End().Id());\r\n            this.StartId(this.Start().Id());\r\n            var sEntity = super.ConvertToServerEntity(idOnly);\r\n            const crew = new Array<ServerModel.Crew>();\r\n            for (let person of this.Persons()) {\r\n                crew.push({ PersonId: person.Id(), TackId: this.Id() });\r\n            }\r\n            (<any>sEntity).Crew = crew;\r\n            return sEntity;\r\n        }\r\n    }\r\n\r\n    export class Trip extends TackBase {\r\n        Name = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n        Tacks = ko.observableArray<Tack>();\r\n        IsDummy = ko.observable<boolean>();\r\n\r\n        Context() {\r\n            return mapViewModel.Trips as any;\r\n        }\r\n    }\r\n\r\n    export class LogBookEntry extends TackBase {\r\n        MotorHoursStart = ko.observable<number>();\r\n        MotorHoursEnd = ko.observable<number>();\r\n        LogStart = ko.observable<number>();\r\n        LogEnd = ko.observable<number>();\r\n        WindSpeed = ko.observable<number>();\r\n        WindDirection = ko.observable<string>();\r\n        SpecialOccurences = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.LogBookEntries as any;\r\n        }\r\n\r\n    }\r\n\r\n    export class Tack extends TackBase {\r\n        Waypoints = ko.observableArray<ServerModel.WaypointTack>();\r\n\r\n        CanRemoveTack = ko.computed({\r\n            read: () => {\r\n                if (mapViewModel.TripHelper.Editing() === undefined)\r\n                    return false;\r\n                const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n                const index = tacks.indexOf(this);\r\n                const prevTack = tacks()[index - 1];\r\n                const nextTack = tacks()[index + 1];\r\n                if (prevTack !== undefined)\r\n                    if (nextTack !== undefined)\r\n                        return prevTack.Start() !== nextTack.Start();\r\n                    else\r\n                        return true;\r\n                else\r\n                    return nextTack !== undefined;\r\n            },\r\n            deferEvaluation: true\r\n        });\r\n\r\n        ComputePlaceholder = ko.computed((): string => {\r\n            if (this.StartDate() !== undefined)\r\n                return moment(this.StartDate()).format(\"L\");\r\n            return \"\";\r\n        });\r\n\r\n        Context() {\r\n            return mapViewModel.Tacks as any;\r\n        }\r\n\r\n    }\r\n\r\n    export class Comment extends Entity {\r\n        Title = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n        Rating = ko.observable<number>();\r\n        ParentId = ko.observable<number>();\r\n\r\n        Context():KnockoutObservableArray<Comment> {\r\n            throw \"not implemented\";\r\n        }\r\n\r\n    }\r\n\r\n    export class Location extends Entity {\r\n        HarbourId = ko.observable<number>();\r\n        Website = ko.observable<string>();\r\n        Name = ko.observable<string>();\r\n        Rating = ko.observable<number>();\r\n        Address = ko.observable<Address>();\r\n        AddressId = ko.observable<number>();\r\n\r\n        Context() {\r\n            return mapViewModel.Locations as any;\r\n        }\r\n    }\r\n\r\n    export class Restaurant extends Location {\r\n    }\r\n\r\n\r\n    export class Supermarket extends Location {\r\n    }\r\n\r\n\r\n    export class WaypointDistance {\r\n        constructor(public Precessor: Waypoint,\r\n            public Waypoint: Waypoint,\r\n            public Distance: number,\r\n            calculaterdWaypoints: Waypoint[],\r\n            calculateRoute: boolean) {\r\n            this.LatLng = Waypoint.LatLng;\r\n            calculaterdWaypoints.push(Waypoint);\r\n            for (let wp of Waypoint.GetConnectedWaypoints()) {\r\n                if (calculaterdWaypoints.indexOf(wp) === -1)\r\n                    this.ConnectedWayPoints.push(wp);\r\n            }\r\n            if (calculateRoute) {\r\n                Waypoint.RoutePrecessor(Precessor);\r\n                Waypoint.RouteDistance(Distance);\r\n            } else {\r\n                Waypoint.Precessor(Precessor);\r\n                Waypoint.Distance(Distance);\r\n            }\r\n        }\r\n\r\n        ConnectedWayPoints = new Array<Waypoint>();\r\n        ConnectedDistances = new Array<WaypointDistance>();\r\n        LatLng: L.LatLng;\r\n    }\r\n\r\n    export class Wifi extends Entity {\r\n        Name = ko.observable<string>();\r\n        Password = ko.observable<string>();\r\n        Speed = ko.observable<number>();\r\n        Free = ko.observable<boolean>();\r\n        HarbourId = ko.observable<number>();\r\n        Harbour = ko.observable<Harbour>();\r\n\r\n        Context() {\r\n            return mapViewModel.Wifis as any;\r\n        }\r\n    }\r\n\r\n    export class ContentPage extends Entity {\r\n        Title = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.ContentPages as any;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nenum MarkerType {\r\n    Harbour,\r\n    Dummy,\r\n    Waypoint,\r\n    WeatherStation\r\n}"],"sourceRoot":"/source/"}