{"version":3,"sources":["wwwroot/js/ClientModel.js","/source/wwwroot/js/ClientModel.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","ClientModel","Entity","_this","AlbumId","ko","observable","CommentListId","Album","CreateObservable","ForeignKey","t","InsertDate","Date","UpdateDate","ClientId","clientIdCounter","ServerApi","GetApi","savedStates","Array","SaveState","alreadySavedEntities","savedState","indexOf","push","_i","_a","GetObservableNames","length","prop","val","unwrap","slice","_b","val_1","elem","RevertState","ignoreError","alreadyRevertedEntities","val_2","shift","Id","entityDb","toString","DeleteOnServer","Delete","done","removeFromContext","SaveToServer","undefined","Create","ConvertToServerEntity","data","LoadFromServerEntity","addToContext","Update","Context","remove","serverEntity","ProcessOnServer","sVal","sVal_1","obj","entity","cVal","idOnly","isUpdate","propName","arr","_c","UpdateTransferMode","TransferMode","Include","AddTransferMode","CopyTo","out","isWriteableObservable","Block","_super","apply","arguments","Images","observableArray","mapViewModel","Albums","Person","LastName","FirstName","FullName","computed","Persons","Job","DueTo","AssignedTo","AssignedToId","Title","Content","Done","SuperJob","SuperJobId","Trip","TripId","SubJobs","Jobs","Waypoint","latLng","markerType","Map","call","WaypointNumber","polylines","Latitude","Longitude","Distance","Precessor","RouteDistance","RoutePrecessor","Name","Description","Wifis","LatLng","L","lat","lng","subscribe","value","Redraw","Polylines","Popup","content","popup","removeLayer","marker","bindPopup","Show","highlight","setOpacity","IsDummy","$","_icon","addClass","Hide","removeClass","updatePolylines","setLatLng","i","redrawPolyline","GetConnectedWaypoints","ret","line","Waypoints","waypoint","sort","w1","w2","distanceTo","convertFromDummyHandle","MarkerType","Dummy","splitPolyline","w","wCA","WaypointConnections","Disconnect","Connect","IsInPolyline","polyline","wp","RemoveFromMap","removePolyline","AddToPolyline","DummyHandle","addLatLng","redraw","RemoveFromPolyline","removeFromArray","getLatLngs","RemoveIfHasZeroOrOnePolylines","SetLatLng","CenterOnMap","setView","Harbour","map","Locations","Rating","Website","label","getLabel","updateLabelContent","bindLabel","direction","Harbours","Address","Street","Zip","Town","Comment","Addresses","Image","Path","Height","Width","TackBase","StartDate","EndDate","Start","StartId","EndId","End","CrewList","read","persons","first","list","deferEvaluation","SaillingTime","startDate","endDate","renderTime","Tacks","Trips","LogBookEntry","MotorHoursStart","MotorHoursEnd","LogStart","LogEnd","WindSpeed","WindDirection","SpecialOccurences","LogBookEntries","Tack","CanRemoveTack","TripHelper","Editing","tacks","index","prevTack","nextTack","ComputePlaceholder","moment","format","ParentId","Location","HarbourId","AddressId","Restaurant","Supermarket","WaypointDistance","calculaterdWaypoints","calculateRoute","ConnectedWayPoints","ConnectedDistances","Wifi","Password","Speed","Free","ContentPage","ContentPages"],"mappings":"AAAA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,KCH5EO,aAAP,SAAOA,GASH,GAAAC,GAAA,WACI,QAAAA,KADJ,GAAAC,GAAAZ,IAKIA,MAAAa,QAAUC,GAAGC,aACbf,KAAAgB,cAAgBF,GAAGC,aACnBf,KAAAiB,MAAQC,kBACJC,WAAY,SAACC,GAAY,MAAAA,GAAEP,WAE/Bb,KAAAqB,WAAaP,GAAGC,WAAmBO,MACnCtB,KAAAuB,WAAaT,GAAGC,WAAmBO,MAKnCtB,KAAAwB,SAAWb,EAAOc,kBAERzB,KAAA0B,UAAYA,UAAUC,OAAO3B,MA4F/BA,KAAA4B,YAAY,GAAIC,OAExB7B,KAAA8B,UAAW,SAACC,GAAA,SAAAA,IAAAA,EAAA,GAA2BF,OACnC,IAAMG,GAAa,GAAIxB,OACvB,IAA2C,KAAvCuB,EAAqBE,QAAQrB,GAAjC,CAEAmB,EAAqBG,KAAKtB,EAC1B,KAAiB,GAAAuB,GAAA,EAAAC,EAAAxB,EAAKyB,qBAALF,EAAAC,EAAAE,OAAAH,IAA0B,CAAtC,GAAII,GAAIH,EAAAD,GACLK,EAAM1B,GAAG2B,OAAO7B,EAAK2B,GACzB,IAAIC,YAAeX,OAAO,CACtBW,EAAMA,EAAIE,MAAM,EAChB,KAAiB,GAAAC,GAAA,EAAAC,EAAAJ,EAAAG,EAAAC,EAAAN,OAAAK,IAAI,CAAhB,GAAIE,GAAID,EAAAD,EACLE,aAAgBlC,IAChBkC,EAAKf,UAAUC,QAEhBS,aAAe7B,IACtB6B,EAAIV,UAAUC,EAClBC,GAAWO,GAAQC,EAEvB5B,EAAKgB,YAAYM,KAAKF,KAa1BhC,KAAA8C,YAAc,SAACC,EAA8BC,GACzC,GADW,SAAAD,IAAAA,GAAA,GAA8B,SAAAC,IAAAA,EAAA,GAA8BnB,QACzB,KAA1CmB,EAAwBf,QAAQrB,GAApC,CAGA,GADAoC,EAAwBd,KAAKtB,GACE,IAA3BA,EAAKgB,YAAYU,OACjB,CAAA,GAAIS,EACA,MAEA,MAAM,iBACd,IAAiB,GAAAZ,GAAA,EAAAC,EAAAxB,EAAKyB,qBAALF,EAAAC,EAAAE,OAAAH,IAA0B,CAAtC,GAAII,GAAIH,EAAAD,GACHK,EAAM5B,EAAKgB,YAAY,GAAGW,EAGhC,IADA3B,EAAK2B,GAAMC,GACPA,YAAe7B,GACf6B,EAAIM,YAAYC,EAAaC,OAC5B,IAAIR,YAAeX,OACpB,IAAiB,GAAAc,GAAA,EAAAM,EAAAT,EAAAG,EAAAM,EAAAX,OAAAK,IAAI,CAAhB,GAAIE,GAAII,EAAAN,EACLE,aAAgBlC,IAChBkC,EAAKC,YAAYC,EAAaC,IAG9CpC,EAAKgB,YAAYsB,UAGrBlD,KAAAmD,GAAKrC,GAAGC,aApKJJ,EAAOyC,SAASpD,KAAKwB,SAAS6B,YAAcrD,KAuKpD,MArJIW,GAAAJ,UAAA+C,eAAA,WAAA,GAAA1C,GAAAZ,IACI,OAAOA,MAAK0B,UAAU6B,OAAOvD,KAAKmD,MAAMK,KAAK,WAAQ5C,EAAK6C,uBAG9D9C,EAAAJ,UAAAmD,aAAA,WAAA,GAAA9C,GAAAZ,IACI,OAAkB2D,UAAd3D,KAAKmD,KACEnD,KAAK0B,UAAUkC,OAAO5D,KAAK6D,yBAC7BL,KAAK,SAAAM,GACFlD,EAAKgB,eACLhB,EAAKmD,qBAAqBD,GAC1BlD,EAAKoD,iBAEVhE,KAAK0B,UAAUuC,OAAOjE,KAAK6D,yBAC7BL,KAAK,SAACM,GACHlD,EAAKgB,eACLhB,EAAKmD,qBAAqBD,MAI9BnD,EAAAJ,UAAAyD,aAAR,WACyC,KAAjChE,KAAKkE,UAAUjC,QAAQjC,OAE3BA,KAAKkE,UAAUhC,KAAKlC,OAGhBW,EAAAJ,UAAAkD,kBAAR,WACIzD,KAAKkE,UAAUC,OAAOnE,OAG1BW,EAAAJ,UAAAwD,qBAAA,SAAqBK,GACjB,GAAIA,EAAaC,mBAAoB,EACjC,MAAOrE,KACX,KAAiB,GAAAmC,GAAA,EAAAC,EAAApC,KAAKqC,qBAALF,EAAAC,EAAAE,OAAAH,IAA0B,CAAtC,GAAII,GAAIH,EAAAD,GACHmC,EAAOF,EAAa7B,EAC1B,IAAaoB,SAATW,GAA+B,OAATA,EACtB,GAAIA,YAAgBzC,OAChB,IAAgB,GAAAc,GAAA,EAAA4B,EAAAD,EAAA3B,EAAA4B,EAAAjC,OAAAK,IAAK,CAAhB,GAAI6B,GAAGD,EAAA5B,GACF8B,EAAS9D,EAAOyC,SAASoB,EAAIhD,SAAS6B,WAC7BM,UAAXc,GACAA,EAAOV,qBAAqBS,OAEjC,CACH,GAAME,GAAO1E,KAAKuC,IACdmC,aAAgB/D,GAChB+D,EAAKX,qBAAqBO,GAE1BtE,KAAKuC,GAAM+B,IAI3B,MAAOtE,OAGXW,EAAAJ,UAAAsD,sBAAA,SAAsBc,GAClB,GADkB,SAAAA,IAAAA,GAAA,GACdA,EACA,OAASxB,GAAInD,KAAKmD,KAAMkB,iBAAiB,EAK7C,KAAqB,GAHfO,GAAyBjB,SAAd3D,KAAKmD,KAChBiB,GAAiB5C,SAAUxB,KAAKwB,UAChCiD,EAASzE,KACMmC,EAAA,EAAAC,EAAApC,KAAKqC,qBAALF,EAAAC,EAAAE,OAAAH,IAA0B,CAA1C,GAAI0C,GAAQzC,EAAAD,GACPI,EAAOkC,EAAOI,GACdrC,EAAMD,GACZ,IAAYoB,SAARnB,EACA,GAAIA,YAAeX,OAAO,CAEtB,IAAiB,GADXiD,GAAM,GAAIjD,OACCc,EAAA,EAAAoC,EAAAvC,EAAAG,EAAAoC,EAAAzC,OAAAK,IAAgB,CAA5B,GAAIE,GAAIkC,EAAApC,IACSgB,SAAdd,EAAKM,MACLyB,GAAYrC,EAAKyC,qBAAuBC,aAAaC,UACpDN,GAAYrC,EAAK4C,kBAAoBF,aAAaC,UACnDJ,EAAI5C,KAAKW,EAAKgB,yBAEtBO,EAAaS,GAAYC,MAEzBV,GAAaS,GAAYrC,YAAe7B,GACpBgD,SAAbnB,EAAIW,MACHyB,GAAYrC,EAAKyC,qBAAuBC,aAAaC,UACpDN,GAAYrC,EAAK4C,kBAAoBF,aAAaC,QACjD1C,EAAIqB,wBACJF,OACJnB,EAGlB,MAAO4B,IAGXzD,EAAAJ,UAAA6E,OAAA,SAAOX,GACHA,EAAOtB,GAAGnD,KAAKmD,OAyBTxC,EAAAJ,UAAA8B,mBAAV,WACI,GAAMgD,GAAM,GAAIxD,OACV4C,EAASzE,IACf,KAAK,GAAIuC,KAAQkC,GACTA,EAAOnE,eAAeiC,IAClBzB,GAAGwE,sBAAsBb,EAAOlC,MAAWkC,EAAOlC,GAAMgD,OACxDF,EAAInD,KAAKK,EACrB,OAAO8C,IA9HI1E,EAAAc,gBAAkB,EAClBd,EAAAyC,YA2JnBzC,IAzKsBD,GAAAC,OAAMA,CA2K5B,IAAAM,GAAA,SAAAuE,GAAA,QAAAvE,KAA2BuE,EAAAC,MAAAzF,KAAA0F,WACvB1F,KAAA2F,OAAS7E,GAAG8E,kBAKhB,MAN2B7F,WAAAkB,EAAAuE,GAGvBvE,EAAAV,UAAA2D,QAAA,WACI,MAAO2B,cAAaC,QAE5B7E,GAN2BN,EAAdD,GAAAO,MAAKA,CAQlB,IAAA8E,GAAA,SAAAP,GAAA,QAAAO,KAAA,GAAAnF,GAAAZ,IAA4BwF,GAAAC,MAAAzF,KAAA0F,WACxB1F,KAAAgG,SAAWlF,GAAGC,aACdf,KAAAiG,UAAYnF,GAAGC,aACff,KAAAkG,SAAWpF,GAAGqF,SAAS,WAAM,MAAAvF,GAAKqF,YAAc,IAAMrF,EAAKoF,aAM/D,MAT4BjG,WAAAgG,EAAAP,GAKxBO,EAAAxF,UAAA2D,QAAA,WACI,MAAO2B,cAAaO,SAG5BL,GAT4BpF,EAAfD,GAAAqF,OAAMA,CAWnB,IAAAM,GAAA,SAAAb,GAAA,QAAAa,KAAyBb,EAAAC,MAAAzF,KAAA0F,WACrB1F,KAAAsG,MAAQxF,GAAGC,WAAiBO,MAC5BtB,KAAAuG,WAAazF,GAAGC,aAChBf,KAAAwG,aAAe1F,GAAGC,aAClBf,KAAAyG,MAAQ3F,GAAGC,aACXf,KAAA0G,QAAU5F,GAAGC,aACbf,KAAA2G,KAAO7F,GAAGC,aACVf,KAAA4G,SAAW9F,GAAGC,aACdf,KAAA6G,WAAa/F,GAAGC,aAChBf,KAAA8G,KAAOhG,GAAGC,aACVf,KAAA+G,OAASjG,GAAGC,aACZf,KAAAgH,QAAUlG,GAAG8E,kBAKjB,MAhByB7F,WAAAsG,EAAAb,GAarBa,EAAA9F,UAAA2D,QAAA,WACI,MAAO2B,cAAaoB,MAE5BZ,GAhByB1F,EAAZD,GAAA2F,IAAGA,CAkBhB,IAAAa,GAAA,SAAA1B,GAGI,QAAA0B,GAAYC,EACRC,EACUC,GALlB,GAAAzG,GAAAZ,IAOQwF,GAAA8B,KAAAtH,MAFUA,KAAAqH,IAAAA,EA6JdrH,KAAAuH,eAAiBzG,GAAGC,aACZf,KAAAwH,UAAY,GAAI3F,OAmBxB7B,KAAAyH,SAAW3G,GAAGC,WAAmB,GACjCf,KAAA0H,UAAY5G,GAAGC,WAAmB,GAClCf,KAAA2H,SAAW7G,GAAGC,aACdf,KAAA4H,UAAY9G,GAAGC,aACff,KAAA6H,cAAgB/G,GAAGC,aACnBf,KAAA8H,eAAiBhH,GAAGC,aAMpBf,KAAA+H,KAAOjH,GAAGC,aACVf,KAAAgI,YAAclH,GAAGC,aACjBf,KAAAiI,MAAQnH,GAAG8E,kBA3LKjC,SAAR0D,GACyB,gBAAdD,KACPC,EAAQF,EACRA,EAAUC,EACVA,EAAaC,GAEjBrH,KAAKqH,IAAO,EACZrH,KAAKkI,OAAS,GAAIC,GAAED,OAAO,EAAG,GAC9Bd,EAAcD,IAEdnH,KAAKyH,SAAUN,EAAoBiB,KACnCpI,KAAK0H,UAAWP,EAAoBkB,MAExCrI,KAAKkI,OAAS,GAAIC,GAAED,OAAOlI,KAAKyH,WAAYzH,KAAK0H,aACjD1H,KAAKyH,SAASa,UAAU,SAACC,GACjB3H,EAAKsH,OAAOE,MAAQG,IACpB3H,EAAKsH,OAAOE,IAAMG,EAClB3H,EAAK4H,YAGbxI,KAAK0H,UAAUY,UAAU,SAACC,GAClB3H,EAAKsH,OAAOG,MAAQE,IACpB3H,EAAKsH,OAAOG,IAAME,EAClB3H,EAAK4H,YAGbxI,KAAKoH,WAAaA,EAClBpH,KAAKkI,OAAOO,UAAY,GAAI5G,OAC5B7B,KAAKkI,OAAOhB,SAAWlH,KAWvBA,KAAK4H,UAAUrC,OAAQ,EACvBvF,KAAK2H,SAASpC,OAAQ,EA4J9B,MA5M8BxF,WAAAmH,EAAA1B,GAqD1B0B,EAAA3G,UAAAmI,MAAA,SAAMC,GACiBhF,SAAf3D,KAAK4I,QACL5I,KAAKqH,IAAIwB,YAAY7I,KAAK4I,OAC1B5I,KAAK4I,MAAQjF,QAEDA,SAAZgF,GAEA3I,KAAK8I,OAAOC,UAAUJ,IAO9BzB,EAAA3G,UAAAyI,KAAA,SAAKC,GAAA,SAAAA,IAAAA,GAAA,GACDjJ,KAAK8I,OAAOI,WAAWlJ,KAAK8I,OAAO5B,SAASiC,UAAY,GAAM,GAC1DF,GACAG,EAAEpJ,KAAK8I,OAAOO,OAAOC,SAAS,WAGtCpC,EAAA3G,UAAAgJ,KAAA,WACIvJ,KAAK8I,OAAOI,WAAW,IACvBE,EAAEpJ,KAAK8I,OAAOO,OAAOG,YAAY,WAGrCtC,EAAA3G,UAAAiI,OAAA,SAAOiB,GAGH,GAHG,SAAAA,IAAAA,GAAA,GACiB9F,SAAhB3D,KAAK8I,QACL9I,KAAK8I,OAAOY,UAAU1J,KAAKkI,QAC3BuB,EACA,IAAK,GAAIE,GAAI,EAAGA,EAAI3J,KAAKwH,UAAUlF,OAAQqH,IACvCC,eAAe5J,KAAKwH,UAAUmC,KAG1CzC,EAAA3G,UAAAsJ,sBAAA,WAEI,IAAiB,GAFrBjJ,GAAAZ,KACU8J,EAAM,GAAIjI,OACCM,EAAA,EAAAC,EAAApC,KAAKwH,UAALrF,EAAAC,EAAAE,OAAAH,IACb,IAAqB,GADhB4H,GAAI3H,EAAAD,GACYQ,EAAA,EAAAoC,EAAAgF,EAAKC,UAALrH,EAAAoC,EAAAzC,OAAAK,IAAe,CAA/B,GAAIsH,GAAQlF,EAAApC,EACTsH,KAAajK,MACb8J,EAAI5H,KAAK+H,GAGrB,MAAOH,GAAII,KAAK,SAACC,EAAIC,GACjB,MAAOD,GAAGjC,OAAOmC,WAAWzJ,EAAKsH,QAAUkC,EAAGlC,OAAOmC,WAAWzJ,EAAKsH,WAI7EhB,EAAA3G,UAAA+J,uBAAA,WACI,GAAItK,KAAKoH,aAAemD,WAAWC,MAAnC,CAEAxK,KAAK8I,OAAOI,WAAW,EACvB,IAAIiB,GAAKnK,KAAKwH,UAAU,GAAGwC,UAAU,GACjCI,EAAKpK,KAAKwH,UAAU,GAAGwC,UAAU,EACrChK,MAAKoH,WAAamD,WAAWrD,SAC7BuD,cAAczK,KAAKwH,UAAU,IAC7BxH,KAAK0D,eACAF,KAAK,SAACkH,GACH,GAAMC,GAAMjJ,UAAUkJ,mBACtBD,GAAIE,WAAWV,EAAGhH,KAAMiH,EAAGjH,MAC3BwH,EAAIG,QAAQX,EAAGhH,KAAMuH,EAAEvH,IACvBwH,EAAIG,QAAQV,EAAGjH,KAAMuH,EAAEvH,QAInC+D,EAAA3G,UAAAwK,aAAA,SAAaC,GACT,IAAiB,GAAA7I,GAAA,EAAAC,EAAA4I,EAAShB,UAAT7H,EAAAC,EAAAE,OAAAH,IAAmB,CAA/B,GAAM8I,GAAE7I,EAAAD,EACT,IAAInC,OAASiL,EACT,OAAO,EAEf,OAAO,GAGX/D,EAAA3G,UAAA2K,cAAA,WACI,GAAIlL,KAAKoH,aAAemD,WAAWC,MAC/B,IAAqB,GAAArI,GAAA,EAAAC,EAAApC,KAAKwH,UAALrF,EAAAC,EAAAE,OAAAH,IAAe,CAA/B,GAAI6I,GAAQ5I,EAAAD,EACbgJ,gBAAeH,GACvBhL,KAAKqH,IAAIwB,YAAY7I,KAAK8I,SAG9B5B,EAAA3G,UAAA6K,cAAA,SAAcJ,GACV,MAAIhL,MAAK+K,aAAaC,IACX,GACNhL,KAAKmJ,WAAa6B,EAASK,cAAgBrL,OAC5CgL,EAAShB,UAAU9H,KAAKlC,MACxBgL,EAASM,UAAUtL,KAAKkI,QACxB8C,EAASO,UAETvL,KAAKwH,UAAU,KAAOwD,IACtBhL,KAAKkI,OAAOO,UAAUvG,KAAK8I,GAC3BhL,KAAKwH,UAAUtF,KAAK8I,KAGjB,IAGX9D,EAAA3G,UAAAiL,mBAAA,SAAmBR,GAQf,MALAS,iBAAgBT,EAAShB,UAAWhK,MACpCyL,gBAAgBzL,KAAKwH,UAAWwD,GAChCS,gBAAgBzL,KAAKkI,OAAOO,UAAWuC,GACvCS,gBAAgBT,EAASU,aAAc1L,KAAKkI,QAC5C8C,EAASO,UACF,GAGXrE,EAAA3G,UAAAoL,8BAAA,WACI,OAAO,GAOXzE,EAAA3G,UAAAqL,UAAA,SAAUzE,EAAkBsC,GAAA,SAAAA,IAAAA,GAAA,GACxBzJ,KAAKkI,OAAOE,IAAMjB,EAAOiB,IACzBpI,KAAKkI,OAAOG,IAAMlB,EAAOkB,IACzBrI,KAAKyH,SAASN,EAAOiB,KACrBpI,KAAK0H,UAAUP,EAAOkB,KACtBrI,KAAKwI,OAAOiB,IAGhBvC,EAAA3G,UAAAsL,YAAA,WACI7L,KAAKqH,IAAIyE,QAAQ9L,KAAKkI,SAG1BhB,EAAA3G,UAAA4I,QAAA,WACI,MAAOnJ,MAAKoH,aAAemD,WAAWC,OAkB1CtD,EAAA3G,UAAA2D,QAAA,WACI,MAAO2B,cAAamE,WAGxB9C,EAAA3G,UAAA+C,eAAA,WAAA,GAAA1C,GAAAZ,IACI,OAAOwF,GAAAjF,UAAM+C,eAAcgE,KAAAtH,MAAGwD,KAAK,WAAM,MAAA5C,GAAKsK,mBAEtDhE,GA5M8BvG,EAAjBD,GAAAwG,SAAQA,CA8MrB,IAAA6E,GAAA,SAAAvG,GAII,QAAAuG,GAAY5E,EAAiC6E,GAJjD,GAAApL,GAAAZ,IAKQwF,GAAA8B,KAAAtH,KAAMmH,EAAoBoD,WAAWwB,QAASC,GAgClDhM,KAAAiB,MAAQH,GAAGC,WAAW,GAAIE,IAM1BjB,KAAAiM,UAAYnL,GAAG8E,kBACf5F,KAAAkM,OAASpL,GAAGC,aACZf,KAAA0G,QAAU5F,GAAGC,aACbf,KAAAmM,QAAUrL,GAAGC,aAxBTf,KAAK+H,KAAKO,UAAU,SAACrI,GACjB,GAAoB0D,SAAhB/C,EAAKkI,OAAsB,CAC3B,GAAMsD,GAAQxL,EAAKkI,OAAOuD,UACZ1I,UAAVyI,EACAxL,EAAKkI,OAAOwD,mBAAmBrM,GAE/BW,EAAKkI,OAAOyD,UAAUtM,GAElBuM,UAAW,YAqBnC,MAnD6BzM,WAAAgM,EAAAvG,GAuCzBuG,EAAAxL,UAAAoL,8BAAA,WACI,OAAO,GAQXI,EAAAxL,UAAA2D,QAAA,WACI,MAAO2B,cAAa4G,UAE5BV,GAnD6B7E,EAAhBxG,GAAAqL,QAAOA,CAqDpB,IAAAW,GAAA,SAAAlH,GAAA,QAAAkH,KAA6BlH,EAAAC,MAAAzF,KAAA0F,WACzB1F,KAAA2M,OAAS7L,GAAGC,aACZf,KAAA4M,IAAM9L,GAAGC,aACTf,KAAA6M,KAAO/L,GAAGC,aACVf,KAAA8M,QAAUhM,GAAGC,aAKjB,MAT6BhB,WAAA2M,EAAAlH,GAMzBkH,EAAAnM,UAAA2D,QAAA,WACI,MAAO2B,cAAakH,WAE5BL,GAT6B/L,EAAhBD,GAAAgM,QAAOA,CAWpB,IAAAM,GAAA,SAAAxH,GAAA,QAAAwH,KAA2BxH,EAAAC,MAAAzF,KAAA0F,WAEvB1F,KAAAiN,KAAOnM,GAAGC,aACVf,KAAAkN,OAASpM,GAAGC,aACZf,KAAAmN,MAAQrM,GAAGC,aAKf,MAT2BhB,WAAAiN,EAAAxH,GAMvBwH,EAAAzM,UAAA2D,QAAA,WACI,MAAO2B,cAAaF,QAE5BqH,GAT2BrM,EAAdD,GAAAsM,MAAKA,CAWlB,IAAAI,GAAA,SAAA5H,GAAA,QAAA4H,KAAA,GAAAxM,GAAAZ,IAAuCwF,GAAAC,MAAAzF,KAAA0F,WACnC1F,KAAAqN,UAAYvM,GAAGC,aACff,KAAAsN,QAAUxM,GAAGC,aACbf,KAAAuN,MAAQzM,GAAGC,aACXf,KAAAwN,QAAU1M,GAAGC,aACbf,KAAAyN,MAAQ3M,GAAGC,aACXf,KAAA0N,IAAM5M,GAAGC,aACTf,KAAAoG,QAAUtF,GAAG8E,kBACb5F,KAAA2H,SAAW7G,GAAGC,WAAmB,GACjCf,KAAAiB,MAAQH,GAAGC,WAAW,GAAIE,IAE1BjB,KAAA2N,SAAW7M,GAAGqF,UACVyH,KAAM,WACF,GAAIC,GAAUjN,EAAKwF,UACf0H,EAAQD,EAAQ,EACpB,IAAclK,SAAVmK,EACA,MAAO,EACX,IAAuB,IAAnBD,EAAQvL,OACR,MAAOwL,GAAM5H,UAGb,KAAK,GADD6H,GAAOD,EAAM5H,WACRyD,EAAI,EAAGA,EAAIkE,EAAQvL,OAAQqH,IAChCoE,GAAQ,KAAKF,EAAQlE,GAAGzD,UAE5B,OAAO6H,IAGfC,iBAAiB,IAIrBhO,KAAAiO,aAAenN,GAAGqF,SAAS,WACvB,GAAM+H,GAAYtN,EAAKyM,YACjBc,EAAUvN,EAAK0M,SACrB,OAAkB3J,UAAduK,GAAuCvK,SAAZwK,GAAwCxK,SAAfyK,WAC7C,GACJA,WAAW,GAAI9M,MAAK4M,GAAY,GAAI5M,MAAK6M,MAExD,MAtCuCpO,WAAAqN,EAAA5H,GAsCvC4H,GAtCuCzM,EAAjBD,GAAA0M,SAAQA,CAwC9B,IAAAtG,GAAA,SAAAtB,GAAA,QAAAsB,KAA0BtB,EAAAC,MAAAzF,KAAA0F,WACtB1F,KAAA+H,KAAOjH,GAAGC,aACVf,KAAA0G,QAAU5F,GAAGC,aACbf,KAAAqO,MAAQvN,GAAG8E,kBACX5F,KAAAmJ,QAAUrI,GAAGC,aAKjB,MAT0BhB,WAAA+G,EAAAtB,GAMtBsB,EAAAvG,UAAA2D,QAAA,WACI,MAAO2B,cAAayI,OAE5BxH,GAT0BsG,EAAb1M,GAAAoG,KAAIA,CAWjB,IAAAyH,GAAA,SAAA/I,GAAA,QAAA+I,KAAkC/I,EAAAC,MAAAzF,KAAA0F,WAC9B1F,KAAAwO,gBAAkB1N,GAAGC,aACrBf,KAAAyO,cAAgB3N,GAAGC,aACnBf,KAAA0O,SAAW5N,GAAGC,aACdf,KAAA2O,OAAS7N,GAAGC,aACZf,KAAA4O,UAAY9N,GAAGC,aACff,KAAA6O,cAAgB/N,GAAGC,aACnBf,KAAA8O,kBAAoBhO,GAAGC,aAM3B,MAbkChB,WAAAwO,EAAA/I,GAS9B+I,EAAAhO,UAAA2D,QAAA,WACI,MAAO2B,cAAakJ,gBAG5BR,GAbkCnB,EAArB1M,GAAA6N,aAAYA,CAezB,IAAAS,GAAA,SAAAxJ,GAAA,QAAAwJ,KAAA,GAAApO,GAAAZ,IAA0BwF,GAAAC,MAAAzF,KAAA0F,WACtB1F,KAAAgK,UAAYlJ,GAAG8E,kBAEf5F,KAAAiP,cAAgBnO,GAAGqF,UACfyH,KAAM,WACF,GAA0CjK,SAAtCkC,aAAaqJ,WAAWC,UACxB,OAAO,CACX,IAAMC,GAAQvJ,aAAaqJ,WAAWC,UAAUd,MAC1CgB,EAAQD,EAAMnN,QAAQrB,GACtB0O,EAAWF,IAAQC,EAAQ,GAC3BE,EAAWH,IAAQC,EAAQ,EACjC,OAAiB1L,UAAb2L,EACiB3L,SAAb4L,EACOD,EAAS/B,UAAYgC,EAAShC,SAE9B,EAES5J,SAAb4L,GAEfvB,iBAAiB,IAGrBhO,KAAAwP,mBAAqB1O,GAAGqF,SAAS,WAC7B,MAAyBxC,UAArB/C,EAAKyM,YACEoC,OAAO7O,EAAKyM,aAAaqC,OAAO,KACpC,KAOf,MAhC0B3P,WAAAiP,EAAAxJ,GA4BtBwJ,EAAAzO,UAAA2D,QAAA,WACI,MAAO2B,cAAawI,OAG5BW,GAhC0B5B,EAAb1M,GAAAsO,KAAIA,CAkCjB,IAAAlC,GAAA,SAAAtH,GAAA,QAAAsH,KAA6BtH,EAAAC,MAAAzF,KAAA0F,WACzB1F,KAAAyG,MAAQ3F,GAAGC,aACXf,KAAA0G,QAAU5F,GAAGC,aACbf,KAAAkM,OAASpL,GAAGC,aACZf,KAAA2P,SAAW7O,GAAGC,aAMlB,MAV6BhB,WAAA+M,EAAAtH,GAMzBsH,EAAAvM,UAAA2D,QAAA,WACI,KAAM,mBAGd4I,GAV6BnM,EAAhBD,GAAAoM,QAAOA,CAYpB,IAAA8C,GAAA,SAAApK,GAAA,QAAAoK,KAA8BpK,EAAAC,MAAAzF,KAAA0F,WAC1B1F,KAAA6P,UAAY/O,GAAGC,aACff,KAAAmM,QAAUrL,GAAGC,aACbf,KAAA+H,KAAOjH,GAAGC,aACVf,KAAAkM,OAASpL,GAAGC,aACZf,KAAA0M,QAAU5L,GAAGC,aACbf,KAAA8P,UAAYhP,GAAGC,aAKnB,MAX8BhB,WAAA6P,EAAApK,GAQ1BoK,EAAArP,UAAA2D,QAAA,WACI,MAAO2B,cAAaoG,WAE5B2D,GAX8BjP,EAAjBD,GAAAkP,SAAQA,CAarB,IAAAG,GAAA,SAAAvK,GAAA,QAAAuK,KAAgCvK,EAAAC,MAAAzF,KAAA0F,WAChC,MADgC3F,WAAAgQ,EAAAvK,GAChCuK,GADgCH,EAAnBlP,GAAAqP,WAAUA,CAIvB,IAAAC,GAAA,SAAAxK,GAAA,QAAAwK,KAAiCxK,EAAAC,MAAAzF,KAAA0F,WACjC,MADiC3F,WAAAiQ,EAAAxK,GACjCwK,GADiCJ,EAApBlP,GAAAsP,YAAWA,CAIxB,IAAAC,GAAA,WACI,QAAAA,GAAmBrI,EACRV,EACAS,EACPuI,EACAC,GAJenQ,KAAA4H,UAAAA,EACR5H,KAAAkH,SAAAA,EACAlH,KAAA2H,SAAAA,EAkBX3H,KAAAoQ,mBAAqB,GAAIvO,OACzB7B,KAAAqQ,mBAAqB,GAAIxO,OAhBrB7B,KAAKkI,OAAShB,EAASgB,OACvBgI,EAAqBhO,KAAKgF,EAC1B,KAAe,GAAA/E,GAAA,EAAAC,EAAA8E,EAAS2C,wBAAT1H,EAAAC,EAAAE,OAAAH,IAAiC,CAA3C,GAAI8I,GAAE7I,EAAAD,EACkC,MAArC+N,EAAqBjO,QAAQgJ,IAC7BjL,KAAKoQ,mBAAmBlO,KAAK+I,GAEjCkF,GACAjJ,EAASY,eAAeF,GACxBV,EAASW,cAAcF,KAEvBT,EAASU,UAAUA,GACnBV,EAASS,SAASA,IAO9B,MAAAsI,KAxBavP,GAAAuP,iBAAgBA,CA0B7B,IAAAK,GAAA,SAAA9K,GAAA,QAAA8K,KAA0B9K,EAAAC,MAAAzF,KAAA0F,WACtB1F,KAAA+H,KAAOjH,GAAGC,aACVf,KAAAuQ,SAAWzP,GAAGC,aACdf,KAAAwQ,MAAQ1P,GAAGC,aACXf,KAAAyQ,KAAO3P,GAAGC,aACVf,KAAA6P,UAAY/O,GAAGC,aACff,KAAA+L,QAAUjL,GAAGC,aAKjB,MAX0BhB,WAAAuQ,EAAA9K,GAQtB8K,EAAA/P,UAAA2D,QAAA,WACI,MAAO2B,cAAaoC,OAE5BqI,GAX0B3P,EAAbD,GAAA4P,KAAIA,CAajB,IAAAI,GAAA,SAAAlL,GAAA,QAAAkL,KAAiClL,EAAAC,MAAAzF,KAAA0F,WAC7B1F,KAAAyG,MAAQ3F,GAAGC,aACXf,KAAA0G,QAAU5F,GAAGC,aAKjB,MAPiChB,WAAA2Q,EAAAlL,GAI7BkL,EAAAnQ,UAAA2D,QAAA,WACI,MAAO2B,cAAa8K,cAE5BD,GAPiC/P,EAApBD,GAAAgQ,YAAWA,GA9pBrBhQ,cAAAA,gBAyqBP,IAAK6J,aAAL,SAAKA,GACDA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,eAAA,GAAA,kBAJCA,aAAAA","file":"wwwroot/js/ClientModel.min.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ClientModel;\n(function (ClientModel) {\n    var Entity = (function () {\n        function Entity() {\n            var _this = this;\n            this.AlbumId = ko.observable();\n            this.CommentListId = ko.observable();\n            this.Album = CreateObservable({\n                ForeignKey: function (t) { return t.AlbumId; }\n            });\n            this.InsertDate = ko.observable(Date);\n            this.UpdateDate = ko.observable(Date);\n            this.ClientId = Entity.clientIdCounter++;\n            this.ServerApi = ServerApi.GetApi(this);\n            this.savedStates = new Array();\n            this.SaveState = function (alreadySavedEntities) {\n                if (alreadySavedEntities === void 0) { alreadySavedEntities = new Array(); }\n                var savedState = new Object();\n                if (alreadySavedEntities.indexOf(_this) !== -1)\n                    return;\n                alreadySavedEntities.push(_this);\n                for (var _i = 0, _a = _this.GetObservableNames(); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    var val = ko.unwrap(_this[prop]);\n                    if (val instanceof Array) {\n                        val = val.slice(0);\n                        for (var _b = 0, val_1 = val; _b < val_1.length; _b++) {\n                            var elem = val_1[_b];\n                            if (elem instanceof Entity)\n                                elem.SaveState(alreadySavedEntities);\n                        }\n                    }\n                    else if (val instanceof Entity)\n                        val.SaveState(alreadySavedEntities);\n                    savedState[prop] = val;\n                }\n                _this.savedStates.push(savedState);\n            };\n            this.RevertState = function (ignoreError, alreadyRevertedEntities) {\n                if (ignoreError === void 0) { ignoreError = false; }\n                if (alreadyRevertedEntities === void 0) { alreadyRevertedEntities = new Array(); }\n                if (alreadyRevertedEntities.indexOf(_this) !== -1)\n                    return;\n                alreadyRevertedEntities.push(_this);\n                if (_this.savedStates.length === 0)\n                    if (ignoreError)\n                        return;\n                    else\n                        throw \"No saved state\";\n                for (var _i = 0, _a = _this.GetObservableNames(); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    var val = _this.savedStates[0][prop];\n                    //this.savedState[prop] = val;\n                    _this[prop](val);\n                    if (val instanceof Entity)\n                        val.RevertState(ignoreError, alreadyRevertedEntities);\n                    else if (val instanceof Array)\n                        for (var _b = 0, val_2 = val; _b < val_2.length; _b++) {\n                            var elem = val_2[_b];\n                            if (elem instanceof Entity)\n                                elem.RevertState(ignoreError, alreadyRevertedEntities);\n                        }\n                }\n                _this.savedStates.shift();\n            };\n            this.Id = ko.observable();\n            Entity.entityDb[this.ClientId.toString()] = this;\n        }\n        Entity.prototype.DeleteOnServer = function () {\n            var _this = this;\n            return this.ServerApi.Delete(this.Id()).done(function () { _this.removeFromContext(); });\n        };\n        ;\n        Entity.prototype.SaveToServer = function () {\n            var _this = this;\n            if (this.Id() === undefined)\n                return this.ServerApi.Create(this.ConvertToServerEntity())\n                    .done(function (data) {\n                    _this.savedStates = [];\n                    _this.LoadFromServerEntity(data);\n                    _this.addToContext();\n                });\n            return this.ServerApi.Update(this.ConvertToServerEntity())\n                .done(function (data) {\n                _this.savedStates = [];\n                _this.LoadFromServerEntity(data);\n            });\n            ;\n        };\n        Entity.prototype.addToContext = function () {\n            if (this.Context().indexOf(this) !== -1)\n                return;\n            this.Context().push(this);\n        };\n        Entity.prototype.removeFromContext = function () {\n            this.Context().remove(this);\n        };\n        Entity.prototype.LoadFromServerEntity = function (serverEntity) {\n            if (serverEntity.ProcessOnServer === false)\n                return this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var sVal = serverEntity[prop];\n                if (sVal !== undefined && sVal !== null) {\n                    if (sVal instanceof Array) {\n                        for (var _b = 0, sVal_1 = sVal; _b < sVal_1.length; _b++) {\n                            var obj = sVal_1[_b];\n                            var entity = Entity.entityDb[obj.ClientId.toString()];\n                            if (entity !== undefined)\n                                entity.LoadFromServerEntity(obj);\n                        }\n                    }\n                    else {\n                        var cVal = this[prop]();\n                        if (cVal instanceof Entity)\n                            cVal.LoadFromServerEntity(sVal);\n                        else\n                            this[prop](sVal);\n                    }\n                }\n            }\n            return this;\n        };\n        Entity.prototype.ConvertToServerEntity = function (idOnly) {\n            if (idOnly === void 0) { idOnly = false; }\n            if (idOnly) {\n                return { Id: this.Id(), ProcessOnServer: false };\n            }\n            var isUpdate = this.Id() !== undefined;\n            var serverEntity = { ClientId: this.ClientId };\n            var entity = this;\n            for (var _i = 0, _a = this.GetObservableNames(); _i < _a.length; _i++) {\n                var propName = _a[_i];\n                var prop = entity[propName];\n                var val = prop();\n                if (val !== undefined) {\n                    if (val instanceof Array) {\n                        var arr = new Array();\n                        for (var _b = 0, _c = val; _b < _c.length; _b++) {\n                            var elem = _c[_b];\n                            if (elem.Id() === undefined ||\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include)\n                                arr.push(elem.ConvertToServerEntity());\n                        }\n                        serverEntity[propName] = arr;\n                    }\n                    else\n                        serverEntity[propName] = val instanceof Entity\n                            ? (val.Id() === undefined ||\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include\n                                ? val.ConvertToServerEntity()\n                                : undefined)\n                            : val;\n                }\n            }\n            return serverEntity;\n        };\n        Entity.prototype.CopyTo = function (entity) {\n            entity.Id(this.Id());\n        };\n        Entity.prototype.GetObservableNames = function () {\n            var out = new Array();\n            var entity = this;\n            for (var prop in entity)\n                if (entity.hasOwnProperty(prop))\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\n                        out.push(prop);\n            return out;\n        };\n        Entity.clientIdCounter = 0;\n        Entity.entityDb = {};\n        return Entity;\n    }());\n    ClientModel.Entity = Entity;\n    var Album = (function (_super) {\n        __extends(Album, _super);\n        function Album() {\n            _super.apply(this, arguments);\n            this.Images = ko.observableArray();\n        }\n        Album.prototype.Context = function () {\n            return mapViewModel.Albums;\n        };\n        return Album;\n    }(Entity));\n    ClientModel.Album = Album;\n    var Person = (function (_super) {\n        __extends(Person, _super);\n        function Person() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.LastName = ko.observable();\n            this.FirstName = ko.observable();\n            this.FullName = ko.computed(function () { return _this.FirstName() + \" \" + _this.LastName(); });\n        }\n        Person.prototype.Context = function () {\n            return mapViewModel.Persons;\n        };\n        return Person;\n    }(Entity));\n    ClientModel.Person = Person;\n    var Job = (function (_super) {\n        __extends(Job, _super);\n        function Job() {\n            _super.apply(this, arguments);\n            this.DueTo = ko.observable(Date);\n            this.AssignedTo = ko.observable();\n            this.AssignedToId = ko.observable();\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n            this.Done = ko.observable();\n            this.SuperJob = ko.observable();\n            this.SuperJobId = ko.observable();\n            this.Trip = ko.observable();\n            this.TripId = ko.observable();\n            this.SubJobs = ko.observableArray();\n        }\n        Job.prototype.Context = function () {\n            return mapViewModel.Jobs;\n        };\n        return Job;\n    }(Entity));\n    ClientModel.Job = Job;\n    var Waypoint = (function (_super) {\n        __extends(Waypoint, _super);\n        function Waypoint(latLng, markerType, Map) {\n            var _this = this;\n            _super.call(this);\n            this.Map = Map;\n            this.WaypointNumber = ko.observable();\n            this.polylines = new Array();\n            this.Latitude = ko.observable(0);\n            this.Longitude = ko.observable(0);\n            this.Distance = ko.observable();\n            this.Precessor = ko.observable();\n            this.RouteDistance = ko.observable();\n            this.RoutePrecessor = ko.observable();\n            this.Name = ko.observable();\n            this.Description = ko.observable();\n            this.Wifis = ko.observableArray();\n            if (Map === undefined) {\n                if (typeof markerType == \"number\") {\n                    Map = latLng;\n                    latLng = markerType;\n                    markerType = Map;\n                }\n                this.Map = (markerType);\n                this.LatLng = new L.LatLng(0, 0);\n                markerType = latLng;\n            }\n            else {\n                this.Latitude(latLng.lat);\n                this.Longitude(latLng.lng);\n            }\n            this.LatLng = new L.LatLng(this.Latitude(), this.Longitude());\n            this.Latitude.subscribe(function (value) {\n                if (_this.LatLng.lat !== value) {\n                    _this.LatLng.lat = value;\n                    _this.Redraw();\n                }\n            });\n            this.Longitude.subscribe(function (value) {\n                if (_this.LatLng.lng !== value) {\n                    _this.LatLng.lng = value;\n                    _this.Redraw();\n                }\n            });\n            this.markerType = markerType;\n            this.LatLng.Polylines = new Array();\n            this.LatLng.Waypoint = this;\n            //this.Latitude.subscribe((value) => {\n            //    if (this.LatLng.lat !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            //this.Longitude.subscribe((value) => {\n            //    if (this.LatLng.lng !== value) {\n            //        this.Redraw();\n            //    }\n            //});\n            this.Precessor.Block = true;\n            this.Distance.Block = true;\n        }\n        Waypoint.prototype.Popup = function (content) {\n            if (this.popup !== undefined) {\n                this.Map.removeLayer(this.popup);\n                this.popup = undefined;\n            }\n            if (content !== undefined) {\n                //this.popup = L.popup();\n                this.marker.bindPopup(content); //.openPopup();\n            }\n        };\n        Waypoint.prototype.Show = function (highlight) {\n            if (highlight === void 0) { highlight = false; }\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\n            if (highlight)\n                $(this.marker._icon).addClass(\"expose\");\n        };\n        Waypoint.prototype.Hide = function () {\n            this.marker.setOpacity(0.1);\n            $(this.marker._icon).removeClass(\"expose\");\n        };\n        Waypoint.prototype.Redraw = function (updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            if (this.marker !== undefined)\n                this.marker.setLatLng(this.LatLng);\n            if (updatePolylines)\n                for (var i = 0; i < this.polylines.length; i++)\n                    redrawPolyline(this.polylines[i]);\n        };\n        Waypoint.prototype.GetConnectedWaypoints = function () {\n            var _this = this;\n            var ret = new Array();\n            for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                var line = _a[_i];\n                for (var _b = 0, _c = line.Waypoints; _b < _c.length; _b++) {\n                    var waypoint = _c[_b];\n                    if (waypoint !== this)\n                        ret.push(waypoint);\n                }\n            }\n            return ret.sort(function (w1, w2) {\n                return w1.LatLng.distanceTo(_this.LatLng) - w2.LatLng.distanceTo(_this.LatLng);\n            });\n        };\n        Waypoint.prototype.convertFromDummyHandle = function () {\n            if (this.markerType !== MarkerType.Dummy)\n                return;\n            this.marker.setOpacity(1);\n            var w1 = this.polylines[0].Waypoints[0];\n            var w2 = this.polylines[0].Waypoints[1];\n            this.markerType = MarkerType.Waypoint;\n            splitPolyline(this.polylines[0]);\n            this.SaveToServer()\n                .done(function (w) {\n                var wCA = ServerApi.WaypointConnections;\n                wCA.Disconnect(w1.Id(), w2.Id());\n                wCA.Connect(w1.Id(), w.Id);\n                wCA.Connect(w2.Id(), w.Id);\n            });\n        };\n        Waypoint.prototype.IsInPolyline = function (polyline) {\n            for (var _i = 0, _a = polyline.Waypoints; _i < _a.length; _i++) {\n                var wp = _a[_i];\n                if (this === wp)\n                    return true;\n            }\n            return false;\n        };\n        Waypoint.prototype.RemoveFromMap = function () {\n            if (this.markerType !== MarkerType.Dummy)\n                for (var _i = 0, _a = this.polylines; _i < _a.length; _i++) {\n                    var polyline = _a[_i];\n                    removePolyline(polyline);\n                }\n            this.Map.removeLayer(this.marker);\n        };\n        Waypoint.prototype.AddToPolyline = function (polyline) {\n            if (this.IsInPolyline(polyline))\n                return false;\n            if (!this.IsDummy() && polyline.DummyHandle !== this) {\n                polyline.Waypoints.push(this);\n                polyline.addLatLng(this.LatLng);\n                polyline.redraw();\n            }\n            if (this.polylines[0] !== polyline) {\n                this.LatLng.Polylines.push(polyline);\n                this.polylines.push(polyline);\n            }\n            //ServerApi.WaypointConnectionApi.GetDefault().\n            return true;\n        };\n        Waypoint.prototype.RemoveFromPolyline = function (polyline) {\n            //if (!this.IsInPolyline(polyline))\n            //    return false;\n            removeFromArray(polyline.Waypoints, this);\n            removeFromArray(this.polylines, polyline);\n            removeFromArray(this.LatLng.Polylines, polyline);\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\n            polyline.redraw();\n            return true;\n        };\n        Waypoint.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return true;\n        };\n        Waypoint.prototype.SetLatLng = function (latLng, updatePolylines) {\n            if (updatePolylines === void 0) { updatePolylines = true; }\n            this.LatLng.lat = latLng.lat;\n            this.LatLng.lng = latLng.lng;\n            this.Latitude(latLng.lat);\n            this.Longitude(latLng.lng);\n            this.Redraw(updatePolylines);\n        };\n        Waypoint.prototype.CenterOnMap = function () {\n            this.Map.setView(this.LatLng);\n        };\n        Waypoint.prototype.IsDummy = function () {\n            return this.markerType === MarkerType.Dummy;\n        };\n        Waypoint.prototype.Context = function () {\n            return mapViewModel.Waypoints;\n        };\n        Waypoint.prototype.DeleteOnServer = function () {\n            var _this = this;\n            return _super.prototype.DeleteOnServer.call(this).done(function () { return _this.RemoveFromMap(); });\n        };\n        return Waypoint;\n    }(Entity));\n    ClientModel.Waypoint = Waypoint;\n    var Harbour = (function (_super) {\n        __extends(Harbour, _super);\n        function Harbour(latLng, map) {\n            var _this = this;\n            _super.call(this, latLng, MarkerType.Harbour, map);\n            this.Album = ko.observable(new Album());\n            this.Locations = ko.observableArray();\n            this.Rating = ko.observable();\n            this.Content = ko.observable();\n            this.Website = ko.observable();\n            //if (map)\n            //this.Distance.subscribe((d) => {\n            //    const label = this.marker.getLabel();\n            //    if (d > 0) {\n            //        if (label !== undefined) {\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\n            //        } else {\n            //            this.marker.bindLabel(d.toString() + \" km\",\n            //                <any>{\n            //                    direction: \"auto\"\n            //                });\n            //        }\n            //    } else if (label !== undefined) {\n            //        this.marker.unbindLabel();\n            //    }\n            //});\n            this.Name.subscribe(function (d) {\n                if (_this.marker !== undefined) {\n                    var label = _this.marker.getLabel();\n                    if (label !== undefined) {\n                        _this.marker.updateLabelContent(d);\n                    }\n                    else {\n                        _this.marker.bindLabel(d, {\n                            direction: \"auto\"\n                        });\n                    }\n                }\n            });\n        }\n        Harbour.prototype.RemoveIfHasZeroOrOnePolylines = function () {\n            return false;\n        };\n        Harbour.prototype.Context = function () {\n            return mapViewModel.Harbours;\n        };\n        return Harbour;\n    }(Waypoint));\n    ClientModel.Harbour = Harbour;\n    var Address = (function (_super) {\n        __extends(Address, _super);\n        function Address() {\n            _super.apply(this, arguments);\n            this.Street = ko.observable();\n            this.Zip = ko.observable();\n            this.Town = ko.observable();\n            this.Comment = ko.observable();\n        }\n        Address.prototype.Context = function () {\n            return mapViewModel.Addresses;\n        };\n        return Address;\n    }(Entity));\n    ClientModel.Address = Address;\n    var Image = (function (_super) {\n        __extends(Image, _super);\n        function Image() {\n            _super.apply(this, arguments);\n            this.Path = ko.observable();\n            this.Height = ko.observable();\n            this.Width = ko.observable();\n        }\n        Image.prototype.Context = function () {\n            return mapViewModel.Images;\n        };\n        return Image;\n    }(Entity));\n    ClientModel.Image = Image;\n    var TackBase = (function (_super) {\n        __extends(TackBase, _super);\n        function TackBase() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.StartDate = ko.observable();\n            this.EndDate = ko.observable();\n            this.Start = ko.observable();\n            this.StartId = ko.observable();\n            this.EndId = ko.observable();\n            this.End = ko.observable();\n            this.Persons = ko.observableArray();\n            this.Distance = ko.observable(0);\n            this.Album = ko.observable(new Album());\n            this.CrewList = ko.computed({\n                read: function () {\n                    var persons = _this.Persons();\n                    var first = persons[0];\n                    if (first === undefined)\n                        return \"\";\n                    if (persons.length === 1)\n                        return first.FullName();\n                    else {\n                        var list = first.FullName();\n                        for (var i = 1; i < persons.length; i++) {\n                            list += \", \" + persons[i].FullName();\n                        }\n                        return list;\n                    }\n                },\n                deferEvaluation: true\n            });\n            this.SaillingTime = ko.computed(function () {\n                var startDate = _this.StartDate();\n                var endDate = _this.EndDate();\n                if (startDate === undefined || endDate === undefined || renderTime === undefined)\n                    return \"\";\n                return renderTime(new Date(startDate), new Date(endDate));\n            });\n        }\n        return TackBase;\n    }(Entity));\n    ClientModel.TackBase = TackBase;\n    var Trip = (function (_super) {\n        __extends(Trip, _super);\n        function Trip() {\n            _super.apply(this, arguments);\n            this.Name = ko.observable();\n            this.Content = ko.observable();\n            this.Tacks = ko.observableArray();\n            this.IsDummy = ko.observable();\n        }\n        Trip.prototype.Context = function () {\n            return mapViewModel.Trips;\n        };\n        return Trip;\n    }(TackBase));\n    ClientModel.Trip = Trip;\n    var LogBookEntry = (function (_super) {\n        __extends(LogBookEntry, _super);\n        function LogBookEntry() {\n            _super.apply(this, arguments);\n            this.MotorHoursStart = ko.observable();\n            this.MotorHoursEnd = ko.observable();\n            this.LogStart = ko.observable();\n            this.LogEnd = ko.observable();\n            this.WindSpeed = ko.observable();\n            this.WindDirection = ko.observable();\n            this.SpecialOccurences = ko.observable();\n        }\n        LogBookEntry.prototype.Context = function () {\n            return mapViewModel.LogBookEntries;\n        };\n        return LogBookEntry;\n    }(TackBase));\n    ClientModel.LogBookEntry = LogBookEntry;\n    var Tack = (function (_super) {\n        __extends(Tack, _super);\n        function Tack() {\n            var _this = this;\n            _super.apply(this, arguments);\n            this.Waypoints = ko.observableArray();\n            this.CanRemoveTack = ko.computed({\n                read: function () {\n                    if (mapViewModel.TripHelper.Editing() === undefined)\n                        return false;\n                    var tacks = mapViewModel.TripHelper.Editing().Tacks;\n                    var index = tacks.indexOf(_this);\n                    var prevTack = tacks()[index - 1];\n                    var nextTack = tacks()[index + 1];\n                    if (prevTack !== undefined)\n                        if (nextTack !== undefined)\n                            return prevTack.Start() !== nextTack.Start();\n                        else\n                            return true;\n                    else\n                        return nextTack !== undefined;\n                },\n                deferEvaluation: true\n            });\n            this.ComputePlaceholder = ko.computed(function () {\n                if (_this.StartDate() !== undefined)\n                    return moment(_this.StartDate()).format(\"L\");\n                return \"\";\n            });\n        }\n        Tack.prototype.Context = function () {\n            return mapViewModel.Tacks;\n        };\n        return Tack;\n    }(TackBase));\n    ClientModel.Tack = Tack;\n    var Comment = (function (_super) {\n        __extends(Comment, _super);\n        function Comment() {\n            _super.apply(this, arguments);\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n            this.Rating = ko.observable();\n            this.ParentId = ko.observable();\n        }\n        Comment.prototype.Context = function () {\n            throw \"not implemented\";\n        };\n        return Comment;\n    }(Entity));\n    ClientModel.Comment = Comment;\n    var Location = (function (_super) {\n        __extends(Location, _super);\n        function Location() {\n            _super.apply(this, arguments);\n            this.HarbourId = ko.observable();\n            this.Website = ko.observable();\n            this.Name = ko.observable();\n            this.Rating = ko.observable();\n            this.Address = ko.observable();\n            this.AddressId = ko.observable();\n        }\n        Location.prototype.Context = function () {\n            return mapViewModel.Locations;\n        };\n        return Location;\n    }(Entity));\n    ClientModel.Location = Location;\n    var Restaurant = (function (_super) {\n        __extends(Restaurant, _super);\n        function Restaurant() {\n            _super.apply(this, arguments);\n        }\n        return Restaurant;\n    }(Location));\n    ClientModel.Restaurant = Restaurant;\n    var Supermarket = (function (_super) {\n        __extends(Supermarket, _super);\n        function Supermarket() {\n            _super.apply(this, arguments);\n        }\n        return Supermarket;\n    }(Location));\n    ClientModel.Supermarket = Supermarket;\n    var WaypointDistance = (function () {\n        function WaypointDistance(Precessor, Waypoint, Distance, calculaterdWaypoints, calculateRoute) {\n            this.Precessor = Precessor;\n            this.Waypoint = Waypoint;\n            this.Distance = Distance;\n            this.ConnectedWayPoints = new Array();\n            this.ConnectedDistances = new Array();\n            this.LatLng = Waypoint.LatLng;\n            calculaterdWaypoints.push(Waypoint);\n            for (var _i = 0, _a = Waypoint.GetConnectedWaypoints(); _i < _a.length; _i++) {\n                var wp = _a[_i];\n                if (calculaterdWaypoints.indexOf(wp) === -1)\n                    this.ConnectedWayPoints.push(wp);\n            }\n            if (calculateRoute) {\n                Waypoint.RoutePrecessor(Precessor);\n                Waypoint.RouteDistance(Distance);\n            }\n            else {\n                Waypoint.Precessor(Precessor);\n                Waypoint.Distance(Distance);\n            }\n        }\n        return WaypointDistance;\n    }());\n    ClientModel.WaypointDistance = WaypointDistance;\n    var Wifi = (function (_super) {\n        __extends(Wifi, _super);\n        function Wifi() {\n            _super.apply(this, arguments);\n            this.Name = ko.observable();\n            this.Password = ko.observable();\n            this.Speed = ko.observable();\n            this.Free = ko.observable();\n            this.HarbourId = ko.observable();\n            this.Harbour = ko.observable();\n        }\n        Wifi.prototype.Context = function () {\n            return mapViewModel.Wifis;\n        };\n        return Wifi;\n    }(Entity));\n    ClientModel.Wifi = Wifi;\n    var ContentPage = (function (_super) {\n        __extends(ContentPage, _super);\n        function ContentPage() {\n            _super.apply(this, arguments);\n            this.Title = ko.observable();\n            this.Content = ko.observable();\n        }\n        ContentPage.prototype.Context = function () {\n            return mapViewModel.ContentPages;\n        };\n        return ContentPage;\n    }(Entity));\n    ClientModel.ContentPage = ContentPage;\n})(ClientModel || (ClientModel = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[MarkerType[\"Harbour\"] = 0] = \"Harbour\";\n    MarkerType[MarkerType[\"Dummy\"] = 1] = \"Dummy\";\n    MarkerType[MarkerType[\"Waypoint\"] = 2] = \"Waypoint\";\n    MarkerType[MarkerType[\"WeatherStation\"] = 3] = \"WeatherStation\";\n})(MarkerType || (MarkerType = {}));\n\n","module ClientModel {\r\n\r\n    import SEntity = ServerModel.Entity\r\n\r\n    export interface IEntity {\r\n        Id: KnockoutObservable<number>;\r\n        ClientId: number;\r\n    }\r\n\r\n    export abstract class Entity implements IEntity {\r\n        constructor() {\r\n            Entity.entityDb[this.ClientId.toString()] = this;\r\n        }\r\n\r\n        AlbumId = ko.observable<number>();\r\n        CommentListId = ko.observable<number>();\r\n        Album = CreateObservable<Album>({\r\n            ForeignKey: (t: this) => t.AlbumId\r\n        });\r\n        InsertDate = ko.observable<number>(Date as any);\r\n        UpdateDate = ko.observable<number>(Date as any);\r\n\r\n        private static clientIdCounter = 0;\r\n        private static entityDb = {};\r\n\r\n        ClientId = Entity.clientIdCounter++;\r\n\r\n        protected ServerApi = ServerApi.GetApi(this);\r\n\r\n        DeleteOnServer(): JQueryPromise<SEntity> {\r\n            return this.ServerApi.Delete(this.Id()).done(() => { this.removeFromContext(); });\r\n        };\r\n\r\n        SaveToServer(): JQueryPromise<SEntity> {\r\n            if (this.Id() === undefined)\r\n                return this.ServerApi.Create(this.ConvertToServerEntity())\r\n                    .done(data => {\r\n                        this.savedStates=[];\r\n                        this.LoadFromServerEntity(data);\r\n                        this.addToContext();\r\n                    });\r\n            return this.ServerApi.Update(this.ConvertToServerEntity())\r\n                .done((data) => {\r\n                    this.savedStates=[];\r\n                    this.LoadFromServerEntity(data);\r\n                });;\r\n        }\r\n\r\n        private addToContext() {\r\n            if (this.Context().indexOf(this) !== -1)\r\n                return;\r\n            this.Context().push(this);\r\n        }\r\n\r\n        private removeFromContext() {\r\n            this.Context().remove(this);\r\n        }\r\n        \r\n        LoadFromServerEntity(serverEntity: SEntity): this {\r\n            if (serverEntity.ProcessOnServer === false)\r\n                return this;\r\n            for (let prop of this.GetObservableNames()) {\r\n                const sVal = serverEntity[prop];\r\n                if (sVal !== undefined && sVal !== null) {\r\n                    if (sVal instanceof Array) {\r\n                        for (let obj of sVal) {\r\n                            const entity = Entity.entityDb[obj.ClientId.toString()];\r\n                            if (entity !== undefined)\r\n                                entity.LoadFromServerEntity(obj);\r\n                        }\r\n                    } else {\r\n                        const cVal = this[prop]();\r\n                        if (cVal instanceof Entity)\r\n                            cVal.LoadFromServerEntity(sVal);\r\n                        else\r\n                            this[prop](sVal);\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        ConvertToServerEntity(idOnly: boolean = false): SEntity {\r\n            if (idOnly) {\r\n                return { Id: this.Id(), ProcessOnServer: false };\r\n            }\r\n            const isUpdate = this.Id() !== undefined;\r\n            const serverEntity = { ClientId: this.ClientId };\r\n            const entity = this;\r\n            for (let propName of this.GetObservableNames()) {\r\n                const prop = entity[propName];\r\n                const val = prop();\r\n                if (val !== undefined) {\r\n                    if (val instanceof Array) {\r\n                        const arr = new Array();\r\n                        for (let elem of val as Entity[]) {\r\n                            if (elem.Id() === undefined ||\r\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\r\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include)\r\n                                arr.push(elem.ConvertToServerEntity());\r\n                        }\r\n                        serverEntity[propName] = arr;\r\n                    } else\r\n                        serverEntity[propName] = val instanceof Entity\r\n                            ? (val.Id() === undefined ||\r\n                                isUpdate && prop.UpdateTransferMode === TransferMode.Include ||\r\n                                !isUpdate && prop.AddTransferMode === TransferMode.Include\r\n                                ? val.ConvertToServerEntity()\r\n                                : undefined)\r\n                            : val;\r\n                }\r\n            }\r\n            return serverEntity as any;\r\n        }\r\n\r\n        CopyTo(entity: this) {\r\n            entity.Id(this.Id());\r\n        }\r\n\r\n        private savedStates=new Array();\r\n\r\n        SaveState= (alreadySavedEntities = new Array<Entity>()) => {\r\n            const savedState = new Object();\r\n            if (alreadySavedEntities.indexOf(this) !== -1)\r\n                return;\r\n            alreadySavedEntities.push(this);\r\n            for (let prop of this.GetObservableNames()) {\r\n                let val = ko.unwrap(this[prop]);\r\n                if (val instanceof Array) {\r\n                    val = val.slice(0);\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.SaveState(alreadySavedEntities);\r\n                    }\r\n                } else if (val instanceof Entity)\r\n                    val.SaveState(alreadySavedEntities);\r\n                savedState[prop] = val;\r\n            }\r\n            this.savedStates.push(savedState);\r\n        }\r\n\r\n        protected GetObservableNames(): string[] {\r\n            const out = new Array<string>();\r\n            const entity = this;\r\n            for (let prop in entity)\r\n                if (entity.hasOwnProperty(prop))\r\n                    if (ko.isWriteableObservable(entity[prop]) && !entity[prop].Block)\r\n                        out.push(prop);\r\n            return out;\r\n        }\r\n\r\n        RevertState = (ignoreError: boolean = false, alreadyRevertedEntities = new Array<Entity>()) => {\r\n            if (alreadyRevertedEntities.indexOf(this) !== -1)\r\n                return;\r\n            alreadyRevertedEntities.push(this);\r\n            if (this.savedStates.length=== 0)\r\n                if (ignoreError)\r\n                    return;\r\n                else\r\n                    throw \"No saved state\";\r\n            for (let prop of this.GetObservableNames()) {\r\n                const val = this.savedStates[0][prop];\r\n                //this.savedState[prop] = val;\r\n                this[prop](val);\r\n                if (val instanceof Entity)\r\n                    val.RevertState(ignoreError, alreadyRevertedEntities);\r\n                else if (val instanceof Array)\r\n                    for (let elem of val) {\r\n                        if (elem instanceof Entity)\r\n                            elem.RevertState(ignoreError, alreadyRevertedEntities);\r\n                    }\r\n            }\r\n            this.savedStates.shift();\r\n        }\r\n\r\n        Id = ko.observable<number>();\r\n\r\n        abstract Context(): KnockoutObservableArray<this>;\r\n    }\r\n\r\n    export class Album extends Entity {\r\n        Images = ko.observableArray<Image>();\r\n\r\n        Context() {\r\n            return mapViewModel.Albums as any;\r\n        }\r\n    }\r\n\r\n    export class Person extends Entity {\r\n        LastName = ko.observable<string>();\r\n        FirstName = ko.observable<string>();\r\n        FullName = ko.computed(() => this.FirstName() + \" \" + this.LastName());\r\n\r\n        Context() {\r\n            return mapViewModel.Persons as any;\r\n        }\r\n\r\n    }\r\n\r\n    export class Job extends Entity {\r\n        DueTo = ko.observable<Date>(Date as any);\r\n        AssignedTo = ko.observable<Person>();\r\n        AssignedToId = ko.observable<number>();\r\n        Title = ko.observable<String>();\r\n        Content = ko.observable<String>();\r\n        Done = ko.observable<boolean>();\r\n        SuperJob = ko.observable<Job>();\r\n        SuperJobId = ko.observable<number>();\r\n        Trip = ko.observable<Trip>();\r\n        TripId = ko.observable<number>();\r\n        SubJobs = ko.observableArray<Job>();\r\n\r\n        Context() {\r\n            return mapViewModel.Jobs as any;\r\n        }\r\n    }\r\n\r\n    export class Waypoint extends Entity {\r\n        constructor(latLng: L.LatLng, markerType: MarkerType, map: L.mapbox.Map);\r\n        constructor(markerType: MarkerType, map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng | MarkerType,\r\n            markerType: MarkerType | L.mapbox.Map,\r\n            protected Map?: L.mapbox.\r\n            Map) {\r\n            super();\r\n            if (Map === undefined) {\r\n                if (typeof markerType == \"number\") {\r\n                    Map = ((latLng as any) as L.mapbox.Map);\r\n                    latLng = (markerType as MarkerType);\r\n                    markerType = Map;\r\n                }\r\n                this.Map = ((markerType) as L.mapbox.Map);\r\n                this.LatLng = new L.LatLng(0, 0);\r\n                markerType = (latLng as MarkerType);\r\n            } else {\r\n                this.Latitude((latLng as L.LatLng).lat);\r\n                this.Longitude((latLng as L.LatLng).lng);\r\n            }\r\n            this.LatLng = new L.LatLng(this.Latitude(), this.Longitude());\r\n            this.Latitude.subscribe((value) => {\r\n                if (this.LatLng.lat !== value) {\r\n                    this.LatLng.lat = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.Longitude.subscribe((value) => {\r\n                if (this.LatLng.lng !== value) {\r\n                    this.LatLng.lng = value;\r\n                    this.Redraw();\r\n                }\r\n            });\r\n            this.markerType = markerType;\r\n            this.LatLng.Polylines = new Array();\r\n            this.LatLng.Waypoint = this;\r\n            //this.Latitude.subscribe((value) => {\r\n            //    if (this.LatLng.lat !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            //this.Longitude.subscribe((value) => {\r\n            //    if (this.LatLng.lng !== value) {\r\n            //        this.Redraw();\r\n            //    }\r\n            //});\r\n            this.Precessor.Block = true;\r\n            this.Distance.Block = true;\r\n        }\r\n\r\n        Popup(content: string);\r\n        Popup();\r\n        Popup(content?: string) {\r\n            if (this.popup !== undefined) {\r\n                this.Map.removeLayer(this.popup);\r\n                this.popup = undefined;\r\n            }\r\n            if (content !== undefined) {\r\n                //this.popup = L.popup();\r\n                this.marker.bindPopup(content); //.openPopup();\r\n\r\n\r\n            }\r\n        }\r\n\r\n\r\n        Show(highlight: boolean = false): void {\r\n            this.marker.setOpacity(this.marker.Waypoint.IsDummy() ? 0.5 : 1);\r\n            if (highlight)\r\n                $(this.marker._icon).addClass(\"expose\");\r\n        }\r\n\r\n        Hide(): void {\r\n            this.marker.setOpacity(0.1);\r\n            $(this.marker._icon).removeClass(\"expose\");\r\n        }\r\n\r\n        Redraw(updatePolylines = true): void {\r\n            if (this.marker !== undefined)\r\n                this.marker.setLatLng(this.LatLng);\r\n            if (updatePolylines)\r\n                for (let i = 0; i < this.polylines.length; i++)\r\n                    redrawPolyline(this.polylines[i]);\r\n        }\r\n\r\n        GetConnectedWaypoints(): Waypoint[] {\r\n            const ret = new Array<Waypoint>();\r\n            for (let line of this.polylines) {\r\n                for (let waypoint of line.Waypoints) {\r\n                    if (waypoint !== this)\r\n                        ret.push(waypoint);\r\n                }\r\n            }\r\n            return ret.sort((w1, w2) => {\r\n                return w1.LatLng.distanceTo(this.LatLng) - w2.LatLng.distanceTo(this.LatLng);\r\n            });\r\n        }\r\n\r\n        convertFromDummyHandle() {\r\n            if (this.markerType !== MarkerType.Dummy)\r\n                return;\r\n            this.marker.setOpacity(1);\r\n            var w1 = this.polylines[0].Waypoints[0];\r\n            var w2 = this.polylines[0].Waypoints[1];\r\n            this.markerType = MarkerType.Waypoint;\r\n            splitPolyline(this.polylines[0]);\r\n            this.SaveToServer()\r\n                .done((w) => {\r\n                    const wCA = ServerApi.WaypointConnections;\r\n                    wCA.Disconnect(w1.Id(), w2.Id());\r\n                    wCA.Connect(w1.Id(), w.Id);\r\n                    wCA.Connect(w2.Id(), w.Id);\r\n                });\r\n        }\r\n\r\n        IsInPolyline(polyline: L.Polyline): boolean {\r\n            for (const wp of polyline.Waypoints) {\r\n                if (this === wp)\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        RemoveFromMap() {\r\n            if (this.markerType !== MarkerType.Dummy)\r\n                for (let polyline of this.polylines)\r\n                    removePolyline(polyline);\r\n            this.Map.removeLayer(this.marker);\r\n        }\r\n\r\n        AddToPolyline(polyline: L.Polyline): boolean {\r\n            if (this.IsInPolyline(polyline))\r\n                return false;\r\n            if (!this.IsDummy() && polyline.DummyHandle !== this) {\r\n                polyline.Waypoints.push(this);\r\n                polyline.addLatLng(this.LatLng);\r\n                polyline.redraw();\r\n            }\r\n            if (this.polylines[0] !== polyline) {\r\n                this.LatLng.Polylines.push(polyline);\r\n                this.polylines.push(polyline);\r\n            }\r\n            //ServerApi.WaypointConnectionApi.GetDefault().\r\n            return true;\r\n        }\r\n\r\n        RemoveFromPolyline(polyline: L.Polyline): boolean {\r\n            //if (!this.IsInPolyline(polyline))\r\n            //    return false;\r\n            removeFromArray(polyline.Waypoints, this);\r\n            removeFromArray(this.polylines, polyline);\r\n            removeFromArray(this.LatLng.Polylines, polyline);\r\n            removeFromArray(polyline.getLatLngs(), this.LatLng);\r\n            polyline.redraw();\r\n            return true;\r\n        }\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return true;\r\n        }\r\n\r\n        WaypointNumber = ko.observable<number>();\r\n        private polylines = new Array<L.Polyline>();\r\n\r\n\r\n        SetLatLng(latLng: L.LatLng, updatePolylines = true): void {\r\n            this.LatLng.lat = latLng.lat;\r\n            this.LatLng.lng = latLng.lng;\r\n            this.Latitude(latLng.lat);\r\n            this.Longitude(latLng.lng);\r\n            this.Redraw(updatePolylines);\r\n        }\r\n\r\n        CenterOnMap() {\r\n            this.Map.setView(this.LatLng);\r\n        }\r\n\r\n        IsDummy(): boolean {\r\n            return this.markerType === MarkerType.Dummy;\r\n        }\r\n\r\n        Latitude = ko.observable<number>(0);\r\n        Longitude = ko.observable<number>(0);\r\n        Distance = ko.observable<number>();\r\n        Precessor = ko.observable<Waypoint>();\r\n        RouteDistance = ko.observable<number>();\r\n        RoutePrecessor = ko.observable<Waypoint>();\r\n        protected popup: L.Popup;\r\n        LatLng: L.LatLng;\r\n        protected markerType: MarkerType | L.mapbox.Map;\r\n        marker: L.Marker;\r\n\r\n        Name = ko.observable<string>();\r\n        Description = ko.observable<string>();\r\n        Wifis = ko.observableArray<Wifi>();\r\n\r\n        Context() {\r\n            return mapViewModel.Waypoints as any;\r\n        }\r\n\r\n        DeleteOnServer(): JQueryPromise<Object> {\r\n            return super.DeleteOnServer().done(() => this.RemoveFromMap());\r\n        }\r\n    }\r\n\r\n    export class Harbour extends Waypoint {\r\n\r\n        constructor(map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng, map: L.mapbox.Map);\r\n        constructor(latLng: L.LatLng | L.mapbox.Map, map?: L.mapbox.Map) {\r\n            super(latLng as L.LatLng, MarkerType.Harbour, map);\r\n            //if (map)\r\n            //this.Distance.subscribe((d) => {\r\n            //    const label = this.marker.getLabel();\r\n            //    if (d > 0) {\r\n            //        if (label !== undefined) {\r\n            //            this.marker.updateLabelContent(d.toString() + \" km\");\r\n            //        } else {\r\n            //            this.marker.bindLabel(d.toString() + \" km\",\r\n            //                <any>{\r\n            //                    direction: \"auto\"\r\n            //                });\r\n            //        }\r\n            //    } else if (label !== undefined) {\r\n            //        this.marker.unbindLabel();\r\n            //    }\r\n            //});\r\n            this.Name.subscribe((d) => {\r\n                if (this.marker !== undefined) {\r\n                    const label = this.marker.getLabel();\r\n                    if (label !== undefined) {\r\n                        this.marker.updateLabelContent(d);\r\n                    } else {\r\n                        this.marker.bindLabel(d,\r\n                        {\r\n                            direction: \"auto\"\r\n                        } as any);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        Album = ko.observable(new Album());\r\n\r\n        RemoveIfHasZeroOrOnePolylines(): boolean {\r\n            return false;\r\n        }\r\n\r\n        Locations = ko.observableArray<Location>();\r\n        Rating = ko.observable<number>();\r\n        Content = ko.observable<string>();\r\n        Website = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.Harbours as any;\r\n        }\r\n    }\r\n\r\n    export class Address extends Entity {\r\n        Street = ko.observable<string>();\r\n        Zip = ko.observable<string>();\r\n        Town = ko.observable<string>();\r\n        Comment = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.Addresses as any;\r\n        }\r\n    }\r\n\r\n    export class Image extends Entity {\r\n\r\n        Path = ko.observable<string>();\r\n        Height = ko.observable<number>();\r\n        Width = ko.observable<number>();\r\n\r\n        Context() {\r\n            return mapViewModel.Images as any;\r\n        }\r\n    }\r\n\r\n    export abstract class TackBase extends Entity {\r\n        StartDate = ko.observable<string>();\r\n        EndDate = ko.observable<string>();\r\n        Start = ko.observable<Harbour>();\r\n        StartId = ko.observable<number>();\r\n        EndId = ko.observable<number>();\r\n        End = ko.observable<Harbour>();\r\n        Persons = ko.observableArray<Person>();\r\n        Distance = ko.observable<number>(0);\r\n        Album = ko.observable(new Album());\r\n\r\n        CrewList = ko.computed({\r\n            read: () => {\r\n                var persons = this.Persons();\r\n                var first = persons[0];\r\n                if (first === undefined)\r\n                    return \"\";\r\n                if (persons.length === 1)\r\n                    return first.FullName();\r\n                else {\r\n                    let list = first.FullName();\r\n                    for (let i = 1; i < persons.length; i++) {\r\n                        list += `, ${persons[i].FullName()}`;\r\n                    }\r\n                    return list;\r\n                }\r\n            },\r\n            deferEvaluation: true\r\n\r\n        });\r\n\r\n        SaillingTime = ko.computed(() => {\r\n            const startDate = this.StartDate();\r\n            const endDate = this.EndDate();\r\n            if (startDate === undefined || endDate === undefined || renderTime === undefined)\r\n                return \"\";\r\n            return renderTime(new Date(startDate), new Date(endDate));\r\n        });\r\n    }\r\n\r\n    export class Trip extends TackBase {\r\n        Name = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n        Tacks = ko.observableArray<Tack>();\r\n        IsDummy = ko.observable<boolean>();\r\n\r\n        Context() {\r\n            return mapViewModel.Trips as any;\r\n        }\r\n    }\r\n\r\n    export class LogBookEntry extends TackBase {\r\n        MotorHoursStart = ko.observable<number>();\r\n        MotorHoursEnd = ko.observable<number>();\r\n        LogStart = ko.observable<number>();\r\n        LogEnd = ko.observable<number>();\r\n        WindSpeed = ko.observable<number>();\r\n        WindDirection = ko.observable<string>();\r\n        SpecialOccurences = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.LogBookEntries as any;\r\n        }\r\n\r\n    }\r\n\r\n    export class Tack extends TackBase {\r\n        Waypoints = ko.observableArray<ServerModel.WaypointTack>();\r\n\r\n        CanRemoveTack = ko.computed({\r\n            read: () => {\r\n                if (mapViewModel.TripHelper.Editing() === undefined)\r\n                    return false;\r\n                const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n                const index = tacks.indexOf(this);\r\n                const prevTack = tacks()[index - 1];\r\n                const nextTack = tacks()[index + 1];\r\n                if (prevTack !== undefined)\r\n                    if (nextTack !== undefined)\r\n                        return prevTack.Start() !== nextTack.Start();\r\n                    else\r\n                        return true;\r\n                else\r\n                    return nextTack !== undefined;\r\n            },\r\n            deferEvaluation: true\r\n        });\r\n\r\n        ComputePlaceholder = ko.computed((): string => {\r\n            if (this.StartDate() !== undefined)\r\n                return moment(this.StartDate()).format(\"L\");\r\n            return \"\";\r\n        });\r\n\r\n        Context() {\r\n            return mapViewModel.Tacks as any;\r\n        }\r\n\r\n    }\r\n\r\n    export class Comment extends Entity {\r\n        Title = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n        Rating = ko.observable<number>();\r\n        ParentId = ko.observable<number>();\r\n\r\n        Context():KnockoutObservableArray<Comment> {\r\n            throw \"not implemented\";\r\n        }\r\n\r\n    }\r\n\r\n    export class Location extends Entity {\r\n        HarbourId = ko.observable<number>();\r\n        Website = ko.observable<string>();\r\n        Name = ko.observable<string>();\r\n        Rating = ko.observable<number>();\r\n        Address = ko.observable<Address>();\r\n        AddressId = ko.observable<number>();\r\n\r\n        Context() {\r\n            return mapViewModel.Locations as any;\r\n        }\r\n    }\r\n\r\n    export class Restaurant extends Location {\r\n    }\r\n\r\n\r\n    export class Supermarket extends Location {\r\n    }\r\n\r\n\r\n    export class WaypointDistance {\r\n        constructor(public Precessor: Waypoint,\r\n            public Waypoint: Waypoint,\r\n            public Distance: number,\r\n            calculaterdWaypoints: Waypoint[],\r\n            calculateRoute: boolean) {\r\n            this.LatLng = Waypoint.LatLng;\r\n            calculaterdWaypoints.push(Waypoint);\r\n            for (let wp of Waypoint.GetConnectedWaypoints()) {\r\n                if (calculaterdWaypoints.indexOf(wp) === -1)\r\n                    this.ConnectedWayPoints.push(wp);\r\n            }\r\n            if (calculateRoute) {\r\n                Waypoint.RoutePrecessor(Precessor);\r\n                Waypoint.RouteDistance(Distance);\r\n            } else {\r\n                Waypoint.Precessor(Precessor);\r\n                Waypoint.Distance(Distance);\r\n            }\r\n        }\r\n\r\n        ConnectedWayPoints = new Array<Waypoint>();\r\n        ConnectedDistances = new Array<WaypointDistance>();\r\n        LatLng: L.LatLng;\r\n    }\r\n\r\n    export class Wifi extends Entity {\r\n        Name = ko.observable<string>();\r\n        Password = ko.observable<string>();\r\n        Speed = ko.observable<number>();\r\n        Free = ko.observable<boolean>();\r\n        HarbourId = ko.observable<number>();\r\n        Harbour = ko.observable<Harbour>();\r\n\r\n        Context() {\r\n            return mapViewModel.Wifis as any;\r\n        }\r\n    }\r\n\r\n    export class ContentPage extends Entity {\r\n        Title = ko.observable<string>();\r\n        Content = ko.observable<string>();\r\n\r\n        Context() {\r\n            return mapViewModel.ContentPages as any;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nenum MarkerType {\r\n    Harbour,\r\n    Dummy,\r\n    Waypoint,\r\n    WeatherStation\r\n}"],"sourceRoot":"/source/"}