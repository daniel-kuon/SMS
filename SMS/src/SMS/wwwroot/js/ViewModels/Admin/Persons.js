var personDeails = $("#personDetails");
var Person = ClientModel.Person;
var deletePerson = $("#deletePerson");
var adminPersonViewModel;
var AdminPersonViewModel;
(function (AdminPersonViewModel) {
    var Person = ClientModel.Person;
    var Model = (function () {
        function Model() {
            var _this = this;
            this.People = ko.observableArray();
            this.CurrentPerson = ko.observable(new Person());
            this.PersonApi = ServerApi.Persons;
            this.NewPerson = ko.computed(function () { return _this.CurrentPerson().Id() === undefined; });
            this.PersonApi.Get()
                .done(function (data) {
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var person = data_1[_i];
                    _this.People.push(new Person().LoadFromServerEntity(person));
                }
            });
        }
        Model.prototype.SavePerson = function () {
            adminPersonViewModel.CurrentPerson().SaveToServer().done(function () {
                personDeails.modal("hide");
                adminPersonViewModel.People.push(adminPersonViewModel.CurrentPerson());
                adminPersonViewModel.CurrentPerson(new Person());
            });
        };
        Model.prototype.CancelEditPerson = function () {
            adminPersonViewModel.CurrentPerson().RevertState(true);
            adminPersonViewModel.CurrentPerson(new Person());
            personDeails.modal("hide");
        };
        Model.prototype.DeletePerson = function () {
            adminPersonViewModel.CurrentPerson()
                .DeleteOnServer()
                .done(function () {
                adminPersonViewModel.People.remove(adminPersonViewModel.CurrentPerson());
                deletePerson.modal("hide");
                adminPersonViewModel.CurrentPerson(undefined);
            });
        };
        Model.prototype.AddPerson = function () {
            adminPersonViewModel.CurrentPerson(new Person());
            adminPersonViewModel.People.push(adminPersonViewModel.CurrentPerson());
            adminPersonViewModel.SavePerson();
        };
        Model.prototype.SelectPerson = function (person) {
            adminPersonViewModel.CurrentPerson(person);
            person.SaveState();
        };
        return Model;
    }());
    AdminPersonViewModel.Model = Model;
})(AdminPersonViewModel || (AdminPersonViewModel = {}));
adminPersonViewModel = new AdminPersonViewModel.Model();
ko.applyBindings(adminPersonViewModel);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXdNb2RlbHMvQWRtaW4vUGVyc29ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2QyxJQUFPLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDO0FBR25DLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN0QyxJQUFJLG9CQUFnRCxDQUFDO0FBR3JELElBQU8sb0JBQW9CLENBd0QxQjtBQXhERCxXQUFPLG9CQUFvQixFQUFDLENBQUM7SUFDekIsSUFBTyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUVuQztRQUNJO1lBREosaUJBb0RDO1lBekNHLFdBQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFVLENBQUM7WUFDdEMsa0JBQWEsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQztZQUM1QyxjQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQztZQVYxQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQVUsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxTQUFTLEVBQXZDLENBQXVDLENBQUMsQ0FBQztZQUNyRixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtpQkFDZixJQUFJLENBQUMsVUFBQSxJQUFJO2dCQUNOLEdBQUcsQ0FBQyxDQUFlLFVBQUksRUFBSixhQUFJLEVBQUosa0JBQUksRUFBSixJQUFJLENBQUM7b0JBQW5CLElBQUksTUFBTSxhQUFBO29CQUNYLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDL0Q7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUM7UUFLRCwwQkFBVSxHQUFWO1lBQ0ksb0JBQW9CLENBQUMsYUFBYSxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDO2dCQUNyRCxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUMzQixvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZFLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFUCxDQUFDO1FBRUQsZ0NBQWdCLEdBQWhCO1lBQ0ksb0JBQW9CLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZELG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDakQsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBRUQsNEJBQVksR0FBWjtZQUNJLG9CQUFvQixDQUFDLGFBQWEsRUFBRTtpQkFDL0IsY0FBYyxFQUFFO2lCQUNoQixJQUFJLENBQUM7Z0JBQ0Ysb0JBQW9CLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO2dCQUN6RSxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUMzQixvQkFBb0IsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEQsQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDO1FBRUQseUJBQVMsR0FBVDtZQUNJLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDakQsb0JBQW9CLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZFLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RDLENBQUM7UUFFRCw0QkFBWSxHQUFaLFVBQWEsTUFBYztZQUN2QixvQkFBb0IsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0MsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZCLENBQUM7UUFHTCxZQUFDO0lBQUQsQ0FwREEsQUFvREMsSUFBQTtJQXBEWSwwQkFBSyxRQW9EakIsQ0FBQTtBQUNMLENBQUMsRUF4RE0sb0JBQW9CLEtBQXBCLG9CQUFvQixRQXdEMUI7QUFFRCxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3hELEVBQUUsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQyIsImZpbGUiOiJWaWV3TW9kZWxzL0FkbWluL1BlcnNvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxudmFyIHBlcnNvbkRlYWlscyA9ICQoXCIjcGVyc29uRGV0YWlsc1wiKTtcclxuaW1wb3J0IFBlcnNvbiA9IENsaWVudE1vZGVsLlBlcnNvbjtcclxuXHJcblxyXG52YXIgZGVsZXRlUGVyc29uID0gJChcIiNkZWxldGVQZXJzb25cIik7XHJcbnZhciBhZG1pblBlcnNvblZpZXdNb2RlbDogQWRtaW5QZXJzb25WaWV3TW9kZWwuTW9kZWw7XHJcblxyXG5cclxubW9kdWxlIEFkbWluUGVyc29uVmlld01vZGVsIHtcclxuICAgIGltcG9ydCBQZXJzb24gPSBDbGllbnRNb2RlbC5QZXJzb247XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIE1vZGVsIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuTmV3UGVyc29uID0ga28uY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4gdGhpcy5DdXJyZW50UGVyc29uKCkuSWQoKSA9PT0gdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgdGhpcy5QZXJzb25BcGkuR2V0KClcclxuICAgICAgICAgICAgICAgIC5kb25lKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBlcnNvbiBvZiBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuUGVvcGxlLnB1c2gobmV3IFBlcnNvbigpLkxvYWRGcm9tU2VydmVyRW50aXR5KHBlcnNvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQZW9wbGUgPSBrby5vYnNlcnZhYmxlQXJyYXk8UGVyc29uPigpO1xyXG4gICAgICAgIEN1cnJlbnRQZXJzb24gPSBrby5vYnNlcnZhYmxlKG5ldyBQZXJzb24oKSk7XHJcbiAgICAgICAgUGVyc29uQXBpID0gU2VydmVyQXBpLlBlcnNvbnM7XHJcblxyXG4gICAgICAgIFNhdmVQZXJzb24oKSB7XHJcbiAgICAgICAgICAgIGFkbWluUGVyc29uVmlld01vZGVsLkN1cnJlbnRQZXJzb24oKS5TYXZlVG9TZXJ2ZXIoKS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHBlcnNvbkRlYWlscy5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgICAgICBhZG1pblBlcnNvblZpZXdNb2RlbC5QZW9wbGUucHVzaChhZG1pblBlcnNvblZpZXdNb2RlbC5DdXJyZW50UGVyc29uKCkpO1xyXG4gICAgICAgICAgICAgICAgYWRtaW5QZXJzb25WaWV3TW9kZWwuQ3VycmVudFBlcnNvbihuZXcgUGVyc29uKCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBDYW5jZWxFZGl0UGVyc29uKCkge1xyXG4gICAgICAgICAgICBhZG1pblBlcnNvblZpZXdNb2RlbC5DdXJyZW50UGVyc29uKCkuUmV2ZXJ0U3RhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGFkbWluUGVyc29uVmlld01vZGVsLkN1cnJlbnRQZXJzb24obmV3IFBlcnNvbigpKTtcclxuICAgICAgICAgICAgcGVyc29uRGVhaWxzLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIERlbGV0ZVBlcnNvbigpIHtcclxuICAgICAgICAgICAgYWRtaW5QZXJzb25WaWV3TW9kZWwuQ3VycmVudFBlcnNvbigpXHJcbiAgICAgICAgICAgICAgICAuRGVsZXRlT25TZXJ2ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkbWluUGVyc29uVmlld01vZGVsLlBlb3BsZS5yZW1vdmUoYWRtaW5QZXJzb25WaWV3TW9kZWwuQ3VycmVudFBlcnNvbigpKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGVQZXJzb24ubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkbWluUGVyc29uVmlld01vZGVsLkN1cnJlbnRQZXJzb24odW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQWRkUGVyc29uKCkge1xyXG4gICAgICAgICAgICBhZG1pblBlcnNvblZpZXdNb2RlbC5DdXJyZW50UGVyc29uKG5ldyBQZXJzb24oKSk7XHJcbiAgICAgICAgICAgIGFkbWluUGVyc29uVmlld01vZGVsLlBlb3BsZS5wdXNoKGFkbWluUGVyc29uVmlld01vZGVsLkN1cnJlbnRQZXJzb24oKSk7XHJcbiAgICAgICAgICAgIGFkbWluUGVyc29uVmlld01vZGVsLlNhdmVQZXJzb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNlbGVjdFBlcnNvbihwZXJzb246IFBlcnNvbikge1xyXG4gICAgICAgICAgICBhZG1pblBlcnNvblZpZXdNb2RlbC5DdXJyZW50UGVyc29uKHBlcnNvbik7XHJcbiAgICAgICAgICAgIHBlcnNvbi5TYXZlU3RhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIE5ld1BlcnNvbjogS25vY2tvdXRDb21wdXRlZDxib29sZWFuPjtcclxuICAgIH1cclxufVxyXG5cclxuYWRtaW5QZXJzb25WaWV3TW9kZWwgPSBuZXcgQWRtaW5QZXJzb25WaWV3TW9kZWwuTW9kZWwoKTtcclxua28uYXBwbHlCaW5kaW5ncyhhZG1pblBlcnNvblZpZXdNb2RlbCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
