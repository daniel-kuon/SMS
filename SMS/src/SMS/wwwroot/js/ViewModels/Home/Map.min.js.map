{"version":3,"sources":["/source/wwwroot/js/ViewModels/Home/ViewModels/Home/Map.ts","wwwroot/js/ViewModels/Home/Map.js"],"names":["renderTime","startDate","endDate","Date","getTime","duration","time","Math","floor","mins","toString","length","getMiddle","pol","start","getLatLngs","end","L","LatLng","lat","lng","splitPolyline","polyline","Waypoints","DummyHandle","Waypoint","w2","w3","RemoveFromPolyline","undefined","AddToPolyline","addDummyHandle","mapViewModel","AddPolyline","Error","removePolyline","_i","_a","waypoint","RemoveFromMap","Map","removeLayer","CreateWaypoint","MarkerType","Dummy","redrawPolyline","middleLatLng","Longitude","Latitude","SetLatLng","redraw","removeFromPolyline","latLng","removeFromArray","arr","obj","tmpArr","Array","arr_1","item","push","pop","shift","ClientModel","Harbour","WaypointDistance","ctrlPressed","test","navigator","userAgent","$","addClass","MapMode","EditingHelper","editingModalId","deletingModalId","Factory","Dataset","detailModalId","_this","this","EditingModalOpen","DeletingModalOpen","DetailModalOpen","HasDetailView","Detail","ko","observable","Editing","Deleting","Delete","DeleteOnServer","done","Save","Parsley","whenValidate","Id","SaveToServer","EditingModal","DeletingModal","parsley","window","ParsleyConfig","on","AlbumStack","unshift","Album","setTimeout","first","focus","subscribe","entity","modal","SaveState","RevertState","Sidebar","DetailSidebar","IsActiv","Hide","Show","DetailModal","MapViewModel","mapMode","IsLoggedIn","routePolyline","IsLastTakInRoute","computed","read","trip","TripHelper","h","HarbourHelper","Tacks","Start","deferEvaluation","GetRouteDistance","distance","tack","isNaN","Distance","TopJobs","Jobs","filter","j","SuperJobId","IsInViewMode","View","IsInAdminMode","Admin","WaypointsLoaded","WaypointConnectionsLoaded","PersonsLoaded","JobsLoaded","TripsLoaded","AddressesLoaded","ImagesLoaded","AlbumsLoaded","WaypointTacksLoaded","TacksLoaded","LocationsLoaded","AlbumImagesLoaded","LogBookEntriesLoaded","CrewsLoaded","WifisLoaded","ContentPagesLoaded","observableArray","WaypointConnections","Harbours","Persons","Trips","Addresses","Images","Locations","Supermarkets","Restaurants","Albums","AlbumImages","LogBookEntries","Crews","Wifis","ContentPages","WaypointHelper","CreateHarbour","rightSidebar","PersonHelper","Person","JobHelper","Job","Trip","AddressHelper","Address","ImageHelper","Image","TackHelper","Tack","LocationHelper","Location","SupermarketHelper","Supermarket","RestaurantHelper","Restaurant","LogBookEntryHelper","logBookEntry","LogBookEntry","lastEntry","entry","EndDate","End","MotorHoursStart","MotorHoursEnd","LogStart","LogEnd","Name","slice","ContentPageHelper","ContentPage","WifiHelper","w","Wifi","HarbourId","HarboursByName","sort","h1","h2","HarboursByDistance","LogBookEntriesByStartDate","l1","l2","parse","StartDate","RemoveHarbour","RemoveWaypoint","RemovePolyline","DrawingPolyline","routeFixed","noRevertToPreviousBounds","Polylines","WaypointMarkers","HarboursToSelect","concat","IsDummy","ProcessHarbourSelectOptions","option","value","context_1","contextFor","select","parent","data","change","is","harbour_1","subscription_1","$data","dispose","PersonsToSelect","p1","p2","FullName","ProcessPersonSelectOptions","context_2","person_1","subscription_2","GetPositionForWaypoint","geolocation","getCurrentPosition","location","coords","latitude","longitude","console","log","arguments","alert","LogBookPager","Pager","Columns","PagerColumn","Sorter","StringSorter","Visible","Width","DateSorter","Renderer","DateRenderer","SortMode","SortModes","Descending","SaillingTime","ArrayRenderer","p","SpecialOccurences","UseResponsiveTable","UseStripedTable","ShowEditDeleteControls","IdPrefix","SpecialActions","PagerSpecialAction","HarbourDistancePager","NumberSorter","d","Ascending","UseSmallColumnControls","ShowColumnSelector","SpecialColumnActions","PagerSpecialColumnAction","ShowRoute","FixRoute","mapbox","accessToken","InitializeMap","mapOptions","contextmenu","contextmenuItems","text","callback","e","latlng","map","setView","tileLayer","addTo","LoadData","get","nav","remove","_loop_1","cP","Title","click","appendTo","data_1","newHarbour","CalculateDistances","HideRoute","harbour","marker","addEventListener","GetMapMode","RouteDrawing","DrawingLatLng","Point","distanceTo","containerPoint","setOpacity","HoveredPolyine","latLngToContainerPoint","containerPointToLatLng","LineUtil","closestPointOnSegment","startId_1","ServerApi","Connect","addLatLng","originalEvent","cancelBubble","preventDefault","stopPropagation","document","keyup","keyCode","getLatLng","prototype","StartRoute","color","AddToRoute","targetHarbour","lastTack","startHarbour","RouteDistance","wp","RoutePrecessor","RedrawTrip","PullTack","tacks","index","indexOf","prevTack","tmpEnd","splice","PushTack","nextTack","RemoveTack","Get","d_1","sEntity","Type","LoadFromServerEntity","InitializeModel","d_2","d_3","d_4","d_5","d_6","d_7","d_8","d_9","d_10","ai","d_11","c","d_12","d_13","d_14","AssignedToId","AssignedTo","GetPersonById","TripId","GetTripById","SuperJob","GetJobById","SubJobs","_b","_c","GetAlbumById","AlbumId","_e","_f","GetAddressById","AddressId","GetHarbourById","_g","_h","GetImageById","ImageId","_j","_k","connection","GetWayPointById","Waypoint1Id","Waypoint2Id","_l","_m","StartId","EndId","_o","_p","crew","lBE","GetLogBookEntryById","TackId","GetTackById","PersonId","_q","_r","wifi","applyBindings","CreateMarker","enable","disable","GetWaypointById","id","GetLocationById","InitGallery","event","items","albumElem","target","parentElement","currImage","Height","src","Path","gallery","PhotoSwipe","pswp","PhotoSwipeUI_Default","getThumbBoundsFn","elem","padding","parseFloat","getComputedStyle","getPropertyValue","replace","scrollIntoView","bounds","getBoundingClientRect","x","left","y","top","screenY","width","init","AddHarbour","getCenter","arg","Polyline","convertFromDummyHandle","waypoints","calculating","calculated","calculateRoute","Precessor","minimalDist","Number","POSITIVE_INFINITY","minimalWp","calculating_1","ConnectedWayPoints","cWp","dist","calculated_1","round","calculated_2","highlightedRoute","latLngs","bindLabel","noHide","FitBounds","getBounds","currentBounds","contains","previousBounds","fitBounds","force","tmpBounds_1","markerType","InitializeWaypoint","options","draggable","opacity","icon","Icon","iconUrl","iconSize","className","contextmenuInheritItems","context","Marker","IsInPolyline","addOneTimeEventListener","name","SetOptionKey","applyBindingsToNode","attr","data-id","dropzoneModalOpenedByDrag","dropzoneModal","jobOverviewModal","personOverviewModal","dropzone","hasDrag","uploadModalVisible","personDeails","deletePerson","leftSidebar","bottomSidebar","harbourInfo","Dropzone","acceptedFiles","dictInvalidFileType","dictDefaultMessage","image","ondragenter","dataTransfer","types","ondragover","ondragleave","getQueuedFiles","getUploadingFiles","stopImmediatePropagation","removeAllFiles","removeClass","hasClass","css","not","bindingHandlers","daterange","element","valueAccessor","allBindingsAccessor","viewModel","bindingContext","toJSON","daterangepicker","singleDatePicker","showDropdowns","timePicker","timePicker24Hour","timePickerIncrement","locale","format","separator","applyLabel","cancelLabel","fromLabel","toLabel","customRangeLabel","weekLabel","daysOfWeek","monthNames","firstDay","alwaysShowCalendars","_d","update","setStartDate","moment","form","submitEvent","closest"],"mappings":"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","file":"wwwroot/js/ViewModels/Home/Map.min.js","sourcesContent":["/// <reference path=\"../../clientmodel.ts\" />\r\n/// <reference path=\"../../servermodel.ts\" />\r\n/// <reference path=\"../../serverapi.ts\" />\r\n/// <reference path=\"../../../../typings/browser/definitions/moment/index.d.ts\" />\r\nimport Waypoint = ClientModel.Waypoint;\r\nimport Harbour = ClientModel.Harbour;\r\nimport WaypointDistance = ClientModel.WaypointDistance;\r\n\r\nvar ctrlPressed = false;\r\n\r\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n    $(\"body\").addClass(\"mobile\");\r\n}\r\n\r\nfunction renderTime(duration: number);\r\nfunction renderTime(startDate: Date, endDate: Date);\r\nfunction renderTime(startDate: Date | number, endDate?: Date) {\r\n    if (startDate instanceof Date)\r\n        return renderTime(endDate.getTime() - startDate.getTime());\r\n    const duration = startDate as number;\r\n    let time = Math.floor(duration / 60000);\r\n    let mins = (time % 60).toString();\r\n    if (mins.length === 1)\r\n        mins = `0${mins}`;\r\n    time = Math.floor(time / 60);\r\n    return time.toString() + \":\" + mins;\r\n}\r\n\r\nfunction getMiddle(pol: L.Polyline): L.LatLng {\r\n    const start = pol.getLatLngs()[0];\r\n    const end = pol.getLatLngs()[1];\r\n    //if (end === undefined)\r\n    //    return start;\r\n    return new L.LatLng(start.lat + ((end.lat - start.lat) / 2), start.lng + ((end.lng - start.lng) / 2));\r\n}\r\n\r\nfunction splitPolyline(polyline: L.Polyline) {\r\n    if (polyline.Waypoints.length === 2 && polyline.DummyHandle instanceof Waypoint) {\r\n        const w1 = polyline.Waypoints[0];\r\n        const w2 = polyline.DummyHandle;\r\n        const w3 = polyline.Waypoints[1];\r\n        w2.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle = undefined;\r\n        w2.AddToPolyline(polyline);\r\n        w3.RemoveFromPolyline(polyline);\r\n        addDummyHandle(polyline);\r\n        addDummyHandle(mapViewModel.AddPolyline([w2, w3]));\r\n        return;\r\n    }\r\n    throw new Error(\"Cannot split polyline. Polyline has no dummy handle or less or more than 2 waypoints\");\r\n}\r\n\r\n\r\nfunction removePolyline(polyline: L.Polyline) {\r\n    for (let waypoint of polyline.Waypoints) {\r\n        waypoint.RemoveFromPolyline(polyline);\r\n    }\r\n    if (polyline.DummyHandle !== undefined) {\r\n        polyline.DummyHandle.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle.RemoveFromMap();\r\n    }\r\n    mapViewModel.Map.removeLayer(polyline);\r\n}\r\n\r\nfunction addDummyHandle(polyline: L.Polyline) {\r\n    if (polyline.DummyHandle === undefined) {\r\n        polyline.DummyHandle = mapViewModel.CreateWaypoint(getMiddle(polyline), MarkerType.Dummy);\r\n        polyline.DummyHandle.AddToPolyline(polyline);\r\n    }\r\n}\r\n\r\nfunction redrawPolyline(polyline: L.Polyline) {\r\n    const middleLatLng = getMiddle(polyline);\r\n    if (polyline.DummyHandle === undefined)\r\n        addDummyHandle(polyline);\r\n    if (polyline.DummyHandle.Longitude() !== middleLatLng.lng || polyline.DummyHandle.Latitude() !== middleLatLng.lat)\r\n        polyline.DummyHandle.SetLatLng(middleLatLng);\r\n    else\r\n        polyline.redraw();\r\n}\r\n\r\nfunction removeFromPolyline(polyline: L.Polyline, latLng: L.LatLng) {\r\n    removeFromArray(polyline.getLatLngs(), latLng);\r\n    polyline.redraw();\r\n}\r\n\r\nfunction removeFromArray<T>(arr: T[], obj: T): boolean {\r\n    const tmpArr = new Array<T>();\r\n    for (let item of arr) {\r\n        if (item !== obj)\r\n            tmpArr.push(item);\r\n    }\r\n    if (tmpArr.length === arr.length)\r\n        return false;\r\n    while (arr.pop()) {\r\n    }\r\n    while (tmpArr.length > 0) {\r\n        arr.push(tmpArr.shift());\r\n    }\r\n    return true;\r\n}\r\n\r\nenum MapMode {\r\n    Admin,\r\n    View,\r\n    TripPlanning,\r\n    RouteDrawing\r\n}\r\n\r\ndeclare namespace L {\r\n    export interface Polyline extends Path {\r\n\r\n        Waypoints: Array<Waypoint>;\r\n        DummyHandle: Waypoint;\r\n    }\r\n\r\n    export interface LatLng {\r\n        Polylines: Polyline[];\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface Marker {\r\n        Waypoint: Waypoint;\r\n        Point: L.Point;\r\n        _icon;\r\n    }\r\n\r\n    export interface CircleMarker {\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface PathOptions {\r\n        Draggable?: boolean;\r\n    }\r\n\r\n    export interface MarkerOptions {\r\n        contextmenu?: boolean;\r\n        contextmenuWidth?: number;\r\n        contextmenuAnchor?: L.Point | L.Point[];\r\n        contextmenuItems?: contextmenuItem[];\r\n        contextmenuInheritItems: boolean;\r\n\r\n    }\r\n\r\n    export interface contextmenuItem {\r\n        text?: string;\r\n        icon?: string;\r\n        iconCls?: string;\r\n        callback?: Function;\r\n        context?: Object;\r\n        disabled?: boolean;\r\n        separator?: boolean;\r\n        hideOnSelect?: boolean;\r\n        index?: number;\r\n    }\r\n\r\n\r\n}\r\n\r\nclass EditingHelper<T extends ClientModel.Entity> {\r\n\r\n    constructor(editingModalId: string,\r\n        deletingModalId: string,\r\n        Factory: () => T,\r\n        Dataset: KnockoutObservableArray<T>,\r\n        detailModalId: string);\r\n    constructor(editingModalId: string,\r\n        deletingModalId: string,\r\n        Factory: () => T,\r\n        Dataset: KnockoutObservableArray<T>,\r\n        detailedSidebar: Sidebar);\r\n    constructor(editingModalId: string, deletingModalId: string, Factory: () => T, Dataset: KnockoutObservableArray<T>);\r\n    constructor(editingModalId: string,\r\n        deletingModalId: string,\r\n        protected Factory: () => T,\r\n        protected Dataset: KnockoutObservableArray<T>,\r\n        detailModalId?: string | Sidebar) {\r\n        this.EditingModal = $(`#${editingModalId}`);\r\n        this.DeletingModal = $(`#${deletingModalId}`);\r\n\r\n        if ($(\"form:first\").length === 1)\r\n            this.Parsley = $(\"form:first\", this.EditingModal).parsley(window.ParsleyConfig);\r\n        this.EditingModal.on(\"show.bs.modal\",\r\n            () => {\r\n                this.EditingModalOpen = true;\r\n                if (this.Editing() === undefined)\r\n                    this.Editing(this.Factory());\r\n                mapViewModel.AlbumStack.unshift(this.Editing().Album());\r\n            });\r\n\r\n        this.EditingModal.on(\"shown.bs.modal\",\r\n            () => {\r\n                window.setTimeout(() => $(\"input, select, textarea\", this.EditingModal).first().focus(), 200);\r\n            });\r\n\r\n        this.EditingModal.on(\"hidden.bs.modal\",\r\n            () => {\r\n                if (this.Editing() !== undefined)\r\n                    this.Editing(undefined);\r\n                this.EditingModalOpen = false;\r\n                mapViewModel.AlbumStack.shift();\r\n            });\r\n        this.Editing.subscribe((entity) => {\r\n            if (entity === undefined && this.EditingModalOpen) {\r\n                this.EditingModal.modal(\"hide\");\r\n            } else if (!this.EditingModalOpen) {\r\n                entity.SaveState();\r\n                this.EditingModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.Editing.subscribe(() => {\r\n            if (this.Editing() !== undefined) {\r\n                this.Editing().RevertState(true);\r\n            }\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n\r\n        this.DeletingModal.on(\"show.bs.modal\",\r\n            () => {\r\n                this.DeletingModalOpen = true;\r\n                mapViewModel.AlbumStack.unshift(undefined);\r\n            });\r\n\r\n        this.DeletingModal.on(\"hidden.bs.modal\",\r\n            () => {\r\n                if (this.Deleting() !== undefined)\r\n                    this.Deleting(undefined);\r\n                mapViewModel.AlbumStack.shift();\r\n                this.DeletingModalOpen = false;\r\n            });\r\n        this.Deleting.subscribe((entity) => {\r\n            if (entity === undefined && this.DeletingModalOpen) {\r\n                this.DeletingModal.modal(\"hide\");\r\n            } else if (!this.DeletingModalOpen) {\r\n                this.DeletingModal.modal(\"show\");\r\n            }\r\n        });\r\n\r\n        if (detailModalId !== undefined) {\r\n            this.HasDetailView = true;\r\n            if (detailModalId instanceof Sidebar) {\r\n                this.DetailSidebar = detailModalId;\r\n                this.Detail.subscribe((entity) => {\r\n                    if (entity === undefined && this.DetailSidebar.IsActiv()) {\r\n                        mapViewModel.AlbumStack.shift();\r\n                        this.DetailSidebar.Hide();\r\n                    } else if (entity !== undefined && !this.DetailSidebar.IsActiv()) {\r\n                        this.DetailSidebar.Show();\r\n                        mapViewModel.AlbumStack.unshift(entity.Album());\r\n                    }\r\n                });\r\n            } else {\r\n                this.DetailModal = $(`#${detailModalId}`);\r\n                this.Detail.subscribe((entity) => {\r\n                    if (entity === undefined && this.DetailModalOpen) {\r\n                        this.DetailModal.modal(\"hide\");\r\n                    } else if (entity !== undefined && !this.DetailModalOpen) {\r\n                        this.DetailModal.modal(\"show\");\r\n                    }\r\n                });\r\n\r\n                this.DetailModal.on(\"show.bs.modal\",\r\n                    () => {\r\n                        this.DetailModalOpen = true;\r\n                        mapViewModel.AlbumStack.unshift(this.Detail().Album());\r\n                    });\r\n\r\n                this.DetailModal.on(\"hide.bs.modal\",\r\n                    () => {\r\n                        this.DetailModalOpen = false;\r\n                        mapViewModel.AlbumStack.shift();\r\n                    });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    protected EditingModal: JQuery;\r\n    protected DeletingModal: JQuery;\r\n    protected DetailModal: JQuery;\r\n    protected DetailSidebar: Sidebar;\r\n    protected EditingModalOpen = false;\r\n    protected DeletingModalOpen = false;\r\n    protected DetailModalOpen = false;\r\n    protected Parsley: any;\r\n\r\n    HasDetailView = false;\r\n    Detail = ko.observable<T>();\r\n    Editing = ko.observable<T>();\r\n    Deleting = ko.observable<T>();\r\n\r\n    Delete = () => {\r\n        this.Deleting()\r\n            .DeleteOnServer()\r\n            .done(() => {\r\n                //this.Dataset.remove(this.Deleting());\r\n                this.Deleting(undefined);\r\n                if (this.Detail() !== undefined)\r\n                    this.Detail(undefined);\r\n                if (this.Editing() !== undefined)\r\n                    this.Editing(undefined);\r\n            });\r\n    };\r\n\r\n    Save = () => {\r\n        if (this.Parsley !== undefined)\r\n            this.Parsley.whenValidate()\r\n                .done(() => {\r\n                    var isNew = this.Editing().Id() === undefined;\r\n                    this.Editing()\r\n                        .SaveToServer()\r\n                        .done(() => {\r\n                            //if (isNew)\r\n                            //    this.Dataset.push(this.Editing());\r\n                            this.Editing(undefined);\r\n                        });\r\n                });\r\n        else {\r\n            const isNew = this.Editing().Id() === undefined;\r\n            this.Editing()\r\n                .SaveToServer()\r\n                .done(() => {\r\n                    //if (isNew)\r\n                    //    this.Dataset.push(this.Editing());\r\n                    this.Editing(undefined);\r\n                });\r\n        }\r\n    };\r\n}\r\n\r\nclass MapViewModel {\r\n    constructor(mapMode: MapMode) {\r\n        L.mapbox\r\n            .accessToken =\r\n            \"pk.eyJ1IjoiZGFuaWVsLWt1b24iLCJhIjoiY2lldnVtY29iMDBiOHQxbTBvZzBqZWl6cCJ9.UEc2YqH59pB1YTpv22vg8A\";\r\n        this.MapMode(mapMode);\r\n        this.MapMode.subscribe(() => {\r\n            this.InitializeMap();\r\n        });\r\n        const mapOptions: L.mapbox.MapOptions = {\r\n            contextmenu: mapMode === MapMode.Admin,\r\n            contextmenuItems: [\r\n                {\r\n                    text: \"Neuer Hafen\",\r\n                    callback: function (e) {\r\n                        console.log(e);\r\n                        mapViewModel.HarbourHelper.Editing(mapViewModel.CreateHarbour(\"\", e.latlng));\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        this.Map = L.mapbox.map(\"map\",\r\n            \"mapbox.streets\",\r\n            mapOptions);\r\n        this.Map.setView([54.40774166820069, 10.523529052734373], 9);\r\n        L.tileLayer(\"http://t1.openseamap.org/seamark/{z}/{x}/{y}.png\").addTo(this.Map);\r\n        this.LoadData();\r\n        $.get(\"/Account/IsLoggedIn\").done((data) => this.IsLoggedIn(data));\r\n        this.ContentPages.subscribe((data) => {\r\n            var nav = $(\"#leftNav\");\r\n            $(\".contentPageLink\", nav).remove();\r\n            for (let cP of data) {\r\n                $(`<li role=\"presentation\" class=\"contentPageLink\"><a href=\"#\">${cP.Title()}</a></li>`)\r\n                    .click(() => {\r\n                        mapViewModel.ContentPageHelper.Detail(cP);\r\n                        return false;\r\n                    })\r\n                    .appendTo(nav);\r\n            }\r\n        });\r\n\r\n        this.HarbourHelper.Detail.subscribe((newHarbour) => {\r\n            if (newHarbour !== undefined) {\r\n                mapViewModel.CalculateDistances(newHarbour);\r\n                mapViewModel.Harbours.sort((h1, h2) => h1.Distance() - h2.Distance());\r\n            } else {\r\n                for (let h of mapViewModel.Harbours()) {\r\n                    h.Distance(0);\r\n                }\r\n            }\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        });\r\n        this.HarbourHelper.Editing.subscribe((harbour) => {\r\n            if (harbour !== undefined && harbour.Id() === undefined)\r\n                mapViewModel.Map.removeLayer(harbour.marker);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n\r\n        this.Map.addEventListener(\"mousemove\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    this.DrawingLatLng.lat = e.latlng.lat;\r\n                    this.DrawingLatLng.lng = e.latlng.lng;\r\n                    this.DrawingPolyline.redraw();\r\n                }\r\n                if (this.MapMode() === MapMode.Admin)\r\n                    for (let marker of this.WaypointMarkers) {\r\n                        if (marker.Point.distanceTo(e.containerPoint) < 150)\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 1);\r\n                        else\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 0.8);\r\n                    }\r\n                if (mapViewModel\r\n                    .HoveredPolyine !==\r\n                    undefined &&\r\n                    mapViewModel.HoveredPolyine.DummyHandle !== undefined) {\r\n                    const polyline = mapViewModel.HoveredPolyine;\r\n                    const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n                    const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n                    if (p1.distanceTo(e.containerPoint) < 20 || p2.distanceTo(e.containerPoint) < 20) {\r\n                        mapViewModel.HoveredPolyine = undefined;\r\n                    } else {\r\n                        mapViewModel.HoveredPolyine.DummyHandle.marker.setOpacity(0.8);\r\n                        mapViewModel.HoveredPolyine.DummyHandle\r\n                            .SetLatLng(mapViewModel.Map\r\n                                .containerPointToLatLng(L.LineUtil\r\n                                    .closestPointOnSegment(e.containerPoint,\r\n                                    p1,\r\n                                    p2)),\r\n                            false);\r\n                    }\r\n                }\r\n\r\n            });\r\n        this.Map.addEventListener(\"click\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    const waypoint = mapViewModel.CreateWaypoint(e.latlng, MarkerType.Waypoint);\r\n                    const startId = this.DrawingPolyline.Waypoints[0].Id();\r\n                    waypoint.SaveToServer()\r\n                        .done(w => {\r\n                            ServerApi.WaypointConnections\r\n                                .Connect(w.Id, startId);\r\n                        });\r\n                    waypoint.AddToPolyline(this.DrawingPolyline);\r\n                    addDummyHandle(this.DrawingPolyline);\r\n                    removeFromPolyline(this.DrawingPolyline, this.DrawingLatLng);\r\n                    this.DrawingPolyline = this.AddPolyline(waypoint);\r\n                    this.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                    this.DrawingPolyline.addLatLng(this.DrawingLatLng);\r\n                }\r\n            });\r\n\r\n        this.Map.addEventListener(\"dblclick\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    e.originalEvent.cancelBubble = true;\r\n                    e.originalEvent.preventDefault();\r\n                    e.originalEvent.stopPropagation();\r\n                    this.DrawingPolyline.addLatLng(e.latlng);\r\n                    this.DrawingLatLng = e.latlng;\r\n                }\r\n            });\r\n        $(document)\r\n            .keyup((e: JQueryKeyEventObject) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    if (e.keyCode === 27) {\r\n                        this.RemovePolyline(this.DrawingPolyline);\r\n                    }\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"move\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"zoom\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n    }\r\n\r\n    IsLoggedIn = ko.observable(false);\r\n\r\n    private routePolyline = ko.observable<L.Polyline>();\r\n\r\n    StartRoute() {\r\n        const trip = new ClientModel.Trip();\r\n        const tack = new ClientModel.Tack();\r\n        const harbour = mapViewModel.HarbourHelper.Detail();\r\n        tack.Start(harbour);\r\n        trip.Tacks.push(tack);\r\n        mapViewModel.TripHelper.Editing(trip);\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n    }\r\n\r\n    IsLastTakInRoute = ko.computed({\r\n        read: () => {\r\n            var trip = mapViewModel.TripHelper.Editing();\r\n            var h = mapViewModel.HarbourHelper.Detail();\r\n            return trip !== undefined && h !== undefined && trip.Tacks()[trip.Tacks().length - 1].Start() === h;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    GetRouteDistance = ko.computed({\r\n        read: () => {\r\n            var distance = 0;\r\n            for (let tack of mapViewModel.TripHelper.Editing().Tacks()) {\r\n                if (!isNaN(tack.Distance()))\r\n                    distance += tack.Distance();\r\n            }\r\n            return distance;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    TopJobs = ko.computed({\r\n        read: () => {\r\n            return mapViewModel.Jobs().filter((j) => j.SuperJobId() === undefined);\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    AddToRoute() {\r\n        const trip = mapViewModel.TripHelper.Editing();\r\n        const targetHarbour = mapViewModel.HarbourHelper.Editing();\r\n        const tack = new ClientModel.Tack();\r\n        const lastTack = trip.Tacks()[trip.Tacks().length - 1];\r\n        const startHarbour = lastTack.Start();\r\n        mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n        lastTack.Distance(startHarbour.RouteDistance());\r\n        let wp: ClientModel.Waypoint = startHarbour;\r\n        mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n            wp = wp.RoutePrecessor();\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        }\r\n\r\n        lastTack.End(targetHarbour);\r\n        tack.Start(targetHarbour);\r\n        trip.Tacks.push(tack);\r\n    }\r\n\r\n    RedrawTrip() {\r\n        mapViewModel.Map.removeLayer(mapViewModel.routePolyline());\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n        for (let tack of mapViewModel.TripHelper.Editing().Tacks()) {\r\n            const targetHarbour = tack.End();\r\n            const startHarbour = tack.Start();\r\n            if (targetHarbour === undefined)\r\n                continue;\r\n            mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n            tack.Distance(startHarbour.RouteDistance());\r\n            let wp: ClientModel.Waypoint = startHarbour;\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n                wp = wp.RoutePrecessor();\r\n                mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            }\r\n        }\r\n    }\r\n\r\n    PullTack() {\r\n        const tack: ClientModel.Tack = this as any;\r\n        const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        const tmpEnd = tack.End();\r\n        tack.End(prevTack.Start());\r\n        prevTack.End(tmpEnd);\r\n        if (index > 1) {\r\n            tacks()[index - 2].End(tack.Start());\r\n        }\r\n        tacks.splice(index - 1, 2, tack, prevTack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    PushTack() {\r\n        const tack: ClientModel.Tack = this as any;\r\n        const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const nextTack = tacks()[index + 1];\r\n        tack.End(nextTack.End());\r\n        nextTack.End(tack.Start());\r\n        if (index > 0) {\r\n            tacks()[index - 1].End(nextTack.Start());\r\n        }\r\n        tacks.splice(index, 2, nextTack, tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    RemoveTack() {\r\n        const tack: ClientModel.Tack = this as any;\r\n        const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        if (prevTack !== undefined)\r\n            prevTack.End(tack.End());\r\n        tacks.remove(tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    IsInViewMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.View;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    IsInAdminMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.Admin;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n\r\n    LoadData() {\r\n        ServerApi.Waypoints\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    if (sEntity.Type === \"Waypoint\")\r\n                        this.Waypoints.push(mapViewModel\r\n                            .CreateWaypoint(MarkerType.Waypoint)\r\n                            .LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === \"Harbour\") {\r\n                        const harbour = mapViewModel\r\n                            .CreateHarbour()\r\n                            .LoadFromServerEntity(sEntity);\r\n                        this.Harbours.push(harbour);\r\n                    }\r\n                }\r\n\r\n                this.WaypointsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.WaypointConnections\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.WaypointConnections.push(sEntity);\r\n                }\r\n                this.WaypointConnectionsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Persons\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Persons.push(new ClientModel.Person().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.PersonsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Jobs\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Jobs.push(new ClientModel.Job().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.JobsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Trips\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Trips.push(new ClientModel.Trip().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TripsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Addresses\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Addresses.push(new ClientModel.Address().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AddressesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Images\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Images.push(new ClientModel.Image().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.ImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Albums\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Albums.push(new ClientModel.Album().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AlbumsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.LogBookEntries\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.LogBookEntries.push(new ClientModel.LogBookEntry().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.LogBookEntriesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AlbumImages.Get()\r\n            .done(d => {\r\n                for (let ai of d) {\r\n                    this.AlbumImages.push(ai);\r\n                }\r\n                this.AlbumImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Crews.Get()\r\n            .done(d => {\r\n                for (let c of d) {\r\n                    this.Crews.push(c);\r\n                }\r\n                this.CrewsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Wifis.Get()\r\n            .done(d => {\r\n                for (let c of d) {\r\n                    this.Wifis.push(new ClientModel.Wifi().LoadFromServerEntity(c));\r\n                }\r\n                this.WifisLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.ContentPages.Get()\r\n            .done(d => {\r\n                for (let c of d) {\r\n                    this.ContentPages.push(new ClientModel.ContentPage().LoadFromServerEntity(c));\r\n                }\r\n                this.ContentPagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        //ServerApi.WaypointTacks.Get().done(d => {\r\n        //    for (let sEntity of d) { this.WaypointTacks.push(new ClientModel.WaypointTack().LoadFromServerEntity(sEntity)); }\r\n        //    this.WaypointTacksLoaded = true;\r\n        //    this.InitialozeModel();\r\n        //});\r\n        ServerApi.Tacks\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Tacks.push(new ClientModel.Tack().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TacksLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        //ServerApi.Locations\r\n        //    .Get()\r\n        //    .done(d => {\r\n        //        for (let sEntity of d) {\r\n        //            if (sEntity.Type === \"Location\")\r\n        //                this.Locations.push(new ClientModel.Location().LoadFromServerEntity(sEntity));\r\n        //            else if (sEntity.Type === \"Restaurant\")\r\n        //                this.Restaurants.push(new ClientModel.Restaurant().LoadFromServerEntity(sEntity));\r\n        //            else if (sEntity.Type === \"Supermarket\")\r\n        //                this.Supermarkets.push(new ClientModel.Supermarket().LoadFromServerEntity(sEntity));\r\n        //        }\r\n        this.LocationsLoaded = true;\r\n        //        this.InitializeModel();\r\n        //    });\r\n    }\r\n\r\n    InitializeModel() {\r\n        if (this.WaypointsLoaded &&\r\n            this.WaypointConnectionsLoaded &&\r\n            this.PersonsLoaded &&\r\n            this.JobsLoaded &&\r\n            this.TripsLoaded &&\r\n            this.AddressesLoaded &&\r\n            this.ImagesLoaded &&\r\n            this.AlbumsLoaded &&\r\n            //this.WaypointTacksLoaded &&\r\n            this.TacksLoaded &&\r\n            this.LocationsLoaded &&\r\n            this.CrewsLoaded &&\r\n            this.LogBookEntriesLoaded &&\r\n            this.AlbumImagesLoaded &&\r\n            this.WifisLoaded &&\r\n            this.ContentPagesLoaded) {\r\n            for (let entity of this.Jobs()) {\r\n                if (entity.AssignedToId() !== undefined)\r\n                    entity.AssignedTo(this.GetPersonById(entity.AssignedToId()));\r\n                if (entity.TripId() !== undefined)\r\n                    entity.Trip(this.GetTripById(entity.TripId()));\r\n                if (entity.SuperJobId() !== undefined) {\r\n                    entity.SuperJob(this.GetJobById(entity.SuperJobId()));\r\n                    entity.SuperJob().SubJobs.push(entity);\r\n                }\r\n            }\r\n            for (let entity of this.Harbours()) {\r\n                entity.Album(this.GetAlbumById(entity.AlbumId()));\r\n            }\r\n            for (let entity of this.Locations()) {\r\n                entity.Address(this.GetAddressById(entity.AddressId()));\r\n                this.GetHarbourById(entity.HarbourId()).Locations.push(entity);\r\n            }\r\n            for (let entity of this.AlbumImages()) {\r\n                this.GetAlbumById(entity.AlbumId).Images.push(this.GetImageById(entity.ImageId));\r\n            }\r\n            for (let connection of mapViewModel.WaypointConnections()) {\r\n                const polyline = mapViewModel.AddPolyline([\r\n                    mapViewModel.GetWayPointById(connection.Waypoint1Id), mapViewModel\r\n                        .GetWayPointById(connection.Waypoint2Id)\r\n                ]);\r\n                addDummyHandle(polyline);\r\n            }\r\n            for (let entry of mapViewModel.LogBookEntries()) {\r\n                entry.Start(mapViewModel.GetHarbourById(entry.StartId()));\r\n                entry.End(mapViewModel.GetHarbourById(entry.EndId()));\r\n                entry.Album(mapViewModel.GetAlbumById(entry.AlbumId()));\r\n            }\r\n            for (let crew of mapViewModel.Crews()) {\r\n                const lBE = mapViewModel.GetLogBookEntryById(crew.TackId);\r\n                const tack = mapViewModel.GetTackById(crew.TackId);\r\n                const trip = mapViewModel.GetTripById(crew.TackId);\r\n                const p = mapViewModel.GetPersonById(crew.PersonId);\r\n                if (lBE !== undefined)\r\n                    lBE.Persons.push(p);\r\n                else if (tack !== undefined)\r\n                    tack.Persons.push(p);\r\n                else if (trip !== undefined)\r\n                    trip.Persons.push(p);\r\n            }\r\n            for (let wifi of mapViewModel.Wifis()) {\r\n                var h = mapViewModel.GetHarbourById(wifi.HarbourId());\r\n                h.Wifis.push(wifi);\r\n                wifi.Harbour(h);\r\n            }\r\n            ko.applyBindings(mapViewModel);\r\n            $(\"#loadingOverlay\").remove();\r\n        }\r\n    }\r\n\r\n    InitializeMap() {\r\n        mapViewModel.HarbourHelper.Detail(undefined);\r\n        for (let wp of mapViewModel.Waypoints()) {\r\n            if (wp.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(wp.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Waypoint, wp);\r\n        }\r\n        for (let h of mapViewModel.Harbours()) {\r\n            if (h.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(h.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Harbour, h);\r\n        }\r\n        for (let p of mapViewModel.Polylines) {\r\n            if (p.DummyHandle.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(p.DummyHandle.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Dummy, p.DummyHandle);\r\n        }\r\n        if (mapViewModel.MapMode() === MapMode.Admin) {\r\n            for (let p of mapViewModel.Polylines) {\r\n                p.addTo(mapViewModel.Map);\r\n                //p.contextmenu.enable();\r\n            }\r\n            mapViewModel.Map.contextmenu.enable();\r\n        } else {\r\n            for (let p of mapViewModel.Polylines) {\r\n                mapViewModel.Map.removeLayer(p);\r\n                //p.contextmenu.disable();\r\n            }\r\n            mapViewModel.Map.contextmenu.disable();\r\n        }\r\n    }\r\n\r\n    Map: L.mapbox.Map;\r\n\r\n    GetWaypointById(id: number): ClientModel.Waypoint {\r\n        for (let entity of this.Waypoints()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Waypoint with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetHarbourById(id: number): ClientModel.Harbour {\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Harbour with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetPersonById(id: number): ClientModel.Person {\r\n        for (let entity of this.Persons()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Person with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetJobById(id: number): ClientModel.Job {\r\n        for (let entity of this.Jobs()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Job with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetTripById(id: number): ClientModel.Trip {\r\n        for (let entity of this.Trips()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Trip with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetAddressById(id: number): ClientModel.Address {\r\n        for (let entity of this.Addresses()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Address with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetImageById(id: number): ClientModel.Image {\r\n        for (let entity of this.Images()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Image with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetTackById(id: number): ClientModel.Tack {\r\n        for (let entity of this.Tacks()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetLogBookEntryById(id: number): ClientModel.LogBookEntry {\r\n        for (let entity of this.LogBookEntries()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetAlbumById(id: number): ClientModel.Album {\r\n        for (let entity of this.Albums()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetLocationById(id: number): ClientModel.Location {\r\n        for (let entity of this.Locations()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Location with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    WaypointsLoaded = false;\r\n    WaypointConnectionsLoaded = false;\r\n    PersonsLoaded = false;\r\n    JobsLoaded = false;\r\n    TripsLoaded = false;\r\n    AddressesLoaded = false;\r\n    ImagesLoaded = false;\r\n    AlbumsLoaded = false;\r\n    WaypointTacksLoaded = false;\r\n    TacksLoaded = false;\r\n    LocationsLoaded = false;\r\n    AlbumImagesLoaded = false;\r\n    LogBookEntriesLoaded = false;\r\n    CrewsLoaded = false;\r\n    WifisLoaded = false;\r\n    ContentPagesLoaded = false;\r\n\r\n    Waypoints = ko.observableArray<ClientModel.Waypoint>();\r\n    WaypointConnections = ko.observableArray<ServerModel.WaypointConnection>();\r\n    Harbours = ko.observableArray<ClientModel.Harbour>();\r\n    Persons = ko.observableArray<ClientModel.Person>();\r\n    Jobs = ko.observableArray<ClientModel.Job>();\r\n    Trips = ko.observableArray<ClientModel.Trip>();\r\n    Addresses = ko.observableArray<ClientModel.Address>();\r\n    Images = ko.observableArray<ClientModel.Image>();\r\n    Tacks = ko.observableArray<ClientModel.Tack>();\r\n    Locations = ko.observableArray<ClientModel.Location>();\r\n    Supermarkets = ko.observableArray<ClientModel.Supermarket>();\r\n    Restaurants = ko.observableArray<ClientModel.Restaurant>();\r\n    Albums = ko.observableArray<ClientModel.Album>();\r\n    AlbumImages = ko.observableArray<ServerModel.AlbumImage>();\r\n    LogBookEntries = ko.observableArray<ClientModel.LogBookEntry>();\r\n    Crews = ko.observableArray<ServerModel.Crew>();\r\n    Wifis = ko.observableArray<ClientModel.Wifi>();\r\n    ContentPages = ko.observableArray<ClientModel.ContentPage>();\r\n\r\n    WaypointHelper = new EditingHelper(\"editingWaypointModal\",\r\n        \"deletingWaypointModal\",\r\n        () => this.CreateWaypoint(MarkerType.Waypoint),\r\n        this.Waypoints);\r\n    HarbourHelper = new EditingHelper(\"editingHarbourModal\",\r\n        \"deletingHarbourModal\",\r\n        () => this.CreateHarbour(),\r\n        this.Harbours,\r\n        rightSidebar);\r\n    PersonHelper = new EditingHelper(\"editingPersonModal\",\r\n        \"deletingPersonModal\",\r\n        () => new ClientModel.Person(),\r\n        this.Persons);\r\n    JobHelper = new EditingHelper(\"editingJobModal\", \"deletingJobModal\", () => new ClientModel.Job(), this.Jobs);\r\n    TripHelper = new EditingHelper(\"editingTripModal\", \"deletingTripModal\", () => new ClientModel.Trip(), this.Trips);\r\n    AddressHelper = new EditingHelper(\"editingAddressModal\",\r\n        \"deletingAddressModal\",\r\n        () => new ClientModel.Address(),\r\n        this.Addresses);\r\n    ImageHelper = new EditingHelper(\"editingImageModal\",\r\n        \"deletingImageModal\",\r\n        () => new ClientModel.Image(),\r\n        this.Images);\r\n    TackHelper = new EditingHelper(\"editingTackModal\", \"deletingTackModal\", () => new ClientModel.Tack(), this.Tacks);\r\n    LocationHelper = new EditingHelper(\"editingLocationModal\",\r\n        \"deletingLocationModal\",\r\n        () => new ClientModel.Location(),\r\n        this.Locations);\r\n    SupermarketHelper = new EditingHelper(\"editingSupermarketModal\",\r\n        \"deletingSupermarketModal\",\r\n        () => new ClientModel.Supermarket(),\r\n        this.Supermarkets);\r\n    RestaurantHelper = new EditingHelper(\"editingRestaurantModal\",\r\n        \"deletingRestaurantModal\",\r\n        () => new ClientModel.Restaurant(),\r\n        this.Restaurants);\r\n    LogBookEntryHelper = new EditingHelper(\"editingLogBookEntryModal\",\r\n        \"deletingLogBookEntryModal\",\r\n        () => {\r\n            const logBookEntry = new ClientModel.LogBookEntry();\r\n            if (this.LogBookEntries().length > 0) {\r\n                let lastEntry = this.LogBookEntries()[0];\r\n                for (let entry of this.LogBookEntries()) {\r\n                    if (new Date(entry.EndDate()) > new Date(lastEntry.EndDate()))\r\n                        lastEntry = entry;\r\n                }\r\n                logBookEntry.Start(lastEntry.End());\r\n                logBookEntry.MotorHoursStart(lastEntry.MotorHoursEnd());\r\n                logBookEntry.LogStart(lastEntry.LogEnd());\r\n                if (lastEntry.End().Name() !== \"Lippe\")\r\n                    logBookEntry.Persons(lastEntry.Persons().slice());\r\n            }\r\n            return logBookEntry;\r\n        },\r\n        this.LogBookEntries,\r\n        \"detailedLogBookEntryModal\");\r\n    ContentPageHelper = new EditingHelper(\"editingContentPageModal\",\r\n        \"deletingContentPageModal\",\r\n        () => new ClientModel.ContentPage(),\r\n        this.ContentPages,\r\n        \"detailedContentPageModal\");\r\n    WifiHelper = new EditingHelper(\"editingWifiModal\",\r\n        \"deletingWifiModal\",\r\n        () => {\r\n            const w = new ClientModel.Wifi();\r\n            w.HarbourId(mapViewModel.HarbourHelper.Detail().Id());\r\n            return w;\r\n        },\r\n        this.Wifis,\r\n        \"detailWifiModal\");\r\n\r\n    HarboursByName = ko.computed<Harbour[]>(() => this.Harbours.sort((h1, h2) => h1.Name() > h2.Name() ? 1 : -1)());\r\n    HarboursByDistance = ko.computed<Harbour[]>(() => this.Harbours.sort((h1, h2) => h1.Distance() - h2.Distance())());\r\n    LogBookEntriesByStartDate = ko\r\n        .computed<ClientModel.LogBookEntry[]>(() => this.LogBookEntries\r\n            .sort((l1, l2) => Date.parse(l1.StartDate()) - Date.parse(l2.StartDate()))());\r\n\r\n\r\n    //SortedLogBookEntries = ko.computed({\r\n    //    read: () => this.LogBookEntries.sort((l1, l2) => {\r\n    //        var t1 = l1.StartDate().getTime();\r\n    //        var t2 = l2.StartDate().getTime();\r\n    //        return t2 - t1;\r\n    //    }),\r\n    //    deferEvaluation: true\r\n    //});\r\n\r\n    InitGallery(item: ClientModel.Image, event: JQueryEventObject) {\r\n        const items = new Array<PhotoSwipe.Item>();\r\n        const albumElem = event.target.parentElement;\r\n        const currImage: ClientModel.Image = this as any;\r\n        for (let data of mapViewModel.AlbumStack()[0].Images()) {\r\n            items.push(({\r\n                h: data.Height(),\r\n                w: data.Width(),\r\n                src: data.Path()\r\n            } as any));\r\n        }\r\n        gallery = new PhotoSwipe(pswp,\r\n            PhotoSwipeUI_Default,\r\n            items,\r\n            {\r\n                index: mapViewModel.AlbumStack()[0].Images.indexOf(currImage) as number,\r\n                getThumbBoundsFn: (index: number): { x: number; y: number; w: number } => {\r\n                    const elem = $(\"img\", albumElem)[index];\r\n                    var padding = parseFloat(window.getComputedStyle(elem, null)\r\n                        .getPropertyValue(\"padding-left\")\r\n                        .replace(\"px\", \"\"));\r\n                    elem.scrollIntoView(false);\r\n                    const bounds = elem.getBoundingClientRect();\r\n                    return {\r\n                        x: bounds.left + padding,\r\n                        y: bounds.top + window.screenY + padding,\r\n                        w: bounds.width - (2 * padding)\r\n                    };\r\n                }\r\n            });\r\n        gallery.init();\r\n    }\r\n\r\n    AddHarbour(): void {\r\n        const harbour = mapViewModel.CreateHarbour(`Hafen ${this.Harbours.length}`, this.Map.getCenter());\r\n        mapViewModel.Harbours.push(harbour);\r\n        harbour.SaveToServer();\r\n    }\r\n\r\n    RemoveHarbour = () => {\r\n        mapViewModel.HarbourHelper.Detail().DeleteOnServer();\r\n    };\r\n    RemoveWaypoint = () => {\r\n        mapViewModel.WaypointHelper.Detail().DeleteOnServer();\r\n    };\r\n\r\n    //CopyHarbour(h1: Harbour, h2: Harbour): void {\r\n    //    this.CopyWaypoint(h1, h2);\r\n    //}\r\n\r\n    //CopyWaypoint(w1: Waypoint, w2: Waypoint) {\r\n    //    w2.WaypointNumber(w1.WaypointNumber());\r\n    //    w2.Latitude(w1.Latitude());\r\n    //    w2.Longitude(w1.Longitude());\r\n    //    w2.Name(w1.Name());\r\n    //    w2.Description(w1.Description());\r\n    //}\r\n\r\n    AddPolyline(waypoint?: Waypoint): L.Polyline;\r\n    AddPolyline(waypoints?: Waypoint[]): L.Polyline;\r\n    AddPolyline(arg?): L.Polyline {\r\n        //var options = {\r\n        //    contextmenu: true,\r\n        //    contextmenuInheritItems: false,\r\n        //    contextmenuItems: [\r\n        //        {\r\n        //            text: \"FFFFFFFFFFFFFFFFFF\",\r\n        //            callback: function() { console.log(this);\r\n        //                console.log(arguments);mapViewModel.HarbourHelper.Editing(this) }\r\n        //        },\r\n        //        {\r\n        //            text: \"Löschen\",\r\n        //            callback: function() { mapViewModel.HarbourHelper.Deleting(this) }\r\n        //        }\r\n        //    ]\r\n        //};\r\n\r\n        const polyline = new L.Polyline([]);\r\n\r\n        //polyline.bindContextMenu(options);\r\n\r\n        mapViewModel.Polylines.push(polyline);\r\n        polyline.addEventListener(\"click\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n                const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n                polyline.DummyHandle\r\n                    .SetLatLng(mapViewModel.Map\r\n                        .containerPointToLatLng(L.LineUtil\r\n                            .closestPointOnSegment(e.containerPoint,\r\n                            p1,\r\n                            p2)),\r\n                    false);\r\n\r\n                mapViewModel.Waypoints.push(polyline.DummyHandle);\r\n                polyline.DummyHandle.convertFromDummyHandle();\r\n            });\r\n        if (mapViewModel.MapMode() === MapMode.Admin)\r\n            polyline.addTo(this.Map);\r\n        polyline.Waypoints = new Array();\r\n        if (arg !== undefined)\r\n            if (arg instanceof Waypoint)\r\n                (arg as Waypoint).AddToPolyline(polyline);\r\n            else\r\n                for (let waypoint of arg as Waypoint[]) {\r\n                    waypoint.AddToPolyline(polyline);\r\n                }\r\n        polyline.addEventListener(\"mouseover\",\r\n            () => {\r\n                mapViewModel.HoveredPolyine = polyline;\r\n            });\r\n        return polyline;\r\n    }\r\n\r\n\r\n    MapMode = ko.observable<MapMode>();\r\n    DrawingLatLng: L.LatLng;\r\n    DrawingSourceWaypoint: Waypoint;\r\n    DrawingTargetWaypoint: Waypoint;\r\n    RemovePolyline = (polyline: L.Polyline) => {\r\n        this.Map.removeLayer(polyline);\r\n        this.DrawingPolyline = undefined;\r\n    };\r\n\r\n    GetMapMode(): MapMode {\r\n        if (this.DrawingPolyline !== undefined && this.DrawingLatLng !== undefined)\r\n            return MapMode.RouteDrawing;\r\n        return this.MapMode();\r\n    }\r\n\r\n    GetWayPointById(id: number): Waypoint {\r\n        for (let waypoint of this.Waypoints()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        for (let waypoint of this.Harbours()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        throw `No Waypoint with id ${id} in model`;\r\n    }\r\n\r\n    CalculateDistances(start = mapViewModel.HarbourHelper.Detail(), target?: ClientModel.Waypoint) {\r\n\r\n        const waypoints: Array<Waypoint> = [start];\r\n        const calculating = new Array<WaypointDistance>();\r\n        const calculated = new Array<WaypointDistance>();\r\n        const calculateRoute = target !== undefined;\r\n        calculating.push(new WaypointDistance(undefined, start, 0, waypoints, calculateRoute));\r\n        //for (let waypoint of mapViewModel.Waypoints()) {\r\n        //    waypoints.push(new WaypointDistance(null, waypoint, Number.POSITIVE_INFINITY));\r\n        //}\r\n        //for (let harbour of mapViewModel.Harbours()) {\r\n        //    if (harbour !== start) {\r\n        //        waypoints.push(new WaypointDistance(null, harbour, Number.POSITIVE_INFINITY));\r\n        //    }\r\n        //}\r\n        if (calculateRoute) {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.RoutePrecessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.RoutePrecessor(undefined);\r\n            }\r\n        } else {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.Precessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.Precessor(undefined);\r\n            }\r\n        }\r\n        while (calculating.length > 0) {\r\n            let minimalDist = Number.POSITIVE_INFINITY;\r\n            let minimalWp: WaypointDistance;\r\n            for (let wp of calculating) {\r\n                for (let cWp of wp.ConnectedWayPoints) {\r\n                    if ((calculateRoute ? cWp.RoutePrecessor() : cWp.Precessor()) !== undefined)\r\n                        removeFromArray(wp.ConnectedWayPoints, cWp);\r\n                }\r\n                if (wp.ConnectedWayPoints.length === 0) {\r\n                    removeFromArray(calculating, wp);\r\n                    calculated.push(wp);\r\n                } else {\r\n                    const dist = wp.Distance + wp.ConnectedWayPoints[0].LatLng.distanceTo(wp.LatLng) / 1.852;\r\n                    if (dist < minimalDist) {\r\n                        minimalDist = dist;\r\n                        minimalWp = wp;\r\n                    }\r\n                }\r\n            }\r\n            if (minimalWp !== undefined) {\r\n                calculating.push(new WaypointDistance(minimalWp.Waypoint,\r\n                    minimalWp.ConnectedWayPoints.shift(),\r\n                    minimalDist,\r\n                    waypoints,\r\n                    calculateRoute));\r\n                //if (minimalWP.Waypoint === target)\r\n                //    break;\r\n            }\r\n        }\r\n        if (calculateRoute)\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.RouteDistance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n        else\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.Distance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n    }\r\n\r\n    private highlightedRoute: L.Polyline;\r\n    private routeFixed = false;\r\n    private previousBounds: L.LatLngBounds;\r\n    private noRevertToPreviousBounds = false;\r\n\r\n    ShowRoute(h: ClientModel.Waypoint) {\r\n        if (mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        }\r\n        if (h === undefined)\r\n            h = (this as any);\r\n        if (!(h instanceof ClientModel.Harbour))\r\n            return;\r\n        const latLngs = [h.LatLng];\r\n        let dist = h.Distance();\r\n        if (dist === undefined || dist === null)\r\n            dist = 0;\r\n        while (h.Precessor() !== undefined) {\r\n            h = h.Precessor();\r\n            latLngs.push(h.LatLng);\r\n        }\r\n        mapViewModel.highlightedRoute = L.polyline(latLngs);\r\n        mapViewModel.highlightedRoute.addTo(mapViewModel.Map);\r\n        mapViewModel.highlightedRoute.bindLabel(dist.toString() + \" sm\", { noHide: true });\r\n        mapViewModel.FitBounds(mapViewModel.highlightedRoute.getBounds());\r\n    }\r\n\r\n    FitBounds(bounds: L.LatLngBounds) {\r\n        const map = mapViewModel.Map;\r\n        const currentBounds = map.getBounds();\r\n        if (!currentBounds.contains(bounds)) {\r\n            if (mapViewModel.previousBounds === undefined)\r\n                mapViewModel.previousBounds = currentBounds;\r\n            map.fitBounds(bounds);\r\n        }\r\n    }\r\n\r\n    HideRoute(force = false) {\r\n        if ((!mapViewModel.routeFixed || force) && mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.Map.removeLayer(mapViewModel.highlightedRoute);\r\n            mapViewModel.highlightedRoute = undefined;\r\n            if (!mapViewModel.noRevertToPreviousBounds && mapViewModel.previousBounds !== undefined) {\r\n                const tmpBounds = mapViewModel.previousBounds;\r\n                mapViewModel.previousBounds = undefined;\r\n                window.setTimeout(() => {\r\n                    if (mapViewModel.previousBounds === undefined)\r\n                        mapViewModel.Map.fitBounds(tmpBounds);\r\n                    else\r\n                        mapViewModel.previousBounds = tmpBounds;\r\n                },\r\n                    100);\r\n            }\r\n        }\r\n    }\r\n\r\n    FixRoute() {\r\n        mapViewModel.routeFixed = true;\r\n        mapViewModel.previousBounds = undefined;\r\n    }\r\n\r\n    CreateWaypoint(markerType: MarkerType): Waypoint;\r\n    CreateWaypoint(latLng: L.LatLng, markerType: MarkerType): Waypoint;\r\n    CreateWaypoint(latLng?: L.LatLng | MarkerType, markerType?: MarkerType): Waypoint {\r\n        let wp: Waypoint;\r\n        if (markerType !== undefined)\r\n            wp = new Waypoint(latLng as L.LatLng, markerType, mapViewModel.Map as L.mapbox.Map);\r\n        else\r\n            wp = new Waypoint(markerType, mapViewModel.Map as L.mapbox.Map);\r\n        this.InitializeWaypoint(wp, markerType);\r\n        return wp;\r\n    }\r\n\r\n    InitializeWaypoint(wp: Waypoint, markerType: MarkerType) {\r\n        this.CreateMarker(markerType, wp);\r\n    }\r\n\r\n    CreateMarker(markerType: MarkerType, wp: ClientModel.Waypoint) {\r\n        if (mapViewModel.MapMode() === MapMode.Admin || markerType === MarkerType.Harbour) {\r\n            const options: L.MarkerOptions = {\r\n                draggable: (mapViewModel.MapMode() === MapMode.Admin)\r\n            };\r\n            if (markerType === MarkerType.Dummy) {\r\n                options.opacity = 0;\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin &&\r\n                (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy)) {\r\n                options.icon = new L.Icon({\r\n                    iconUrl: \"/images/waypointhandle.png\",\r\n                    iconSize: new L.Point(10, 10, true),\r\n                    className: \"waypoint\"\r\n                });\r\n\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                options.contextmenu = true;\r\n                options.contextmenuInheritItems = false;\r\n                // ReSharper disable SuspiciousThisUsage\r\n                if (markerType === MarkerType.Harbour) {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.HarbourHelper.Editing(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.HarbourHelper.Deleting(this) }\r\n                        }\r\n                    ];\r\n                } else {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.WaypointHelper.Editing(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.WaypointHelper.Deleting(this) }\r\n                        }\r\n                    ];\r\n                }\r\n                // ReSharper restore SuspiciousThisUsage\r\n            }\r\n\r\n            const marker = new L.Marker(wp.LatLng, options);\r\n            marker.addTo(this.Map);\r\n            marker.Waypoint = wp;\r\n            wp.marker = marker;\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                if (markerType === MarkerType.Dummy)\r\n                    marker.addEventListener(\"mouseout\",\r\n                        (e) => {\r\n                            if (e.target.Waypoint.IsDummy())\r\n                                mapViewModel.HoveredPolyine = undefined;\r\n\r\n                        });\r\n                marker.addEventListener(\"drag\", () => { wp.SetLatLng(wp.marker.getLatLng()); });\r\n                if (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy) {\r\n                    this.WaypointMarkers.push(wp.marker);\r\n                    wp.marker.Point = mapViewModel.Map.latLngToContainerPoint(wp.LatLng);\r\n                }\r\n                wp.marker.addEventListener(\"click\",\r\n                    () => {\r\n                        if (wp.IsDummy()) {\r\n                            mapViewModel.HoveredPolyine = undefined;\r\n                            wp.convertFromDummyHandle();\r\n                            mapViewModel.Waypoints.push(wp);\r\n                        }\r\n                        if (mapViewModel.GetMapMode() === MapMode.RouteDrawing) {\r\n                            if (!wp.IsInPolyline(mapViewModel.DrawingPolyline)) {\r\n                                ServerApi.WaypointConnections\r\n                                    .Connect(wp.Id(), mapViewModel.DrawingPolyline.Waypoints[0].Id());\r\n                                wp.AddToPolyline(mapViewModel.DrawingPolyline);\r\n                                removeFromPolyline(mapViewModel.DrawingPolyline, mapViewModel.DrawingLatLng);\r\n                                addDummyHandle(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            } else {\r\n                                removePolyline(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            }\r\n                        }\r\n                    });\r\n                wp.marker.addEventListener(\"dblclick\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        mapViewModel.DrawingPolyline = mapViewModel.AddPolyline(wp);\r\n                        mapViewModel.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                        mapViewModel.DrawingPolyline.addLatLng(mapViewModel.DrawingLatLng);\r\n                    });\r\n                if (markerType === MarkerType.Dummy)\r\n                    wp.marker.addOneTimeEventListener(\"drag\",\r\n                        () => {\r\n                            wp.convertFromDummyHandle();\r\n                            mapViewModel.Waypoints.push(wp);\r\n                        });\r\n                //else if (markerType === MarkerType.Waypoint) {\r\n                //    wp.Name(`Wegpunkt ${mapViewModel.Waypoints().length + 1}`);\r\n                //}\r\n                wp.marker.addEventListener(\"dragend\", () => { wp.SaveToServer(); });\r\n            } else if (markerType === MarkerType.Harbour) {\r\n                wp.marker.addEventListener(\"mouseover\",\r\n                    () => {\r\n                        if (mapViewModel.HarbourHelper.Detail() !== undefined)\r\n                            mapViewModel.ShowRoute(wp);\r\n                    });\r\n                wp.marker.addEventListener(\"click\", () => mapViewModel.HarbourHelper.Detail(wp as ClientModel.Harbour));\r\n            }\r\n        }\r\n    }\r\n\r\n    CreateHarbour();\r\n    CreateHarbour(name: string, latLng: L.LatLng);\r\n    CreateHarbour(name?: string, latLng?: L.LatLng) {\r\n        let h: Harbour;\r\n        if (latLng !== undefined)\r\n            h = new Harbour(latLng, this.Map as L.mapbox.Map);\r\n        else\r\n            h = new Harbour(this.Map as L.mapbox.Map);\r\n        h.Name(name);\r\n        this.InitializeWaypoint(h, MarkerType.Harbour);\r\n        return h;\r\n    }\r\n\r\n    DrawingPolyline: L.Polyline;\r\n    Polylines = new Array<L.Polyline>();\r\n    WaypointMarkers = new Array();\r\n    HoveredPolyine: L.Polyline;\r\n\r\n    SetOptionKey(option, item: Entity) {\r\n        ko.applyBindingsToNode(option, { attr: { \"data-id\": item.Id } }, item);\r\n        ko.applyBindingsToNode(option, { attr: { \"value\": item.Id } }, item);\r\n    };\r\n\r\n    HarboursToSelect = ko.computed(() => {\r\n        return (this.HarboursByName() as any[]).concat([{ Name: \"Neuer Hafen...\", IsDummy: true }]);\r\n    });\r\n\r\n    ProcessHarbourSelectOptions = (option: HTMLOptionElement, item) => {\r\n        if (item !== undefined && item !== null && item.IsDummy === true) {\r\n            option.value = \"filled\";\r\n            const context = ko.contextFor(option);\r\n            const select = $(option).parent();\r\n            if (select.data(\"new-change-handler\") === undefined)\r\n                select.data(\"new-change-handler\",\r\n                    select.change(() => {\r\n                        if ($(option).is(\":selected\")) {\r\n                            const harbour = this.CreateHarbour();\r\n                            this.HarbourHelper.Editing(harbour);\r\n                            const subscription = this.HarbourHelper.Editing.subscribe(() => {\r\n                                if (harbour.Id() !== undefined) {\r\n                                    this.Harbours.push(harbour);\r\n                                    context.$data.Harbour(harbour);\r\n                                } else {\r\n                                    harbour.RemoveFromMap();\r\n                                    context.$data.Harbour(undefined);\r\n                                }\r\n                                subscription.dispose();\r\n                            });\r\n                        }\r\n                    }));\r\n        }\r\n    };\r\n    PersonsToSelect = ko.computed(() => {\r\n        return (this.Persons().sort((p1, p2) => p1.FullName() > p2.FullName() ? 1 : -1) as any[])\r\n            .concat([{ FullName: \"Neue Person...\", IsDummy: true }]);\r\n    });\r\n\r\n    ProcessPersonSelectOptions = (option: HTMLOptionElement, item) => {\r\n        if (item !== undefined && item !== null && item.IsDummy === true) {\r\n            option.value = \"filled\";\r\n            const context = ko.contextFor(option);\r\n            const select = $(option).parent();\r\n            if (select.data(\"new-change-handler\") === undefined)\r\n                select.data(\"new-change-handler\",\r\n                    select.change(() => {\r\n                        if ($(option).is(\":selected\")) {\r\n                            const person = new Person();\r\n                            this.PersonHelper.Editing(person);\r\n                            const subscription = this.PersonHelper.Editing.subscribe(() => {\r\n                                if (person.Id() !== undefined) {\r\n                                    this.Persons.push(person);\r\n                                    context.$data.Person(person);\r\n                                } else {\r\n                                    context.$data.Person(undefined);\r\n                                }\r\n                                subscription.dispose();\r\n                            });\r\n                        }\r\n                    }));\r\n        }\r\n    };\r\n    AlbumStack = ko.observableArray<ClientModel.Album>();\r\n\r\n    GetPositionForWaypoint = (waypoint: ClientModel.Waypoint) => {\r\n        navigator.geolocation.getCurrentPosition((location) => {\r\n            waypoint.Latitude(location.coords.latitude);\r\n            waypoint.Longitude(location.coords.longitude);\r\n        }, function () { console.log(arguments); alert(\"Die Position konnte nicht abgerufen werden\") });\r\n    }\r\n\r\n    LogBookPager = new Pager(this.LogBookEntries,\r\n        {\r\n            Columns: [\r\n                new PagerColumn<ClientModel.LogBookEntry, string>(\"Start\",\r\n                    (h) => h.Start().Name,\r\n                    { Sorter: PagerColumn.StringSorter(), Visible: false }),\r\n                new PagerColumn<ClientModel.LogBookEntry, string>(\"Ziel\",\r\n                    (h) => h.End().Name,\r\n                    { Sorter: PagerColumn.StringSorter(), Width: 200 }),\r\n                new PagerColumn<ClientModel.LogBookEntry, string>(\"Datum\",\r\n                    (h) => h.StartDate,\r\n                    {\r\n                        Sorter: PagerColumn.DateSorter(),\r\n                        Renderer: PagerColumn.DateRenderer(),\r\n                        Width: 150,\r\n                        SortMode: SortModes.Descending\r\n                    }),\r\n                new PagerColumn<ClientModel.\r\n                    LogBookEntry,\r\n                    string>(\"Dauer\", (h) => h.SaillingTime, { Sorter: PagerColumn.StringSorter() }),\r\n                new PagerColumn<ClientModel.LogBookEntry,\r\n                    Person[\r\n                    ]>(\"Crew\",\r\n                    (h) => h.Persons,\r\n                    {\r\n                        Renderer: PagerColumn.ArrayRenderer<Person>(\"<br />\", (p) => p.FullName()),\r\n                        Width: 150\r\n                    }),\r\n                new PagerColumn<ClientModel.LogBookEntry, string>(\"Besondere Vorkomnisse\", (h) => h.SpecialOccurences)\r\n            ] as any,\r\n            UseResponsiveTable: true,\r\n            UseStripedTable: true,\r\n            EditingHelper: this.LogBookEntryHelper,\r\n            ShowEditDeleteControls: true,\r\n            IdPrefix: \"logBookOverview_\",\r\n            SpecialActions: [new PagerSpecialAction(\"Neuer Eintrag\", () => $(\"#editingLogBookEntryModal\").modal(\"show\"), undefined, this.IsLoggedIn)]\r\n        });\r\n\r\n    HarbourDistancePager = new Pager(ko.computed(()=>this.Harbours().slice().filter((h)=>h.Distance()>0)),\r\n        {\r\n            Columns: [\r\n                new PagerColumn<ClientModel.Harbour, string>(\"Name\",\r\n                    (h) => h.Name,\r\n                    { Sorter: PagerColumn.StringSorter() }),\r\n                new PagerColumn<ClientModel.Harbour, number>(\"Entfernung\",\r\n                    (h) => h.Distance,\r\n                    {\r\n                        Sorter: PagerColumn.NumberSorter(),\r\n                        Renderer: (d) => d + \" sm\",\r\n                        SortMode: SortModes.Ascending\r\n                    })\r\n            ] as any,\r\n            EditingHelper: this.HarbourHelper,\r\n            UseResponsiveTable: true,\r\n            UseStripedTable: true,\r\n            UseSmallColumnControls: true,\r\n            ShowColumnSelector: false,\r\n            IdPrefix: \"harbourDistance_\",\r\n            SpecialColumnActions: [new PagerSpecialColumnAction<ClientModel.Harbour>(\"Route zeigen\", (h) => {\r\n                this.ShowRoute(h);\r\n                this.FixRoute();\r\n            })]\r\n        });\r\n}\r\n\r\nvar dropzoneModalOpenedByDrag = false;\r\nvar dropzoneModal = $(\"#dropzoneModal\");\r\nvar jobOverviewModal = $(\"#jobOverviewModal\");\r\nvar personOverviewModal = $(\"#personOverviewModal\");\r\nvar dropzone: Dropzone;\r\nvar hasDrag = false;\r\nvar uploadModalVisible = false;\r\nvar pswp = $(\".pswp\")[0];\r\nvar personDeails = $(\"#personDetails\");\r\nvar deletePerson = $(\"#deletePerson\");\r\nvar leftSidebar = new Sidebar($(\"#leftSidebar\"));\r\nvar rightSidebar = new Sidebar($(\"#rightSidebar\"));\r\nvar bottomSidebar = new Sidebar($(\"#bottomSidebar\"));\r\nvar harbourInfo = $(\"#harbourInfo\");\r\n\r\nvar mapViewModel = new MapViewModel(MapMode.View);\r\n\r\nDropzone.options.dropzone =\r\n    {\r\n        acceptedFiles: \"image/jpeg,image/png\",\r\n        dictInvalidFileType: \"Dieser Dateityp wird nicht unterstützt\",\r\n        dictDefaultMessage: \"Dateien hier ablegen\",\r\n        init() {\r\n            dropzone = this;\r\n            dropzone.on(\"success\",\r\n                (e, data: ServerModel.AlbumImage) => {\r\n                    var image = new ClientModel.Image().LoadFromServerEntity(data.Image);\r\n                    mapViewModel.Images.push(image);\r\n                    mapViewModel.GetAlbumById(data.AlbumId).Images.push(image);\r\n                });\r\n            dropzone.on(\"queuecomplete\",\r\n                () => {\r\n                    if (dropzoneModalOpenedByDrag)\r\n                        dropzoneModal.modal(\"hide\");\r\n                });\r\n            dropzone.on(\"dragover\", () => { hasDrag = true; });\r\n        }\r\n    };\r\ndocument.ondragenter =\r\n    (e: DragEvent) => {\r\n        if (mapViewModel.IsLoggedIn &&\r\n            !uploadModalVisible &&\r\n            !hasDrag &&\r\n            !dropzoneModalOpenedByDrag &&\r\n            dropzoneModal.is(\":not(.in)\") &&\r\n            e.dataTransfer.types[0] === \"Files\" &&\r\n            mapViewModel.AlbumStack()[0] !== undefined) {\r\n            dropzoneModal.modal(\"show\");\r\n            uploadModalVisible = true;\r\n            dropzoneModalOpenedByDrag = true;\r\n        }\r\n\r\n        hasDrag = true;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndocument.ondragover = () => { hasDrag = true; };\r\ndocument.ondragleave =\r\n    (e: DragEvent) => {\r\n        if (uploadModalVisible && hasDrag && dropzoneModalOpenedByDrag && dropzone.getQueuedFiles().length === 0 ||\r\n            dropzone.getUploadingFiles().length === 0) {\r\n            hasDrag = false;\r\n            window.setTimeout(() => {\r\n                if (!hasDrag) {\r\n                    dropzoneModal.modal(\"hide\");\r\n                    uploadModalVisible = false;\r\n                }\r\n            },\r\n                1000);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndropzoneModal.on(\"hide.bs.modal\",\r\n    e => {\r\n        if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            alert(\"Das Fenster kann nicht geschlossen werden, während Dateien hochgeladen werden.\");\r\n            return false;\r\n        } else {\r\n            dropzone.removeAllFiles();\r\n            dropzoneModalOpenedByDrag = false;\r\n        }\r\n    });\r\nvar gallery: PhotoSwipe<PhotoSwipe.Options>;\r\n\r\n$(\".modal\")\r\n    .on(\"hidden.bs.modal\",\r\n    function () {\r\n        $(this).removeClass(\"fv-modal-stack\");\r\n        $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") - 1);\r\n    });\r\n\r\n\r\n$(\".modal\")\r\n    .on(\"shown.bs.modal\",\r\n    function () {\r\n\r\n        // keep track of the number of open modals\r\n\r\n        if (typeof ($(\"body\").data(\"fv_open_modals\")) == \"undefined\") {\r\n            $(\"body\").data(\"fv_open_modals\", 0);\r\n        }\r\n\r\n\r\n        // if the z-index of this modal has been set, ignore.\r\n\r\n        if ($(this).hasClass(\"fv-modal-stack\")) {\r\n            return;\r\n        }\r\n\r\n        $(this).addClass(\"fv-modal-stack\");\r\n\r\n        $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") + 1);\r\n\r\n        $(this).css(\"z-index\", 1040 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n        $(\".modal-backdrop\")\r\n            .not(\".fv-modal-stack\")\r\n            .css(\"z-index\", 1039 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n\r\n        $(\".modal-backdrop\")\r\n            .not(\"fv-modal-stack\")\r\n            .addClass(\"fv-modal-stack\");\r\n\r\n    });\r\n\r\ninterface KnockoutBindingHandlers {\r\n    daterange?: KnockoutBindingHandler;\r\n}\r\n\r\nko.bindingHandlers.daterange = {\r\n    init(element: any, valueAccessor: () => any, allBindingsAccessor?: KnockoutAllBindingsAccessor, viewModel?: any,\r\n        bindingContext?: KnockoutBindingContext) {\r\n        let value = valueAccessor()();\r\n        if (value === undefined)\r\n            valueAccessor()(new Date().toJSON());\r\n        value = valueAccessor()();\r\n        $(element)\r\n            .daterangepicker({\r\n                \"singleDatePicker\": true,\r\n                \"showDropdowns\": true,\r\n                \"timePicker\": true,\r\n                \"timePicker24Hour\": true,\r\n                \"timePickerIncrement\": 15,\r\n                \"locale\": {\r\n                    \"format\": \"DD.MM.YYYY HH:mm\",\r\n                    \"separator\": \" - \",\r\n                    \"applyLabel\": \"Speichern\",\r\n                    \"cancelLabel\": \"Abbrechen\",\r\n                    \"fromLabel\": \"Von\",\r\n                    \"toLabel\": \"Bis\",\r\n                    \"customRangeLabel\": \"Custom\",\r\n                    \"weekLabel\": \"W\",\r\n                    \"daysOfWeek\": [\r\n                        \"S0\",\r\n                        \"Mo\",\r\n                        \"Di\",\r\n                        \"Mi\",\r\n                        \"Do\",\r\n                        \"Fr\",\r\n                        \"Sa\"\r\n                    ],\r\n                    \"monthNames\": [\r\n                        \"Januar\",\r\n                        \"Februar\",\r\n                        \"März\",\r\n                        \"April\",\r\n                        \"Mai\",\r\n                        \"Juni\",\r\n                        \"Juli\",\r\n                        \"August\",\r\n                        \"September\",\r\n                        \"Oktober\",\r\n                        \"November\",\r\n                        \"Dezember\"\r\n                    ],\r\n                    \"firstDay\": 1\r\n                },\r\n                \"alwaysShowCalendars\": true,\r\n                \"startDate\": value,\r\n                \"endDate\": value\r\n            },\r\n            (start) => {\r\n                valueAccessor()(start._d.toJSON());\r\n            });\r\n    },\r\n    update(element: any, valueAccessor: () => any, allBindingsAccessor?: KnockoutAllBindingsAccessor, viewModel?: any,\r\n        bindingContext?: KnockoutBindingContext) {\r\n        $(element).data(\"daterangepicker\").setStartDate(moment(valueAccessor()()));\r\n    }\r\n};\r\n\r\n\r\nwindow.Parsley.on(\"form:validate\",\r\n    form => {\r\n        if (form.submitEvent === undefined)\r\n            return false;\r\n    });\r\n\r\nwindow.Parsley.on(\"form:submit\", form => false);\r\n\r\n$(document)\r\n    .on(\"focusin\",\r\n    function (e) {\r\n        if ($(e.target).closest(\".mce-window\").length) {\r\n            e.stopImmediatePropagation();\r\n        }\r\n    });","/// <reference path=\"../../clientmodel.ts\" />\n/// <reference path=\"../../servermodel.ts\" />\n/// <reference path=\"../../serverapi.ts\" />\n/// <reference path=\"../../../../typings/browser/definitions/moment/index.d.ts\" />\nvar Waypoint = ClientModel.Waypoint;\nvar Harbour = ClientModel.Harbour;\nvar WaypointDistance = ClientModel.WaypointDistance;\nvar ctrlPressed = false;\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    $(\"body\").addClass(\"mobile\");\n}\nfunction renderTime(startDate, endDate) {\n    if (startDate instanceof Date)\n        return renderTime(endDate.getTime() - startDate.getTime());\n    var duration = startDate;\n    var time = Math.floor(duration / 60000);\n    var mins = (time % 60).toString();\n    if (mins.length === 1)\n        mins = \"0\" + mins;\n    time = Math.floor(time / 60);\n    return time.toString() + \":\" + mins;\n}\nfunction getMiddle(pol) {\n    var start = pol.getLatLngs()[0];\n    var end = pol.getLatLngs()[1];\n    //if (end === undefined)\n    //    return start;\n    return new L.LatLng(start.lat + ((end.lat - start.lat) / 2), start.lng + ((end.lng - start.lng) / 2));\n}\nfunction splitPolyline(polyline) {\n    if (polyline.Waypoints.length === 2 && polyline.DummyHandle instanceof Waypoint) {\n        var w1 = polyline.Waypoints[0];\n        var w2 = polyline.DummyHandle;\n        var w3 = polyline.Waypoints[1];\n        w2.RemoveFromPolyline(polyline);\n        polyline.DummyHandle = undefined;\n        w2.AddToPolyline(polyline);\n        w3.RemoveFromPolyline(polyline);\n        addDummyHandle(polyline);\n        addDummyHandle(mapViewModel.AddPolyline([w2, w3]));\n        return;\n    }\n    throw new Error(\"Cannot split polyline. Polyline has no dummy handle or less or more than 2 waypoints\");\n}\nfunction removePolyline(polyline) {\n    for (var _i = 0, _a = polyline.Waypoints; _i < _a.length; _i++) {\n        var waypoint = _a[_i];\n        waypoint.RemoveFromPolyline(polyline);\n    }\n    if (polyline.DummyHandle !== undefined) {\n        polyline.DummyHandle.RemoveFromPolyline(polyline);\n        polyline.DummyHandle.RemoveFromMap();\n    }\n    mapViewModel.Map.removeLayer(polyline);\n}\nfunction addDummyHandle(polyline) {\n    if (polyline.DummyHandle === undefined) {\n        polyline.DummyHandle = mapViewModel.CreateWaypoint(getMiddle(polyline), MarkerType.Dummy);\n        polyline.DummyHandle.AddToPolyline(polyline);\n    }\n}\nfunction redrawPolyline(polyline) {\n    var middleLatLng = getMiddle(polyline);\n    if (polyline.DummyHandle === undefined)\n        addDummyHandle(polyline);\n    if (polyline.DummyHandle.Longitude() !== middleLatLng.lng || polyline.DummyHandle.Latitude() !== middleLatLng.lat)\n        polyline.DummyHandle.SetLatLng(middleLatLng);\n    else\n        polyline.redraw();\n}\nfunction removeFromPolyline(polyline, latLng) {\n    removeFromArray(polyline.getLatLngs(), latLng);\n    polyline.redraw();\n}\nfunction removeFromArray(arr, obj) {\n    var tmpArr = new Array();\n    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n        var item = arr_1[_i];\n        if (item !== obj)\n            tmpArr.push(item);\n    }\n    if (tmpArr.length === arr.length)\n        return false;\n    while (arr.pop()) {\n    }\n    while (tmpArr.length > 0) {\n        arr.push(tmpArr.shift());\n    }\n    return true;\n}\nvar MapMode;\n(function (MapMode) {\n    MapMode[MapMode[\"Admin\"] = 0] = \"Admin\";\n    MapMode[MapMode[\"View\"] = 1] = \"View\";\n    MapMode[MapMode[\"TripPlanning\"] = 2] = \"TripPlanning\";\n    MapMode[MapMode[\"RouteDrawing\"] = 3] = \"RouteDrawing\";\n})(MapMode || (MapMode = {}));\nvar EditingHelper = (function () {\n    function EditingHelper(editingModalId, deletingModalId, Factory, Dataset, detailModalId) {\n        var _this = this;\n        this.Factory = Factory;\n        this.Dataset = Dataset;\n        this.EditingModalOpen = false;\n        this.DeletingModalOpen = false;\n        this.DetailModalOpen = false;\n        this.HasDetailView = false;\n        this.Detail = ko.observable();\n        this.Editing = ko.observable();\n        this.Deleting = ko.observable();\n        this.Delete = function () {\n            _this.Deleting()\n                .DeleteOnServer()\n                .done(function () {\n                //this.Dataset.remove(this.Deleting());\n                _this.Deleting(undefined);\n                if (_this.Detail() !== undefined)\n                    _this.Detail(undefined);\n                if (_this.Editing() !== undefined)\n                    _this.Editing(undefined);\n            });\n        };\n        this.Save = function () {\n            if (_this.Parsley !== undefined)\n                _this.Parsley.whenValidate()\n                    .done(function () {\n                    var isNew = _this.Editing().Id() === undefined;\n                    _this.Editing()\n                        .SaveToServer()\n                        .done(function () {\n                        //if (isNew)\n                        //    this.Dataset.push(this.Editing());\n                        _this.Editing(undefined);\n                    });\n                });\n            else {\n                var isNew = _this.Editing().Id() === undefined;\n                _this.Editing()\n                    .SaveToServer()\n                    .done(function () {\n                    //if (isNew)\n                    //    this.Dataset.push(this.Editing());\n                    _this.Editing(undefined);\n                });\n            }\n        };\n        this.EditingModal = $(\"#\" + editingModalId);\n        this.DeletingModal = $(\"#\" + deletingModalId);\n        if ($(\"form:first\").length === 1)\n            this.Parsley = $(\"form:first\", this.EditingModal).parsley(window.ParsleyConfig);\n        this.EditingModal.on(\"show.bs.modal\", function () {\n            _this.EditingModalOpen = true;\n            if (_this.Editing() === undefined)\n                _this.Editing(_this.Factory());\n            mapViewModel.AlbumStack.unshift(_this.Editing().Album());\n        });\n        this.EditingModal.on(\"shown.bs.modal\", function () {\n            window.setTimeout(function () { return $(\"input, select, textarea\", _this.EditingModal).first().focus(); }, 200);\n        });\n        this.EditingModal.on(\"hidden.bs.modal\", function () {\n            if (_this.Editing() !== undefined)\n                _this.Editing(undefined);\n            _this.EditingModalOpen = false;\n            mapViewModel.AlbumStack.shift();\n        });\n        this.Editing.subscribe(function (entity) {\n            if (entity === undefined && _this.EditingModalOpen) {\n                _this.EditingModal.modal(\"hide\");\n            }\n            else if (!_this.EditingModalOpen) {\n                entity.SaveState();\n                _this.EditingModal.modal(\"show\");\n            }\n        });\n        this.Editing.subscribe(function () {\n            if (_this.Editing() !== undefined) {\n                _this.Editing().RevertState(true);\n            }\n        }, this, \"beforeChange\");\n        this.DeletingModal.on(\"show.bs.modal\", function () {\n            _this.DeletingModalOpen = true;\n            mapViewModel.AlbumStack.unshift(undefined);\n        });\n        this.DeletingModal.on(\"hidden.bs.modal\", function () {\n            if (_this.Deleting() !== undefined)\n                _this.Deleting(undefined);\n            mapViewModel.AlbumStack.shift();\n            _this.DeletingModalOpen = false;\n        });\n        this.Deleting.subscribe(function (entity) {\n            if (entity === undefined && _this.DeletingModalOpen) {\n                _this.DeletingModal.modal(\"hide\");\n            }\n            else if (!_this.DeletingModalOpen) {\n                _this.DeletingModal.modal(\"show\");\n            }\n        });\n        if (detailModalId !== undefined) {\n            this.HasDetailView = true;\n            if (detailModalId instanceof Sidebar) {\n                this.DetailSidebar = detailModalId;\n                this.Detail.subscribe(function (entity) {\n                    if (entity === undefined && _this.DetailSidebar.IsActiv()) {\n                        mapViewModel.AlbumStack.shift();\n                        _this.DetailSidebar.Hide();\n                    }\n                    else if (entity !== undefined && !_this.DetailSidebar.IsActiv()) {\n                        _this.DetailSidebar.Show();\n                        mapViewModel.AlbumStack.unshift(entity.Album());\n                    }\n                });\n            }\n            else {\n                this.DetailModal = $(\"#\" + detailModalId);\n                this.Detail.subscribe(function (entity) {\n                    if (entity === undefined && _this.DetailModalOpen) {\n                        _this.DetailModal.modal(\"hide\");\n                    }\n                    else if (entity !== undefined && !_this.DetailModalOpen) {\n                        _this.DetailModal.modal(\"show\");\n                    }\n                });\n                this.DetailModal.on(\"show.bs.modal\", function () {\n                    _this.DetailModalOpen = true;\n                    mapViewModel.AlbumStack.unshift(_this.Detail().Album());\n                });\n                this.DetailModal.on(\"hide.bs.modal\", function () {\n                    _this.DetailModalOpen = false;\n                    mapViewModel.AlbumStack.shift();\n                });\n            }\n        }\n    }\n    return EditingHelper;\n}());\nvar MapViewModel = (function () {\n    function MapViewModel(mapMode) {\n        var _this = this;\n        this.IsLoggedIn = ko.observable(false);\n        this.routePolyline = ko.observable();\n        this.IsLastTakInRoute = ko.computed({\n            read: function () {\n                var trip = mapViewModel.TripHelper.Editing();\n                var h = mapViewModel.HarbourHelper.Detail();\n                return trip !== undefined && h !== undefined && trip.Tacks()[trip.Tacks().length - 1].Start() === h;\n            },\n            deferEvaluation: true\n        });\n        this.GetRouteDistance = ko.computed({\n            read: function () {\n                var distance = 0;\n                for (var _i = 0, _a = mapViewModel.TripHelper.Editing().Tacks(); _i < _a.length; _i++) {\n                    var tack = _a[_i];\n                    if (!isNaN(tack.Distance()))\n                        distance += tack.Distance();\n                }\n                return distance;\n            },\n            deferEvaluation: true\n        });\n        this.TopJobs = ko.computed({\n            read: function () {\n                return mapViewModel.Jobs().filter(function (j) { return j.SuperJobId() === undefined; });\n            },\n            deferEvaluation: true\n        });\n        this.IsInViewMode = ko.computed({\n            read: function () {\n                return mapViewModel.MapMode() === MapMode.View;\n            },\n            deferEvaluation: true\n        });\n        this.IsInAdminMode = ko.computed({\n            read: function () {\n                return mapViewModel.MapMode() === MapMode.Admin;\n            },\n            deferEvaluation: true\n        });\n        this.WaypointsLoaded = false;\n        this.WaypointConnectionsLoaded = false;\n        this.PersonsLoaded = false;\n        this.JobsLoaded = false;\n        this.TripsLoaded = false;\n        this.AddressesLoaded = false;\n        this.ImagesLoaded = false;\n        this.AlbumsLoaded = false;\n        this.WaypointTacksLoaded = false;\n        this.TacksLoaded = false;\n        this.LocationsLoaded = false;\n        this.AlbumImagesLoaded = false;\n        this.LogBookEntriesLoaded = false;\n        this.CrewsLoaded = false;\n        this.WifisLoaded = false;\n        this.ContentPagesLoaded = false;\n        this.Waypoints = ko.observableArray();\n        this.WaypointConnections = ko.observableArray();\n        this.Harbours = ko.observableArray();\n        this.Persons = ko.observableArray();\n        this.Jobs = ko.observableArray();\n        this.Trips = ko.observableArray();\n        this.Addresses = ko.observableArray();\n        this.Images = ko.observableArray();\n        this.Tacks = ko.observableArray();\n        this.Locations = ko.observableArray();\n        this.Supermarkets = ko.observableArray();\n        this.Restaurants = ko.observableArray();\n        this.Albums = ko.observableArray();\n        this.AlbumImages = ko.observableArray();\n        this.LogBookEntries = ko.observableArray();\n        this.Crews = ko.observableArray();\n        this.Wifis = ko.observableArray();\n        this.ContentPages = ko.observableArray();\n        this.WaypointHelper = new EditingHelper(\"editingWaypointModal\", \"deletingWaypointModal\", function () { return _this.CreateWaypoint(MarkerType.Waypoint); }, this.Waypoints);\n        this.HarbourHelper = new EditingHelper(\"editingHarbourModal\", \"deletingHarbourModal\", function () { return _this.CreateHarbour(); }, this.Harbours, rightSidebar);\n        this.PersonHelper = new EditingHelper(\"editingPersonModal\", \"deletingPersonModal\", function () { return new ClientModel.Person(); }, this.Persons);\n        this.JobHelper = new EditingHelper(\"editingJobModal\", \"deletingJobModal\", function () { return new ClientModel.Job(); }, this.Jobs);\n        this.TripHelper = new EditingHelper(\"editingTripModal\", \"deletingTripModal\", function () { return new ClientModel.Trip(); }, this.Trips);\n        this.AddressHelper = new EditingHelper(\"editingAddressModal\", \"deletingAddressModal\", function () { return new ClientModel.Address(); }, this.Addresses);\n        this.ImageHelper = new EditingHelper(\"editingImageModal\", \"deletingImageModal\", function () { return new ClientModel.Image(); }, this.Images);\n        this.TackHelper = new EditingHelper(\"editingTackModal\", \"deletingTackModal\", function () { return new ClientModel.Tack(); }, this.Tacks);\n        this.LocationHelper = new EditingHelper(\"editingLocationModal\", \"deletingLocationModal\", function () { return new ClientModel.Location(); }, this.Locations);\n        this.SupermarketHelper = new EditingHelper(\"editingSupermarketModal\", \"deletingSupermarketModal\", function () { return new ClientModel.Supermarket(); }, this.Supermarkets);\n        this.RestaurantHelper = new EditingHelper(\"editingRestaurantModal\", \"deletingRestaurantModal\", function () { return new ClientModel.Restaurant(); }, this.Restaurants);\n        this.LogBookEntryHelper = new EditingHelper(\"editingLogBookEntryModal\", \"deletingLogBookEntryModal\", function () {\n            var logBookEntry = new ClientModel.LogBookEntry();\n            if (_this.LogBookEntries().length > 0) {\n                var lastEntry = _this.LogBookEntries()[0];\n                for (var _i = 0, _a = _this.LogBookEntries(); _i < _a.length; _i++) {\n                    var entry = _a[_i];\n                    if (new Date(entry.EndDate()) > new Date(lastEntry.EndDate()))\n                        lastEntry = entry;\n                }\n                logBookEntry.Start(lastEntry.End());\n                logBookEntry.MotorHoursStart(lastEntry.MotorHoursEnd());\n                logBookEntry.LogStart(lastEntry.LogEnd());\n                if (lastEntry.End().Name() !== \"Lippe\")\n                    logBookEntry.Persons(lastEntry.Persons().slice());\n            }\n            return logBookEntry;\n        }, this.LogBookEntries, \"detailedLogBookEntryModal\");\n        this.ContentPageHelper = new EditingHelper(\"editingContentPageModal\", \"deletingContentPageModal\", function () { return new ClientModel.ContentPage(); }, this.ContentPages, \"detailedContentPageModal\");\n        this.WifiHelper = new EditingHelper(\"editingWifiModal\", \"deletingWifiModal\", function () {\n            var w = new ClientModel.Wifi();\n            w.HarbourId(mapViewModel.HarbourHelper.Detail().Id());\n            return w;\n        }, this.Wifis, \"detailWifiModal\");\n        this.HarboursByName = ko.computed(function () { return _this.Harbours.sort(function (h1, h2) { return h1.Name() > h2.Name() ? 1 : -1; })(); });\n        this.HarboursByDistance = ko.computed(function () { return _this.Harbours.sort(function (h1, h2) { return h1.Distance() - h2.Distance(); })(); });\n        this.LogBookEntriesByStartDate = ko\n            .computed(function () { return _this.LogBookEntries\n            .sort(function (l1, l2) { return Date.parse(l1.StartDate()) - Date.parse(l2.StartDate()); })(); });\n        this.RemoveHarbour = function () {\n            mapViewModel.HarbourHelper.Detail().DeleteOnServer();\n        };\n        this.RemoveWaypoint = function () {\n            mapViewModel.WaypointHelper.Detail().DeleteOnServer();\n        };\n        this.MapMode = ko.observable();\n        this.RemovePolyline = function (polyline) {\n            _this.Map.removeLayer(polyline);\n            _this.DrawingPolyline = undefined;\n        };\n        this.routeFixed = false;\n        this.noRevertToPreviousBounds = false;\n        this.Polylines = new Array();\n        this.WaypointMarkers = new Array();\n        this.HarboursToSelect = ko.computed(function () {\n            return _this.HarboursByName().concat([{ Name: \"Neuer Hafen...\", IsDummy: true }]);\n        });\n        this.ProcessHarbourSelectOptions = function (option, item) {\n            if (item !== undefined && item !== null && item.IsDummy === true) {\n                option.value = \"filled\";\n                var context_1 = ko.contextFor(option);\n                var select = $(option).parent();\n                if (select.data(\"new-change-handler\") === undefined)\n                    select.data(\"new-change-handler\", select.change(function () {\n                        if ($(option).is(\":selected\")) {\n                            var harbour_1 = _this.CreateHarbour();\n                            _this.HarbourHelper.Editing(harbour_1);\n                            var subscription_1 = _this.HarbourHelper.Editing.subscribe(function () {\n                                if (harbour_1.Id() !== undefined) {\n                                    _this.Harbours.push(harbour_1);\n                                    context_1.$data.Harbour(harbour_1);\n                                }\n                                else {\n                                    harbour_1.RemoveFromMap();\n                                    context_1.$data.Harbour(undefined);\n                                }\n                                subscription_1.dispose();\n                            });\n                        }\n                    }));\n            }\n        };\n        this.PersonsToSelect = ko.computed(function () {\n            return _this.Persons().sort(function (p1, p2) { return p1.FullName() > p2.FullName() ? 1 : -1; })\n                .concat([{ FullName: \"Neue Person...\", IsDummy: true }]);\n        });\n        this.ProcessPersonSelectOptions = function (option, item) {\n            if (item !== undefined && item !== null && item.IsDummy === true) {\n                option.value = \"filled\";\n                var context_2 = ko.contextFor(option);\n                var select = $(option).parent();\n                if (select.data(\"new-change-handler\") === undefined)\n                    select.data(\"new-change-handler\", select.change(function () {\n                        if ($(option).is(\":selected\")) {\n                            var person_1 = new Person();\n                            _this.PersonHelper.Editing(person_1);\n                            var subscription_2 = _this.PersonHelper.Editing.subscribe(function () {\n                                if (person_1.Id() !== undefined) {\n                                    _this.Persons.push(person_1);\n                                    context_2.$data.Person(person_1);\n                                }\n                                else {\n                                    context_2.$data.Person(undefined);\n                                }\n                                subscription_2.dispose();\n                            });\n                        }\n                    }));\n            }\n        };\n        this.AlbumStack = ko.observableArray();\n        this.GetPositionForWaypoint = function (waypoint) {\n            navigator.geolocation.getCurrentPosition(function (location) {\n                waypoint.Latitude(location.coords.latitude);\n                waypoint.Longitude(location.coords.longitude);\n            }, function () { console.log(arguments); alert(\"Die Position konnte nicht abgerufen werden\"); });\n        };\n        this.LogBookPager = new Pager(this.LogBookEntries, {\n            Columns: [\n                new PagerColumn(\"Start\", function (h) { return h.Start().Name; }, { Sorter: PagerColumn.StringSorter(), Visible: false }),\n                new PagerColumn(\"Ziel\", function (h) { return h.End().Name; }, { Sorter: PagerColumn.StringSorter(), Width: 200 }),\n                new PagerColumn(\"Datum\", function (h) { return h.StartDate; }, {\n                    Sorter: PagerColumn.DateSorter(),\n                    Renderer: PagerColumn.DateRenderer(),\n                    Width: 150,\n                    SortMode: SortModes.Descending\n                }),\n                new PagerColumn(\"Dauer\", function (h) { return h.SaillingTime; }, { Sorter: PagerColumn.StringSorter() }),\n                new PagerColumn(\"Crew\", function (h) { return h.Persons; }, {\n                    Renderer: PagerColumn.ArrayRenderer(\"<br />\", function (p) { return p.FullName(); }),\n                    Width: 150\n                }),\n                new PagerColumn(\"Besondere Vorkomnisse\", function (h) { return h.SpecialOccurences; })\n            ],\n            UseResponsiveTable: true,\n            UseStripedTable: true,\n            EditingHelper: this.LogBookEntryHelper,\n            ShowEditDeleteControls: true,\n            IdPrefix: \"logBookOverview_\",\n            SpecialActions: [new PagerSpecialAction(\"Neuer Eintrag\", function () { return $(\"#editingLogBookEntryModal\").modal(\"show\"); }, undefined, this.IsLoggedIn)]\n        });\n        this.HarbourDistancePager = new Pager(ko.computed(function () { return _this.Harbours().slice().filter(function (h) { return h.Distance() > 0; }); }), {\n            Columns: [\n                new PagerColumn(\"Name\", function (h) { return h.Name; }, { Sorter: PagerColumn.StringSorter() }),\n                new PagerColumn(\"Entfernung\", function (h) { return h.Distance; }, {\n                    Sorter: PagerColumn.NumberSorter(),\n                    Renderer: function (d) { return d + \" sm\"; },\n                    SortMode: SortModes.Ascending\n                })\n            ],\n            EditingHelper: this.HarbourHelper,\n            UseResponsiveTable: true,\n            UseStripedTable: true,\n            UseSmallColumnControls: true,\n            ShowColumnSelector: false,\n            IdPrefix: \"harbourDistance_\",\n            SpecialColumnActions: [new PagerSpecialColumnAction(\"Route zeigen\", function (h) {\n                    _this.ShowRoute(h);\n                    _this.FixRoute();\n                })]\n        });\n        L.mapbox\n            .accessToken =\n            \"pk.eyJ1IjoiZGFuaWVsLWt1b24iLCJhIjoiY2lldnVtY29iMDBiOHQxbTBvZzBqZWl6cCJ9.UEc2YqH59pB1YTpv22vg8A\";\n        this.MapMode(mapMode);\n        this.MapMode.subscribe(function () {\n            _this.InitializeMap();\n        });\n        var mapOptions = {\n            contextmenu: mapMode === MapMode.Admin,\n            contextmenuItems: [\n                {\n                    text: \"Neuer Hafen\",\n                    callback: function (e) {\n                        console.log(e);\n                        mapViewModel.HarbourHelper.Editing(mapViewModel.CreateHarbour(\"\", e.latlng));\n                    }\n                }\n            ]\n        };\n        this.Map = L.mapbox.map(\"map\", \"mapbox.streets\", mapOptions);\n        this.Map.setView([54.40774166820069, 10.523529052734373], 9);\n        L.tileLayer(\"http://t1.openseamap.org/seamark/{z}/{x}/{y}.png\").addTo(this.Map);\n        this.LoadData();\n        $.get(\"/Account/IsLoggedIn\").done(function (data) { return _this.IsLoggedIn(data); });\n        this.ContentPages.subscribe(function (data) {\n            var nav = $(\"#leftNav\");\n            $(\".contentPageLink\", nav).remove();\n            var _loop_1 = function(cP) {\n                $(\"<li role=\\\"presentation\\\" class=\\\"contentPageLink\\\"><a href=\\\"#\\\">\" + cP.Title() + \"</a></li>\")\n                    .click(function () {\n                    mapViewModel.ContentPageHelper.Detail(cP);\n                    return false;\n                })\n                    .appendTo(nav);\n            };\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                var cP = data_1[_i];\n                _loop_1(cP);\n            }\n        });\n        this.HarbourHelper.Detail.subscribe(function (newHarbour) {\n            if (newHarbour !== undefined) {\n                mapViewModel.CalculateDistances(newHarbour);\n                mapViewModel.Harbours.sort(function (h1, h2) { return h1.Distance() - h2.Distance(); });\n            }\n            else {\n                for (var _i = 0, _a = mapViewModel.Harbours(); _i < _a.length; _i++) {\n                    var h = _a[_i];\n                    h.Distance(0);\n                }\n            }\n            mapViewModel.routeFixed = false;\n            mapViewModel.HideRoute();\n        });\n        this.HarbourHelper.Editing.subscribe(function (harbour) {\n            if (harbour !== undefined && harbour.Id() === undefined)\n                mapViewModel.Map.removeLayer(harbour.marker);\n        }, this, \"beforeChange\");\n        this.Map.addEventListener(\"mousemove\", function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                _this.DrawingLatLng.lat = e.latlng.lat;\n                _this.DrawingLatLng.lng = e.latlng.lng;\n                _this.DrawingPolyline.redraw();\n            }\n            if (_this.MapMode() === MapMode.Admin)\n                for (var _i = 0, _a = _this.WaypointMarkers; _i < _a.length; _i++) {\n                    var marker = _a[_i];\n                    if (marker.Point.distanceTo(e.containerPoint) < 150)\n                        marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 1);\n                    else\n                        marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 0.8);\n                }\n            if (mapViewModel\n                .HoveredPolyine !==\n                undefined &&\n                mapViewModel.HoveredPolyine.DummyHandle !== undefined) {\n                var polyline = mapViewModel.HoveredPolyine;\n                var p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\n                var p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\n                if (p1.distanceTo(e.containerPoint) < 20 || p2.distanceTo(e.containerPoint) < 20) {\n                    mapViewModel.HoveredPolyine = undefined;\n                }\n                else {\n                    mapViewModel.HoveredPolyine.DummyHandle.marker.setOpacity(0.8);\n                    mapViewModel.HoveredPolyine.DummyHandle\n                        .SetLatLng(mapViewModel.Map\n                        .containerPointToLatLng(L.LineUtil\n                        .closestPointOnSegment(e.containerPoint, p1, p2)), false);\n                }\n            }\n        });\n        this.Map.addEventListener(\"click\", function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                var waypoint = mapViewModel.CreateWaypoint(e.latlng, MarkerType.Waypoint);\n                var startId_1 = _this.DrawingPolyline.Waypoints[0].Id();\n                waypoint.SaveToServer()\n                    .done(function (w) {\n                    ServerApi.WaypointConnections\n                        .Connect(w.Id, startId_1);\n                });\n                waypoint.AddToPolyline(_this.DrawingPolyline);\n                addDummyHandle(_this.DrawingPolyline);\n                removeFromPolyline(_this.DrawingPolyline, _this.DrawingLatLng);\n                _this.DrawingPolyline = _this.AddPolyline(waypoint);\n                _this.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\n                _this.DrawingPolyline.addLatLng(_this.DrawingLatLng);\n            }\n        });\n        this.Map.addEventListener(\"dblclick\", function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                e.originalEvent.cancelBubble = true;\n                e.originalEvent.preventDefault();\n                e.originalEvent.stopPropagation();\n                _this.DrawingPolyline.addLatLng(e.latlng);\n                _this.DrawingLatLng = e.latlng;\n            }\n        });\n        $(document)\n            .keyup(function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                if (e.keyCode === 27) {\n                    _this.RemovePolyline(_this.DrawingPolyline);\n                }\n            }\n        });\n        this.Map.addEventListener(\"move\", function (e) {\n            for (var _i = 0, _a = _this.WaypointMarkers; _i < _a.length; _i++) {\n                var marker = _a[_i];\n                marker.Point = _this.Map.latLngToContainerPoint(marker.getLatLng());\n            }\n        });\n        this.Map.addEventListener(\"zoom\", function (e) {\n            for (var _i = 0, _a = _this.WaypointMarkers; _i < _a.length; _i++) {\n                var marker = _a[_i];\n                marker.Point = _this.Map.latLngToContainerPoint(marker.getLatLng());\n            }\n        });\n    }\n    MapViewModel.prototype.StartRoute = function () {\n        var trip = new ClientModel.Trip();\n        var tack = new ClientModel.Tack();\n        var harbour = mapViewModel.HarbourHelper.Detail();\n        tack.Start(harbour);\n        trip.Tacks.push(tack);\n        mapViewModel.TripHelper.Editing(trip);\n        mapViewModel.routePolyline(L.polyline([], {\n            color: \"#009900\"\n        }));\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\n    };\n    MapViewModel.prototype.AddToRoute = function () {\n        var trip = mapViewModel.TripHelper.Editing();\n        var targetHarbour = mapViewModel.HarbourHelper.Editing();\n        var tack = new ClientModel.Tack();\n        var lastTack = trip.Tacks()[trip.Tacks().length - 1];\n        var startHarbour = lastTack.Start();\n        mapViewModel.CalculateDistances(targetHarbour, startHarbour);\n        lastTack.Distance(startHarbour.RouteDistance());\n        var wp = startHarbour;\n        mapViewModel.routePolyline().addLatLng(wp.LatLng);\n        while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\n            wp = wp.RoutePrecessor();\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\n        }\n        lastTack.End(targetHarbour);\n        tack.Start(targetHarbour);\n        trip.Tacks.push(tack);\n    };\n    MapViewModel.prototype.RedrawTrip = function () {\n        mapViewModel.Map.removeLayer(mapViewModel.routePolyline());\n        mapViewModel.routePolyline(L.polyline([], {\n            color: \"#009900\"\n        }));\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\n        for (var _i = 0, _a = mapViewModel.TripHelper.Editing().Tacks(); _i < _a.length; _i++) {\n            var tack = _a[_i];\n            var targetHarbour = tack.End();\n            var startHarbour = tack.Start();\n            if (targetHarbour === undefined)\n                continue;\n            mapViewModel.CalculateDistances(targetHarbour, startHarbour);\n            tack.Distance(startHarbour.RouteDistance());\n            var wp = startHarbour;\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\n            while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\n                wp = wp.RoutePrecessor();\n                mapViewModel.routePolyline().addLatLng(wp.LatLng);\n            }\n        }\n    };\n    MapViewModel.prototype.PullTack = function () {\n        var tack = this;\n        var tacks = mapViewModel.TripHelper.Editing().Tacks;\n        var index = tacks.indexOf(tack);\n        var prevTack = tacks()[index - 1];\n        var tmpEnd = tack.End();\n        tack.End(prevTack.Start());\n        prevTack.End(tmpEnd);\n        if (index > 1) {\n            tacks()[index - 2].End(tack.Start());\n        }\n        tacks.splice(index - 1, 2, tack, prevTack);\n        mapViewModel.RedrawTrip();\n    };\n    MapViewModel.prototype.PushTack = function () {\n        var tack = this;\n        var tacks = mapViewModel.TripHelper.Editing().Tacks;\n        var index = tacks.indexOf(tack);\n        var nextTack = tacks()[index + 1];\n        tack.End(nextTack.End());\n        nextTack.End(tack.Start());\n        if (index > 0) {\n            tacks()[index - 1].End(nextTack.Start());\n        }\n        tacks.splice(index, 2, nextTack, tack);\n        mapViewModel.RedrawTrip();\n    };\n    MapViewModel.prototype.RemoveTack = function () {\n        var tack = this;\n        var tacks = mapViewModel.TripHelper.Editing().Tacks;\n        var index = tacks.indexOf(tack);\n        var prevTack = tacks()[index - 1];\n        if (prevTack !== undefined)\n            prevTack.End(tack.End());\n        tacks.remove(tack);\n        mapViewModel.RedrawTrip();\n    };\n    MapViewModel.prototype.LoadData = function () {\n        var _this = this;\n        ServerApi.Waypoints\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_1 = d; _i < d_1.length; _i++) {\n                var sEntity = d_1[_i];\n                if (sEntity.Type === \"Waypoint\")\n                    _this.Waypoints.push(mapViewModel\n                        .CreateWaypoint(MarkerType.Waypoint)\n                        .LoadFromServerEntity(sEntity));\n                else if (sEntity.Type === \"Harbour\") {\n                    var harbour = mapViewModel\n                        .CreateHarbour()\n                        .LoadFromServerEntity(sEntity);\n                    _this.Harbours.push(harbour);\n                }\n            }\n            _this.WaypointsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.WaypointConnections\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_2 = d; _i < d_2.length; _i++) {\n                var sEntity = d_2[_i];\n                _this.WaypointConnections.push(sEntity);\n            }\n            _this.WaypointConnectionsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Persons\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_3 = d; _i < d_3.length; _i++) {\n                var sEntity = d_3[_i];\n                _this.Persons.push(new ClientModel.Person().LoadFromServerEntity(sEntity));\n            }\n            _this.PersonsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Jobs\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_4 = d; _i < d_4.length; _i++) {\n                var sEntity = d_4[_i];\n                _this.Jobs.push(new ClientModel.Job().LoadFromServerEntity(sEntity));\n            }\n            _this.JobsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Trips\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_5 = d; _i < d_5.length; _i++) {\n                var sEntity = d_5[_i];\n                _this.Trips.push(new ClientModel.Trip().LoadFromServerEntity(sEntity));\n            }\n            _this.TripsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Addresses\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_6 = d; _i < d_6.length; _i++) {\n                var sEntity = d_6[_i];\n                _this.Addresses.push(new ClientModel.Address().LoadFromServerEntity(sEntity));\n            }\n            _this.AddressesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Images\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_7 = d; _i < d_7.length; _i++) {\n                var sEntity = d_7[_i];\n                _this.Images.push(new ClientModel.Image().LoadFromServerEntity(sEntity));\n            }\n            _this.ImagesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Albums\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_8 = d; _i < d_8.length; _i++) {\n                var sEntity = d_8[_i];\n                _this.Albums.push(new ClientModel.Album().LoadFromServerEntity(sEntity));\n            }\n            _this.AlbumsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.LogBookEntries\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_9 = d; _i < d_9.length; _i++) {\n                var sEntity = d_9[_i];\n                _this.LogBookEntries.push(new ClientModel.LogBookEntry().LoadFromServerEntity(sEntity));\n            }\n            _this.LogBookEntriesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.AlbumImages.Get()\n            .done(function (d) {\n            for (var _i = 0, d_10 = d; _i < d_10.length; _i++) {\n                var ai = d_10[_i];\n                _this.AlbumImages.push(ai);\n            }\n            _this.AlbumImagesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Crews.Get()\n            .done(function (d) {\n            for (var _i = 0, d_11 = d; _i < d_11.length; _i++) {\n                var c = d_11[_i];\n                _this.Crews.push(c);\n            }\n            _this.CrewsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Wifis.Get()\n            .done(function (d) {\n            for (var _i = 0, d_12 = d; _i < d_12.length; _i++) {\n                var c = d_12[_i];\n                _this.Wifis.push(new ClientModel.Wifi().LoadFromServerEntity(c));\n            }\n            _this.WifisLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.ContentPages.Get()\n            .done(function (d) {\n            for (var _i = 0, d_13 = d; _i < d_13.length; _i++) {\n                var c = d_13[_i];\n                _this.ContentPages.push(new ClientModel.ContentPage().LoadFromServerEntity(c));\n            }\n            _this.ContentPagesLoaded = true;\n            _this.InitializeModel();\n        });\n        //ServerApi.WaypointTacks.Get().done(d => {\n        //    for (let sEntity of d) { this.WaypointTacks.push(new ClientModel.WaypointTack().LoadFromServerEntity(sEntity)); }\n        //    this.WaypointTacksLoaded = true;\n        //    this.InitialozeModel();\n        //});\n        ServerApi.Tacks\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_14 = d; _i < d_14.length; _i++) {\n                var sEntity = d_14[_i];\n                _this.Tacks.push(new ClientModel.Tack().LoadFromServerEntity(sEntity));\n            }\n            _this.TacksLoaded = true;\n            _this.InitializeModel();\n        });\n        //ServerApi.Locations\n        //    .Get()\n        //    .done(d => {\n        //        for (let sEntity of d) {\n        //            if (sEntity.Type === \"Location\")\n        //                this.Locations.push(new ClientModel.Location().LoadFromServerEntity(sEntity));\n        //            else if (sEntity.Type === \"Restaurant\")\n        //                this.Restaurants.push(new ClientModel.Restaurant().LoadFromServerEntity(sEntity));\n        //            else if (sEntity.Type === \"Supermarket\")\n        //                this.Supermarkets.push(new ClientModel.Supermarket().LoadFromServerEntity(sEntity));\n        //        }\n        this.LocationsLoaded = true;\n        //        this.InitializeModel();\n        //    });\n    };\n    MapViewModel.prototype.InitializeModel = function () {\n        if (this.WaypointsLoaded &&\n            this.WaypointConnectionsLoaded &&\n            this.PersonsLoaded &&\n            this.JobsLoaded &&\n            this.TripsLoaded &&\n            this.AddressesLoaded &&\n            this.ImagesLoaded &&\n            this.AlbumsLoaded &&\n            //this.WaypointTacksLoaded &&\n            this.TacksLoaded &&\n            this.LocationsLoaded &&\n            this.CrewsLoaded &&\n            this.LogBookEntriesLoaded &&\n            this.AlbumImagesLoaded &&\n            this.WifisLoaded &&\n            this.ContentPagesLoaded) {\n            for (var _i = 0, _a = this.Jobs(); _i < _a.length; _i++) {\n                var entity = _a[_i];\n                if (entity.AssignedToId() !== undefined)\n                    entity.AssignedTo(this.GetPersonById(entity.AssignedToId()));\n                if (entity.TripId() !== undefined)\n                    entity.Trip(this.GetTripById(entity.TripId()));\n                if (entity.SuperJobId() !== undefined) {\n                    entity.SuperJob(this.GetJobById(entity.SuperJobId()));\n                    entity.SuperJob().SubJobs.push(entity);\n                }\n            }\n            for (var _b = 0, _c = this.Harbours(); _b < _c.length; _b++) {\n                var entity = _c[_b];\n                entity.Album(this.GetAlbumById(entity.AlbumId()));\n            }\n            for (var _e = 0, _f = this.Locations(); _e < _f.length; _e++) {\n                var entity = _f[_e];\n                entity.Address(this.GetAddressById(entity.AddressId()));\n                this.GetHarbourById(entity.HarbourId()).Locations.push(entity);\n            }\n            for (var _g = 0, _h = this.AlbumImages(); _g < _h.length; _g++) {\n                var entity = _h[_g];\n                this.GetAlbumById(entity.AlbumId).Images.push(this.GetImageById(entity.ImageId));\n            }\n            for (var _j = 0, _k = mapViewModel.WaypointConnections(); _j < _k.length; _j++) {\n                var connection = _k[_j];\n                var polyline = mapViewModel.AddPolyline([\n                    mapViewModel.GetWayPointById(connection.Waypoint1Id), mapViewModel\n                        .GetWayPointById(connection.Waypoint2Id)\n                ]);\n                addDummyHandle(polyline);\n            }\n            for (var _l = 0, _m = mapViewModel.LogBookEntries(); _l < _m.length; _l++) {\n                var entry = _m[_l];\n                entry.Start(mapViewModel.GetHarbourById(entry.StartId()));\n                entry.End(mapViewModel.GetHarbourById(entry.EndId()));\n                entry.Album(mapViewModel.GetAlbumById(entry.AlbumId()));\n            }\n            for (var _o = 0, _p = mapViewModel.Crews(); _o < _p.length; _o++) {\n                var crew = _p[_o];\n                var lBE = mapViewModel.GetLogBookEntryById(crew.TackId);\n                var tack = mapViewModel.GetTackById(crew.TackId);\n                var trip = mapViewModel.GetTripById(crew.TackId);\n                var p = mapViewModel.GetPersonById(crew.PersonId);\n                if (lBE !== undefined)\n                    lBE.Persons.push(p);\n                else if (tack !== undefined)\n                    tack.Persons.push(p);\n                else if (trip !== undefined)\n                    trip.Persons.push(p);\n            }\n            for (var _q = 0, _r = mapViewModel.Wifis(); _q < _r.length; _q++) {\n                var wifi = _r[_q];\n                var h = mapViewModel.GetHarbourById(wifi.HarbourId());\n                h.Wifis.push(wifi);\n                wifi.Harbour(h);\n            }\n            ko.applyBindings(mapViewModel);\n            $(\"#loadingOverlay\").remove();\n        }\n    };\n    MapViewModel.prototype.InitializeMap = function () {\n        mapViewModel.HarbourHelper.Detail(undefined);\n        for (var _i = 0, _a = mapViewModel.Waypoints(); _i < _a.length; _i++) {\n            var wp = _a[_i];\n            if (wp.marker !== undefined)\n                mapViewModel.Map.removeLayer(wp.marker);\n            mapViewModel.CreateMarker(MarkerType.Waypoint, wp);\n        }\n        for (var _b = 0, _c = mapViewModel.Harbours(); _b < _c.length; _b++) {\n            var h = _c[_b];\n            if (h.marker !== undefined)\n                mapViewModel.Map.removeLayer(h.marker);\n            mapViewModel.CreateMarker(MarkerType.Harbour, h);\n        }\n        for (var _e = 0, _f = mapViewModel.Polylines; _e < _f.length; _e++) {\n            var p = _f[_e];\n            if (p.DummyHandle.marker !== undefined)\n                mapViewModel.Map.removeLayer(p.DummyHandle.marker);\n            mapViewModel.CreateMarker(MarkerType.Dummy, p.DummyHandle);\n        }\n        if (mapViewModel.MapMode() === MapMode.Admin) {\n            for (var _g = 0, _h = mapViewModel.Polylines; _g < _h.length; _g++) {\n                var p = _h[_g];\n                p.addTo(mapViewModel.Map);\n            }\n            mapViewModel.Map.contextmenu.enable();\n        }\n        else {\n            for (var _j = 0, _k = mapViewModel.Polylines; _j < _k.length; _j++) {\n                var p = _k[_j];\n                mapViewModel.Map.removeLayer(p);\n            }\n            mapViewModel.Map.contextmenu.disable();\n        }\n    };\n    MapViewModel.prototype.GetWaypointById = function (id) {\n        for (var _i = 0, _a = this.Waypoints(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        for (var _b = 0, _c = this.Harbours(); _b < _c.length; _b++) {\n            var entity = _c[_b];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Waypoint with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetHarbourById = function (id) {\n        for (var _i = 0, _a = this.Harbours(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Harbour with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetPersonById = function (id) {\n        for (var _i = 0, _a = this.Persons(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Person with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetJobById = function (id) {\n        for (var _i = 0, _a = this.Jobs(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Job with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetTripById = function (id) {\n        for (var _i = 0, _a = this.Trips(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Trip with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetAddressById = function (id) {\n        for (var _i = 0, _a = this.Addresses(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Address with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetImageById = function (id) {\n        for (var _i = 0, _a = this.Images(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Image with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetTackById = function (id) {\n        for (var _i = 0, _a = this.Tacks(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Tack with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetLogBookEntryById = function (id) {\n        for (var _i = 0, _a = this.LogBookEntries(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Tack with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetAlbumById = function (id) {\n        for (var _i = 0, _a = this.Albums(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Tack with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetLocationById = function (id) {\n        for (var _i = 0, _a = this.Locations(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        for (var _b = 0, _c = this.Restaurants(); _b < _c.length; _b++) {\n            var entity = _c[_b];\n            if (entity.Id() === id)\n                return entity;\n        }\n        for (var _e = 0, _f = this.Restaurants(); _e < _f.length; _e++) {\n            var entity = _f[_e];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Location with id \" + id + \" found\";\n        return undefined;\n    };\n    //SortedLogBookEntries = ko.computed({\n    //    read: () => this.LogBookEntries.sort((l1, l2) => {\n    //        var t1 = l1.StartDate().getTime();\n    //        var t2 = l2.StartDate().getTime();\n    //        return t2 - t1;\n    //    }),\n    //    deferEvaluation: true\n    //});\n    MapViewModel.prototype.InitGallery = function (item, event) {\n        var items = new Array();\n        var albumElem = event.target.parentElement;\n        var currImage = this;\n        for (var _i = 0, _a = mapViewModel.AlbumStack()[0].Images(); _i < _a.length; _i++) {\n            var data = _a[_i];\n            items.push({\n                h: data.Height(),\n                w: data.Width(),\n                src: data.Path()\n            });\n        }\n        gallery = new PhotoSwipe(pswp, PhotoSwipeUI_Default, items, {\n            index: mapViewModel.AlbumStack()[0].Images.indexOf(currImage),\n            getThumbBoundsFn: function (index) {\n                var elem = $(\"img\", albumElem)[index];\n                var padding = parseFloat(window.getComputedStyle(elem, null)\n                    .getPropertyValue(\"padding-left\")\n                    .replace(\"px\", \"\"));\n                elem.scrollIntoView(false);\n                var bounds = elem.getBoundingClientRect();\n                return {\n                    x: bounds.left + padding,\n                    y: bounds.top + window.screenY + padding,\n                    w: bounds.width - (2 * padding)\n                };\n            }\n        });\n        gallery.init();\n    };\n    MapViewModel.prototype.AddHarbour = function () {\n        var harbour = mapViewModel.CreateHarbour(\"Hafen \" + this.Harbours.length, this.Map.getCenter());\n        mapViewModel.Harbours.push(harbour);\n        harbour.SaveToServer();\n    };\n    MapViewModel.prototype.AddPolyline = function (arg) {\n        //var options = {\n        //    contextmenu: true,\n        //    contextmenuInheritItems: false,\n        //    contextmenuItems: [\n        //        {\n        //            text: \"FFFFFFFFFFFFFFFFFF\",\n        //            callback: function() { console.log(this);\n        //                console.log(arguments);mapViewModel.HarbourHelper.Editing(this) }\n        //        },\n        //        {\n        //            text: \"Löschen\",\n        //            callback: function() { mapViewModel.HarbourHelper.Deleting(this) }\n        //        }\n        //    ]\n        //};\n        var polyline = new L.Polyline([]);\n        //polyline.bindContextMenu(options);\n        mapViewModel.Polylines.push(polyline);\n        polyline.addEventListener(\"click\", function (e) {\n            var p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\n            var p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\n            polyline.DummyHandle\n                .SetLatLng(mapViewModel.Map\n                .containerPointToLatLng(L.LineUtil\n                .closestPointOnSegment(e.containerPoint, p1, p2)), false);\n            mapViewModel.Waypoints.push(polyline.DummyHandle);\n            polyline.DummyHandle.convertFromDummyHandle();\n        });\n        if (mapViewModel.MapMode() === MapMode.Admin)\n            polyline.addTo(this.Map);\n        polyline.Waypoints = new Array();\n        if (arg !== undefined)\n            if (arg instanceof Waypoint)\n                arg.AddToPolyline(polyline);\n            else\n                for (var _i = 0, _a = arg; _i < _a.length; _i++) {\n                    var waypoint = _a[_i];\n                    waypoint.AddToPolyline(polyline);\n                }\n        polyline.addEventListener(\"mouseover\", function () {\n            mapViewModel.HoveredPolyine = polyline;\n        });\n        return polyline;\n    };\n    MapViewModel.prototype.GetMapMode = function () {\n        if (this.DrawingPolyline !== undefined && this.DrawingLatLng !== undefined)\n            return MapMode.RouteDrawing;\n        return this.MapMode();\n    };\n    MapViewModel.prototype.GetWayPointById = function (id) {\n        for (var _i = 0, _a = this.Waypoints(); _i < _a.length; _i++) {\n            var waypoint = _a[_i];\n            if (waypoint.Id() === id)\n                return waypoint;\n        }\n        for (var _b = 0, _c = this.Harbours(); _b < _c.length; _b++) {\n            var waypoint = _c[_b];\n            if (waypoint.Id() === id)\n                return waypoint;\n        }\n        throw \"No Waypoint with id \" + id + \" in model\";\n    };\n    MapViewModel.prototype.CalculateDistances = function (start, target) {\n        if (start === void 0) { start = mapViewModel.HarbourHelper.Detail(); }\n        var waypoints = [start];\n        var calculating = new Array();\n        var calculated = new Array();\n        var calculateRoute = target !== undefined;\n        calculating.push(new WaypointDistance(undefined, start, 0, waypoints, calculateRoute));\n        //for (let waypoint of mapViewModel.Waypoints()) {\n        //    waypoints.push(new WaypointDistance(null, waypoint, Number.POSITIVE_INFINITY));\n        //}\n        //for (let harbour of mapViewModel.Harbours()) {\n        //    if (harbour !== start) {\n        //        waypoints.push(new WaypointDistance(null, harbour, Number.POSITIVE_INFINITY));\n        //    }\n        //}\n        if (calculateRoute) {\n            for (var _i = 0, _a = mapViewModel.Waypoints(); _i < _a.length; _i++) {\n                var wp = _a[_i];\n                wp.RoutePrecessor(undefined);\n            }\n            for (var _b = 0, _c = mapViewModel.Harbours(); _b < _c.length; _b++) {\n                var h = _c[_b];\n                h.RoutePrecessor(undefined);\n            }\n        }\n        else {\n            for (var _e = 0, _f = mapViewModel.Waypoints(); _e < _f.length; _e++) {\n                var wp = _f[_e];\n                wp.Precessor(undefined);\n            }\n            for (var _g = 0, _h = mapViewModel.Harbours(); _g < _h.length; _g++) {\n                var h = _h[_g];\n                h.Precessor(undefined);\n            }\n        }\n        while (calculating.length > 0) {\n            var minimalDist = Number.POSITIVE_INFINITY;\n            var minimalWp = void 0;\n            for (var _j = 0, calculating_1 = calculating; _j < calculating_1.length; _j++) {\n                var wp = calculating_1[_j];\n                for (var _k = 0, _l = wp.ConnectedWayPoints; _k < _l.length; _k++) {\n                    var cWp = _l[_k];\n                    if ((calculateRoute ? cWp.RoutePrecessor() : cWp.Precessor()) !== undefined)\n                        removeFromArray(wp.ConnectedWayPoints, cWp);\n                }\n                if (wp.ConnectedWayPoints.length === 0) {\n                    removeFromArray(calculating, wp);\n                    calculated.push(wp);\n                }\n                else {\n                    var dist = wp.Distance + wp.ConnectedWayPoints[0].LatLng.distanceTo(wp.LatLng) / 1.852;\n                    if (dist < minimalDist) {\n                        minimalDist = dist;\n                        minimalWp = wp;\n                    }\n                }\n            }\n            if (minimalWp !== undefined) {\n                calculating.push(new WaypointDistance(minimalWp.Waypoint, minimalWp.ConnectedWayPoints.shift(), minimalDist, waypoints, calculateRoute));\n            }\n        }\n        if (calculateRoute)\n            for (var _m = 0, calculated_1 = calculated; _m < calculated_1.length; _m++) {\n                var wp = calculated_1[_m];\n                wp.Waypoint.RouteDistance(Math.round(wp.Distance / 100) / 10);\n            }\n        else\n            for (var _o = 0, calculated_2 = calculated; _o < calculated_2.length; _o++) {\n                var wp = calculated_2[_o];\n                wp.Waypoint.Distance(Math.round(wp.Distance / 100) / 10);\n            }\n    };\n    MapViewModel.prototype.ShowRoute = function (h) {\n        if (mapViewModel.highlightedRoute !== undefined) {\n            mapViewModel.routeFixed = false;\n            mapViewModel.HideRoute();\n        }\n        if (h === undefined)\n            h = this;\n        if (!(h instanceof ClientModel.Harbour))\n            return;\n        var latLngs = [h.LatLng];\n        var dist = h.Distance();\n        if (dist === undefined || dist === null)\n            dist = 0;\n        while (h.Precessor() !== undefined) {\n            h = h.Precessor();\n            latLngs.push(h.LatLng);\n        }\n        mapViewModel.highlightedRoute = L.polyline(latLngs);\n        mapViewModel.highlightedRoute.addTo(mapViewModel.Map);\n        mapViewModel.highlightedRoute.bindLabel(dist.toString() + \" sm\", { noHide: true });\n        mapViewModel.FitBounds(mapViewModel.highlightedRoute.getBounds());\n    };\n    MapViewModel.prototype.FitBounds = function (bounds) {\n        var map = mapViewModel.Map;\n        var currentBounds = map.getBounds();\n        if (!currentBounds.contains(bounds)) {\n            if (mapViewModel.previousBounds === undefined)\n                mapViewModel.previousBounds = currentBounds;\n            map.fitBounds(bounds);\n        }\n    };\n    MapViewModel.prototype.HideRoute = function (force) {\n        if (force === void 0) { force = false; }\n        if ((!mapViewModel.routeFixed || force) && mapViewModel.highlightedRoute !== undefined) {\n            mapViewModel.routeFixed = false;\n            mapViewModel.Map.removeLayer(mapViewModel.highlightedRoute);\n            mapViewModel.highlightedRoute = undefined;\n            if (!mapViewModel.noRevertToPreviousBounds && mapViewModel.previousBounds !== undefined) {\n                var tmpBounds_1 = mapViewModel.previousBounds;\n                mapViewModel.previousBounds = undefined;\n                window.setTimeout(function () {\n                    if (mapViewModel.previousBounds === undefined)\n                        mapViewModel.Map.fitBounds(tmpBounds_1);\n                    else\n                        mapViewModel.previousBounds = tmpBounds_1;\n                }, 100);\n            }\n        }\n    };\n    MapViewModel.prototype.FixRoute = function () {\n        mapViewModel.routeFixed = true;\n        mapViewModel.previousBounds = undefined;\n    };\n    MapViewModel.prototype.CreateWaypoint = function (latLng, markerType) {\n        var wp;\n        if (markerType !== undefined)\n            wp = new Waypoint(latLng, markerType, mapViewModel.Map);\n        else\n            wp = new Waypoint(markerType, mapViewModel.Map);\n        this.InitializeWaypoint(wp, markerType);\n        return wp;\n    };\n    MapViewModel.prototype.InitializeWaypoint = function (wp, markerType) {\n        this.CreateMarker(markerType, wp);\n    };\n    MapViewModel.prototype.CreateMarker = function (markerType, wp) {\n        if (mapViewModel.MapMode() === MapMode.Admin || markerType === MarkerType.Harbour) {\n            var options = {\n                draggable: (mapViewModel.MapMode() === MapMode.Admin)\n            };\n            if (markerType === MarkerType.Dummy) {\n                options.opacity = 0;\n            }\n            if (mapViewModel.MapMode() === MapMode.Admin &&\n                (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy)) {\n                options.icon = new L.Icon({\n                    iconUrl: \"/images/waypointhandle.png\",\n                    iconSize: new L.Point(10, 10, true),\n                    className: \"waypoint\"\n                });\n            }\n            if (mapViewModel.MapMode() === MapMode.Admin) {\n                options.contextmenu = true;\n                options.contextmenuInheritItems = false;\n                // ReSharper disable SuspiciousThisUsage\n                if (markerType === MarkerType.Harbour) {\n                    options.contextmenuItems = [\n                        {\n                            text: \"Bearbeiten\",\n                            context: wp,\n                            callback: function () { mapViewModel.HarbourHelper.Editing(this); }\n                        },\n                        {\n                            text: \"Löschen\",\n                            context: wp,\n                            callback: function () { mapViewModel.HarbourHelper.Deleting(this); }\n                        }\n                    ];\n                }\n                else {\n                    options.contextmenuItems = [\n                        {\n                            text: \"Bearbeiten\",\n                            context: wp,\n                            callback: function () { mapViewModel.WaypointHelper.Editing(this); }\n                        },\n                        {\n                            text: \"Löschen\",\n                            context: wp,\n                            callback: function () { mapViewModel.WaypointHelper.Deleting(this); }\n                        }\n                    ];\n                }\n            }\n            var marker = new L.Marker(wp.LatLng, options);\n            marker.addTo(this.Map);\n            marker.Waypoint = wp;\n            wp.marker = marker;\n            if (mapViewModel.MapMode() === MapMode.Admin) {\n                if (markerType === MarkerType.Dummy)\n                    marker.addEventListener(\"mouseout\", function (e) {\n                        if (e.target.Waypoint.IsDummy())\n                            mapViewModel.HoveredPolyine = undefined;\n                    });\n                marker.addEventListener(\"drag\", function () { wp.SetLatLng(wp.marker.getLatLng()); });\n                if (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy) {\n                    this.WaypointMarkers.push(wp.marker);\n                    wp.marker.Point = mapViewModel.Map.latLngToContainerPoint(wp.LatLng);\n                }\n                wp.marker.addEventListener(\"click\", function () {\n                    if (wp.IsDummy()) {\n                        mapViewModel.HoveredPolyine = undefined;\n                        wp.convertFromDummyHandle();\n                        mapViewModel.Waypoints.push(wp);\n                    }\n                    if (mapViewModel.GetMapMode() === MapMode.RouteDrawing) {\n                        if (!wp.IsInPolyline(mapViewModel.DrawingPolyline)) {\n                            ServerApi.WaypointConnections\n                                .Connect(wp.Id(), mapViewModel.DrawingPolyline.Waypoints[0].Id());\n                            wp.AddToPolyline(mapViewModel.DrawingPolyline);\n                            removeFromPolyline(mapViewModel.DrawingPolyline, mapViewModel.DrawingLatLng);\n                            addDummyHandle(mapViewModel.DrawingPolyline);\n                            mapViewModel.DrawingPolyline = undefined;\n                            mapViewModel.DrawingLatLng = undefined;\n                        }\n                        else {\n                            removePolyline(mapViewModel.DrawingPolyline);\n                            mapViewModel.DrawingPolyline = undefined;\n                            mapViewModel.DrawingLatLng = undefined;\n                        }\n                    }\n                });\n                wp.marker.addEventListener(\"dblclick\", function (e) {\n                    mapViewModel.DrawingPolyline = mapViewModel.AddPolyline(wp);\n                    mapViewModel.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\n                    mapViewModel.DrawingPolyline.addLatLng(mapViewModel.DrawingLatLng);\n                });\n                if (markerType === MarkerType.Dummy)\n                    wp.marker.addOneTimeEventListener(\"drag\", function () {\n                        wp.convertFromDummyHandle();\n                        mapViewModel.Waypoints.push(wp);\n                    });\n                //else if (markerType === MarkerType.Waypoint) {\n                //    wp.Name(`Wegpunkt ${mapViewModel.Waypoints().length + 1}`);\n                //}\n                wp.marker.addEventListener(\"dragend\", function () { wp.SaveToServer(); });\n            }\n            else if (markerType === MarkerType.Harbour) {\n                wp.marker.addEventListener(\"mouseover\", function () {\n                    if (mapViewModel.HarbourHelper.Detail() !== undefined)\n                        mapViewModel.ShowRoute(wp);\n                });\n                wp.marker.addEventListener(\"click\", function () { return mapViewModel.HarbourHelper.Detail(wp); });\n            }\n        }\n    };\n    MapViewModel.prototype.CreateHarbour = function (name, latLng) {\n        var h;\n        if (latLng !== undefined)\n            h = new Harbour(latLng, this.Map);\n        else\n            h = new Harbour(this.Map);\n        h.Name(name);\n        this.InitializeWaypoint(h, MarkerType.Harbour);\n        return h;\n    };\n    MapViewModel.prototype.SetOptionKey = function (option, item) {\n        ko.applyBindingsToNode(option, { attr: { \"data-id\": item.Id } }, item);\n        ko.applyBindingsToNode(option, { attr: { \"value\": item.Id } }, item);\n    };\n    ;\n    return MapViewModel;\n}());\nvar dropzoneModalOpenedByDrag = false;\nvar dropzoneModal = $(\"#dropzoneModal\");\nvar jobOverviewModal = $(\"#jobOverviewModal\");\nvar personOverviewModal = $(\"#personOverviewModal\");\nvar dropzone;\nvar hasDrag = false;\nvar uploadModalVisible = false;\nvar pswp = $(\".pswp\")[0];\nvar personDeails = $(\"#personDetails\");\nvar deletePerson = $(\"#deletePerson\");\nvar leftSidebar = new Sidebar($(\"#leftSidebar\"));\nvar rightSidebar = new Sidebar($(\"#rightSidebar\"));\nvar bottomSidebar = new Sidebar($(\"#bottomSidebar\"));\nvar harbourInfo = $(\"#harbourInfo\");\nvar mapViewModel = new MapViewModel(MapMode.View);\nDropzone.options.dropzone =\n    {\n        acceptedFiles: \"image/jpeg,image/png\",\n        dictInvalidFileType: \"Dieser Dateityp wird nicht unterstützt\",\n        dictDefaultMessage: \"Dateien hier ablegen\",\n        init: function () {\n            dropzone = this;\n            dropzone.on(\"success\", function (e, data) {\n                var image = new ClientModel.Image().LoadFromServerEntity(data.Image);\n                mapViewModel.Images.push(image);\n                mapViewModel.GetAlbumById(data.AlbumId).Images.push(image);\n            });\n            dropzone.on(\"queuecomplete\", function () {\n                if (dropzoneModalOpenedByDrag)\n                    dropzoneModal.modal(\"hide\");\n            });\n            dropzone.on(\"dragover\", function () { hasDrag = true; });\n        }\n    };\ndocument.ondragenter =\n    function (e) {\n        if (mapViewModel.IsLoggedIn &&\n            !uploadModalVisible &&\n            !hasDrag &&\n            !dropzoneModalOpenedByDrag &&\n            dropzoneModal.is(\":not(.in)\") &&\n            e.dataTransfer.types[0] === \"Files\" &&\n            mapViewModel.AlbumStack()[0] !== undefined) {\n            dropzoneModal.modal(\"show\");\n            uploadModalVisible = true;\n            dropzoneModalOpenedByDrag = true;\n        }\n        hasDrag = true;\n        e.preventDefault();\n        e.stopPropagation();\n    };\ndocument.ondragover = function () { hasDrag = true; };\ndocument.ondragleave =\n    function (e) {\n        if (uploadModalVisible && hasDrag && dropzoneModalOpenedByDrag && dropzone.getQueuedFiles().length === 0 ||\n            dropzone.getUploadingFiles().length === 0) {\n            hasDrag = false;\n            window.setTimeout(function () {\n                if (!hasDrag) {\n                    dropzoneModal.modal(\"hide\");\n                    uploadModalVisible = false;\n                }\n            }, 1000);\n        }\n        e.preventDefault();\n        e.stopPropagation();\n    };\ndropzoneModal.on(\"hide.bs.modal\", function (e) {\n    if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        alert(\"Das Fenster kann nicht geschlossen werden, während Dateien hochgeladen werden.\");\n        return false;\n    }\n    else {\n        dropzone.removeAllFiles();\n        dropzoneModalOpenedByDrag = false;\n    }\n});\nvar gallery;\n$(\".modal\")\n    .on(\"hidden.bs.modal\", function () {\n    $(this).removeClass(\"fv-modal-stack\");\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") - 1);\n});\n$(\".modal\")\n    .on(\"shown.bs.modal\", function () {\n    // keep track of the number of open modals\n    if (typeof ($(\"body\").data(\"fv_open_modals\")) == \"undefined\") {\n        $(\"body\").data(\"fv_open_modals\", 0);\n    }\n    // if the z-index of this modal has been set, ignore.\n    if ($(this).hasClass(\"fv-modal-stack\")) {\n        return;\n    }\n    $(this).addClass(\"fv-modal-stack\");\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") + 1);\n    $(this).css(\"z-index\", 1040 + (10 * $(\"body\").data(\"fv_open_modals\")));\n    $(\".modal-backdrop\")\n        .not(\".fv-modal-stack\")\n        .css(\"z-index\", 1039 + (10 * $(\"body\").data(\"fv_open_modals\")));\n    $(\".modal-backdrop\")\n        .not(\"fv-modal-stack\")\n        .addClass(\"fv-modal-stack\");\n});\nko.bindingHandlers.daterange = {\n    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n        var value = valueAccessor()();\n        if (value === undefined)\n            valueAccessor()(new Date().toJSON());\n        value = valueAccessor()();\n        $(element)\n            .daterangepicker({\n            \"singleDatePicker\": true,\n            \"showDropdowns\": true,\n            \"timePicker\": true,\n            \"timePicker24Hour\": true,\n            \"timePickerIncrement\": 15,\n            \"locale\": {\n                \"format\": \"DD.MM.YYYY HH:mm\",\n                \"separator\": \" - \",\n                \"applyLabel\": \"Speichern\",\n                \"cancelLabel\": \"Abbrechen\",\n                \"fromLabel\": \"Von\",\n                \"toLabel\": \"Bis\",\n                \"customRangeLabel\": \"Custom\",\n                \"weekLabel\": \"W\",\n                \"daysOfWeek\": [\n                    \"S0\",\n                    \"Mo\",\n                    \"Di\",\n                    \"Mi\",\n                    \"Do\",\n                    \"Fr\",\n                    \"Sa\"\n                ],\n                \"monthNames\": [\n                    \"Januar\",\n                    \"Februar\",\n                    \"März\",\n                    \"April\",\n                    \"Mai\",\n                    \"Juni\",\n                    \"Juli\",\n                    \"August\",\n                    \"September\",\n                    \"Oktober\",\n                    \"November\",\n                    \"Dezember\"\n                ],\n                \"firstDay\": 1\n            },\n            \"alwaysShowCalendars\": true,\n            \"startDate\": value,\n            \"endDate\": value\n        }, function (start) {\n            valueAccessor()(start._d.toJSON());\n        });\n    },\n    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n        $(element).data(\"daterangepicker\").setStartDate(moment(valueAccessor()()));\n    }\n};\nwindow.Parsley.on(\"form:validate\", function (form) {\n    if (form.submitEvent === undefined)\n        return false;\n});\nwindow.Parsley.on(\"form:submit\", function (form) { return false; });\n$(document)\n    .on(\"focusin\", function (e) {\n    if ($(e.target).closest(\".mce-window\").length) {\n        e.stopImmediatePropagation();\n    }\n});\n\n"],"sourceRoot":"/source/"}