{"version":3,"sources":["/source/wwwroot/js/ViewModels/Home/ViewModels/Home/Map.ts","wwwroot/js/ViewModels/Home/Map.js"],"names":["renderTime","startDate","endDate","Date","getTime","duration","time","Math","floor","mins","toString","length","getMiddle","pol","start","getLatLngs","end","L","LatLng","lat","lng","splitPolyline","polyline","Waypoints","DummyHandle","Waypoint","w2","w3","RemoveFromPolyline","undefined","AddToPolyline","addDummyHandle","mapViewModel","AddPolyline","Error","removePolyline","_i","_a","waypoint","RemoveFromMap","Map","removeLayer","CreateWaypoint","MarkerType","Dummy","redrawPolyline","middleLatLng","Longitude","Latitude","SetLatLng","redraw","removeFromPolyline","latLng","removeFromArray","arr","obj","tmpArr","Array","arr_1","item","push","pop","shift","ClientModel","Harbour","Job","WaypointDistance","ctrlPressed","test","navigator","userAgent","$","addClass","MapMode","EditingHelper","editingModalId","deletingModalId","Factory","Dataset","detailModalId","_this","this","EditingModalOpen","DeletingModalOpen","DetailModalOpen","Detail","ko","observable","Editing","Deleting","Delete","DeleteOnServer","done","Save","Parsley","whenValidate","Id","SaveToServer","EditingModal","DeletingModal","parsley","window","ParsleyConfig","on","AlbumStack","unshift","Album","setTimeout","first","focus","subscribe","entity","modal","SaveState","RevertState","Sidebar","DetailSidebar","IsActiv","Hide","Show","DetailModal","MapViewModel","mapMode","IsLoggedIn","routePolyline","IsLastTakInRoute","computed","read","trip","TripHelper","h","HarbourHelper","Tacks","Start","deferEvaluation","GetRouteDistance","distance","tack","isNaN","Distance","TopJobs","Jobs","filter","j","SuperJobId","IsInViewMode","View","IsInAdminMode","Admin","WaypointsLoaded","WaypointConnectionsLoaded","PersonsLoaded","JobsLoaded","TripsLoaded","AddressesLoaded","ImagesLoaded","AlbumsLoaded","WaypointTacksLoaded","TacksLoaded","LocationsLoaded","AlbumImagesLoaded","LogBookEntriesLoaded","CrewsLoaded","WifisLoaded","ContentPagesLoaded","observableArray","WaypointConnections","Harbours","Persons","Trips","Addresses","Images","Locations","Supermarkets","Restaurants","Albums","AlbumImages","LogBookEntries","Crews","Wifis","ContentPages","WaypointHelper","CreateHarbour","rightSidebar","PersonHelper","Person","JobHelper","Trip","AddressHelper","Address","ImageHelper","Image","TackHelper","Tack","LocationHelper","Location","SupermarketHelper","Supermarket","RestaurantHelper","Restaurant","LogBookEntryHelper","LogBookEntry","ContentPageHelper","ContentPage","WifiHelper","w","Wifi","HarbourId","RemoveHarbour","RemoveWaypoint","RemovePolyline","DrawingPolyline","routeFixed","noRevertToPreviousBounds","Polylines","WaypointMarkers","HarboursToSelect","concat","Name","IsDummy","ProcessHarbourSelectOptions","option","value","context_1","contextFor","select","parent","data","change","is","harbour_1","subscription_1","$data","dispose","PersonsToSelect","FullName","ProcessPersonSelectOptions","context_2","person_1","subscription_2","mapbox","accessToken","InitializeMap","mapOptions","contextmenu","contextmenuItems","text","callback","e","console","log","latlng","map","setView","tileLayer","addTo","LoadData","get","nav","remove","_loop_1","cP","Title","click","appendTo","data_1","newHarbour","CalculateDistances","sort","h1","h2","HideRoute","harbour","marker","addEventListener","GetMapMode","RouteDrawing","DrawingLatLng","Point","distanceTo","containerPoint","setOpacity","HoveredPolyine","p1","latLngToContainerPoint","p2","containerPointToLatLng","LineUtil","closestPointOnSegment","startId_1","ServerApi","Connect","addLatLng","originalEvent","cancelBubble","preventDefault","stopPropagation","document","keyup","keyCode","getLatLng","prototype","StartRoute","color","AddToRoute","targetHarbour","lastTack","startHarbour","RouteDistance","wp","RoutePrecessor","End","RedrawTrip","PullTack","tacks","index","indexOf","prevTack","tmpEnd","splice","PushTack","nextTack","RemoveTack","Get","d","d_1","sEntity","Type","LoadFromServerEntity","InitializeModel","d_2","d_3","d_4","d_5","d_6","d_7","d_8","d_9","d_10","ai","d_11","c","d_12","d_13","d_14","AssignedToId","AssignedTo","GetPersonById","TripId","GetTripById","SuperJob","GetJobById","SubJobs","_b","_c","GetAlbumById","AlbumId","_e","_f","GetAddressById","AddressId","GetHarbourById","_g","_h","GetImageById","ImageId","_j","_k","connection","GetWayPointById","Waypoint1Id","Waypoint2Id","_l","_m","entry","StartId","EndId","_o","_p","crew","lBE","GetLogBookEntryById","TackId","GetTackById","p","PersonId","_q","_r","wifi","applyBindings","CreateMarker","enable","disable","GetWaypointById","id","GetLocationById","InitGallery","event","items","albumElem","target","parentElement","currImage","Height","Width","src","Path","gallery","PhotoSwipe","pswp","PhotoSwipeUI_Default","getThumbBoundsFn","elem","padding","parseFloat","getComputedStyle","getPropertyValue","replace","scrollIntoView","bounds","getBoundingClientRect","x","left","y","top","screenY","width","init","AddHarbour","getCenter","arg","Polyline","convertFromDummyHandle","waypoints","calculating","calculated","calculateRoute","Precessor","minimalDist","Number","POSITIVE_INFINITY","minimalWp","calculating_1","ConnectedWayPoints","cWp","dist","calculated_1","round","calculated_2","ShowRoute","highlightedRoute","latLngs","bindLabel","noHide","FitBounds","getBounds","currentBounds","contains","previousBounds","fitBounds","force","tmpBounds_1","FixRoute","markerType","InitializeWaypoint","options","draggable","opacity","icon","Icon","iconUrl","iconSize","className","contextmenuInheritItems","context","Marker","IsInPolyline","addOneTimeEventListener","name","SetOptionKey","applyBindingsToNode","attr","data-id","dropzoneModalOpenedByDrag","dropzoneModal","jobOverviewModal","personOverviewModal","dropzone","hasDrag","uploadModalVisible","personDeails","deletePerson","leftSidebar","bottomSidebar","harbourInfo","Dropzone","acceptedFiles","dictInvalidFileType","dictDefaultMessage","image","ondragenter","dataTransfer","types","ondragover","ondragleave","getQueuedFiles","getUploadingFiles","stopImmediatePropagation","alert","removeAllFiles","removeClass","hasClass","css","not","bindingHandlers","daterange","element","valueAccessor","allBindingsAccessor","viewModel","bindingContext","toJSON","daterangepicker","singleDatePicker","timePicker","timePicker24Hour","autoApply","_d","update","setStartDate","moment","form","submitEvent"],"mappings":"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","file":"wwwroot/js/ViewModels/Home/Map.min.js","sourcesContent":["/// <reference path=\"../../clientmodel.ts\" />\r\n/// <reference path=\"../../servermodel.ts\" />\r\n/// <reference path=\"../../serverapi.ts\" />\r\n/// <reference path=\"../../../../typings/browser/definitions/moment/index.d.ts\" />\r\n\r\nimport Waypoint = ClientModel.Waypoint;\r\nimport Harbour = ClientModel.Harbour;\r\nimport Job = ClientModel.Job;\r\nimport WaypointDistance = ClientModel.WaypointDistance;\r\n\r\nvar ctrlPressed = false;\r\n\r\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n    $(\"body\").addClass(\"mobile\");\r\n}\r\n\r\nfunction renderTime(duration: number);\r\nfunction renderTime(startDate: Date, endDate: Date);\r\nfunction renderTime(startDate: Date | number, endDate?: Date) {\r\n    if (startDate instanceof Date)\r\n        return renderTime(endDate.getTime() - startDate.getTime());\r\n    const duration = <number>startDate;\r\n    var time = Math.floor(duration / 60000);\r\n    var mins = (time % 60).toString();\r\n    if (mins.length === 1)\r\n        mins = \"0\" + mins;\r\n    time = Math.floor(time / 60);\r\n    return time.toString() + \":\" + mins;\r\n}\r\n\r\nfunction getMiddle(pol: L.Polyline): L.LatLng {\r\n    const start = pol.getLatLngs()[0];\r\n    const end = pol.getLatLngs()[1];\r\n    //if (end === undefined)\r\n    //    return start;\r\n    return new L.LatLng(start.lat + ((end.lat - start.lat) / 2), start.lng + ((end.lng - start.lng) / 2));\r\n}\r\n\r\nfunction splitPolyline(polyline: L.Polyline) {\r\n    if (polyline.Waypoints.length === 2 && polyline.DummyHandle instanceof Waypoint) {\r\n        const w1 = polyline.Waypoints[0];\r\n        const w2 = polyline.DummyHandle;\r\n        const w3 = polyline.Waypoints[1];\r\n        w2.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle = undefined;\r\n        w2.AddToPolyline(polyline);\r\n        w3.RemoveFromPolyline(polyline);\r\n        addDummyHandle(polyline);\r\n        addDummyHandle(mapViewModel.AddPolyline([w2, w3]));\r\n        return;\r\n    }\r\n    throw new Error(\"Cannot split polyline. Polyline has no dummy handle or less or more than 2 waypoints\");\r\n}\r\n\r\n\r\nfunction removePolyline(polyline: L.Polyline) {\r\n    for (let waypoint of polyline.Waypoints) {\r\n        waypoint.RemoveFromPolyline(polyline);\r\n    }\r\n    if (polyline.DummyHandle !== undefined) {\r\n        polyline.DummyHandle.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle.RemoveFromMap();\r\n    }\r\n    mapViewModel.Map.removeLayer(polyline);\r\n}\r\n\r\nfunction addDummyHandle(polyline: L.Polyline) {\r\n    if (polyline.DummyHandle === undefined) {\r\n        polyline.DummyHandle = mapViewModel.CreateWaypoint(getMiddle(polyline), MarkerType.Dummy);\r\n        polyline.DummyHandle.AddToPolyline(polyline);\r\n    }\r\n}\r\n\r\nfunction redrawPolyline(polyline: L.Polyline) {\r\n    const middleLatLng = getMiddle(polyline);\r\n    if (polyline.DummyHandle === undefined)\r\n        addDummyHandle(polyline);\r\n    if (polyline.DummyHandle.Longitude() !== middleLatLng.lng || polyline.DummyHandle.Latitude() !== middleLatLng.lat)\r\n        polyline.DummyHandle.SetLatLng(middleLatLng);\r\n    else\r\n        polyline.redraw();\r\n}\r\n\r\nfunction removeFromPolyline(polyline: L.Polyline, latLng: L.LatLng) {\r\n    removeFromArray(polyline.getLatLngs(), latLng);\r\n    polyline.redraw();\r\n}\r\n\r\nfunction removeFromArray<T>(arr: T[], obj: T): boolean {\r\n    const tmpArr = new Array<T>();\r\n    for (let item of arr) {\r\n        if (item !== obj)\r\n            tmpArr.push(item);\r\n    }\r\n    if (tmpArr.length === arr.length)\r\n        return false;\r\n    while (arr.pop()) {\r\n    }\r\n    while (tmpArr.length > 0) {\r\n        arr.push(tmpArr.shift());\r\n    }\r\n    return true;\r\n}\r\n\r\nenum MapMode {\r\n    Admin,\r\n    View,\r\n    TripPlanning,\r\n    RouteDrawing\r\n}\r\n\r\ndeclare namespace L {\r\n    export interface Polyline extends Path {\r\n\r\n        Waypoints: Array<Waypoint>;\r\n        DummyHandle: Waypoint;\r\n    }\r\n\r\n    export interface LatLng {\r\n        Polylines: Polyline[];\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface Marker {\r\n        Waypoint: Waypoint;\r\n        Point: L.Point;\r\n        _icon;\r\n    }\r\n\r\n    export interface CircleMarker {\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface PathOptions {\r\n        Draggable?: boolean;\r\n    }\r\n\r\n    export interface MarkerOptions {\r\n        contextmenu?: boolean;\r\n        contextmenuWidth?: number;\r\n        contextmenuAnchor?: L.Point | L.Point[];\r\n        contextmenuItems?: contextmenuItem[];\r\n        contextmenuInheritItems: boolean;\r\n\r\n    }\r\n\r\n    export interface contextmenuItem {\r\n        text?: string;\r\n        icon?: string;\r\n        iconCls?: string;\r\n        callback?: Function;\r\n        context?: Object;\r\n        disabled?: boolean;\r\n        separator?: boolean;\r\n        hideOnSelect?: boolean;\r\n        index?: number;\r\n    }\r\n\r\n\r\n}\r\n\r\nclass EditingHelper<T extends ClientModel.Entity> {\r\n\r\n    constructor(editingModalId: string, deletingModalId: string, Factory: () => T, Dataset: KnockoutObservableArray<T>, detailModalId: string);\r\n    constructor(editingModalId: string, deletingModalId: string, Factory: () => T, Dataset: KnockoutObservableArray<T>, detailedSidebar: Sidebar);\r\n    constructor(editingModalId: string, deletingModalId: string, Factory: () => T, Dataset: KnockoutObservableArray<T>);\r\n    constructor(editingModalId: string, deletingModalId: string, protected Factory: () => T, protected Dataset: KnockoutObservableArray<T>, detailModalId?: string | Sidebar) {\r\n        this.EditingModal = $(`#${editingModalId}`);\r\n        this.DeletingModal = $(`#${deletingModalId}`);\r\n\r\n        if ($(\"form:first\").length === 1)\r\n            this.Parsley = $(\"form:first\", this.EditingModal).parsley(window.ParsleyConfig);\r\n        this.EditingModal.on(\"show.bs.modal\",\r\n            () => {\r\n                this.EditingModalOpen = true;\r\n                if (this.Editing() === undefined)\r\n                    this.Editing(this.Factory());\r\n                mapViewModel.AlbumStack.unshift(this.Editing().Album());\r\n            });\r\n\r\n        this.EditingModal.on(\"shown.bs.modal\",\r\n            () => {\r\n                window.setTimeout(() => $(\"input, select, textarea\", this.EditingModal).first().focus(), 200);\r\n            });\r\n\r\n        this.EditingModal.on(\"hidden.bs.modal\",\r\n            () => {\r\n                if (this.Editing() !== undefined)\r\n                    this.Editing(undefined);\r\n                this.EditingModalOpen = false;\r\n                mapViewModel.AlbumStack.shift();\r\n            });\r\n        this.Editing.subscribe((entity) => {\r\n            if (entity === undefined && this.EditingModalOpen) {\r\n                this.EditingModal.modal(\"hide\");\r\n            } else if (!this.EditingModalOpen) {\r\n                entity.SaveState();\r\n                this.EditingModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.Editing.subscribe(() => {\r\n            if (this.Editing() !== undefined) {\r\n                this.Editing().RevertState(true);\r\n            }\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n\r\n        this.DeletingModal.on(\"show.bs.modal\",\r\n            () => {\r\n                this.DeletingModalOpen = true;\r\n                mapViewModel.AlbumStack.unshift(undefined);\r\n            });\r\n\r\n        this.DeletingModal.on(\"hidden.bs.modal\",\r\n            () => {\r\n                if (this.Deleting() !== undefined)\r\n                    this.Deleting(undefined);\r\n                mapViewModel.AlbumStack.shift();\r\n                this.DeletingModalOpen = false;\r\n            });\r\n        this.Deleting.subscribe((entity) => {\r\n            if (entity === undefined && this.DeletingModalOpen) {\r\n                this.DeletingModal.modal(\"hide\");\r\n            } else if (!this.DeletingModalOpen) {\r\n                this.DeletingModal.modal(\"show\");\r\n            }\r\n        });\r\n\r\n        if (detailModalId !== undefined) {\r\n            if (detailModalId instanceof Sidebar) {\r\n                this.DetailSidebar = detailModalId;\r\n                this.Detail.subscribe((entity) => {\r\n                    if (entity === undefined && this.DetailSidebar.IsActiv()) {\r\n                        mapViewModel.AlbumStack.shift();\r\n                        this.DetailSidebar.Hide();\r\n                    } else if (entity !== undefined && !this.DetailSidebar.IsActiv()) {\r\n                        this.DetailSidebar.Show();\r\n                        mapViewModel.AlbumStack.unshift(entity.Album());\r\n                    }\r\n                });\r\n            } else {\r\n                this.DetailModal = $(`#${detailModalId}`);\r\n                this.Detail.subscribe((entity) => {\r\n                    if (entity === undefined && this.DetailModalOpen) {\r\n                        this.DetailModal.modal(\"hide\");\r\n                    } else if (entity !== undefined && !this.DetailModalOpen) {\r\n                        this.DetailModal.modal(\"show\");\r\n                    }\r\n                });\r\n\r\n                this.DetailModal.on(\"show.bs.modal\",\r\n                    () => {\r\n                        this.DetailModalOpen = true;\r\n                        mapViewModel.AlbumStack.unshift(this.Detail().Album());\r\n                    });\r\n\r\n                this.DetailModal.on(\"hide.bs.modal\",\r\n                    () => {\r\n                        this.DetailModalOpen = false;\r\n                        mapViewModel.AlbumStack.shift();\r\n                    });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    protected EditingModal: JQuery;\r\n    protected DeletingModal: JQuery;\r\n    protected DetailModal: JQuery;\r\n    protected DetailSidebar: Sidebar;\r\n    protected EditingModalOpen = false;\r\n    protected DeletingModalOpen = false;\r\n    protected DetailModalOpen = false;\r\n    protected Parsley: any;\r\n\r\n    Detail = ko.observable<T>();\r\n    Editing = ko.observable<T>();\r\n    Deleting = ko.observable<T>();\r\n\r\n    Delete = () => {\r\n        this.Deleting()\r\n            .DeleteOnServer()\r\n            .done(() => {\r\n                //this.Dataset.remove(this.Deleting());\r\n                this.Deleting(undefined);\r\n                if (this.Detail() !== undefined)\r\n                    this.Detail(undefined);\r\n                if (this.Editing() !== undefined)\r\n                    this.Editing(undefined);\r\n            });\r\n    };\r\n\r\n    Save = () => {\r\n        if (this.Parsley !== undefined)\r\n            this.Parsley.whenValidate()\r\n                .done(() => {\r\n                    var isNew = this.Editing().Id() === undefined;\r\n                    this.Editing()\r\n                        .SaveToServer()\r\n                        .done(() => {\r\n                            //if (isNew)\r\n                            //    this.Dataset.push(this.Editing());\r\n                            this.Editing(undefined);\r\n                        });\r\n                });\r\n        else {\r\n            var isNew = this.Editing().Id() === undefined;\r\n            this.Editing()\r\n                .SaveToServer()\r\n                .done(() => {\r\n                    //if (isNew)\r\n                    //    this.Dataset.push(this.Editing());\r\n                    this.Editing(undefined);\r\n                });\r\n        }\r\n    };\r\n}\r\n\r\nclass MapViewModel {\r\n    constructor(mapMode: MapMode) {\r\n        L.mapbox\r\n            .accessToken =\r\n            \"pk.eyJ1IjoiZGFuaWVsLWt1b24iLCJhIjoiY2lldnVtY29iMDBiOHQxbTBvZzBqZWl6cCJ9.UEc2YqH59pB1YTpv22vg8A\";\r\n        this.MapMode(mapMode);\r\n        this.MapMode.subscribe(() => {\r\n            this.InitializeMap();\r\n        });\r\n        const mapOptions: L.mapbox.MapOptions = {\r\n            contextmenu: mapMode === MapMode.Admin,\r\n            contextmenuItems: [\r\n                {\r\n                    text: \"Neuer Hafen\",\r\n                    callback: function (e) {\r\n                        console.log(e);\r\n                        mapViewModel.HarbourHelper.Editing(mapViewModel.CreateHarbour(\"\", e.latlng));\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        this.Map = L.mapbox.map(\"map\",\r\n            \"mapbox.streets\",\r\n            mapOptions);\r\n        this.Map.setView([54.40774166820069, 10.523529052734373], 9);\r\n        L.tileLayer(\"http://t1.openseamap.org/seamark/{z}/{x}/{y}.png\").addTo(this.Map);\r\n        this.LoadData();\r\n        $.get(\"/Account/LoggedIn\").done((data) => this.IsLoggedIn(data));\r\n        this.ContentPages.subscribe((data) => {\r\n            var nav = $(\"#leftNav\");\r\n            $(\".contentPageLink\", nav).remove();\r\n            for (let cP of data) {\r\n                $(`<li role=\"presentation\" class=\"contentPageLink\"><a href=\"#\">${cP.Title()}</a></li>`).click(() => {\r\n                    mapViewModel.ContentPageHelper.Detail(cP);\r\n                    return false;\r\n                }).appendTo(nav);\r\n            }\r\n        });\r\n\r\n        this.HarbourHelper.Detail.subscribe((newHarbour) => {\r\n            if (newHarbour !== undefined) {\r\n                mapViewModel.CalculateDistances(newHarbour);\r\n                mapViewModel.Harbours.sort((h1, h2) => h1.Distance() - h2.Distance());\r\n            } else {\r\n                for (let h of mapViewModel.Harbours()) {\r\n                    h.Distance(0);\r\n                }\r\n            }\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        });\r\n        this.HarbourHelper.Editing.subscribe((harbour) => {\r\n            if (harbour !== undefined && harbour.Id() === undefined)\r\n                mapViewModel.Map.removeLayer(harbour.marker);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n\r\n        this.Map.addEventListener(\"mousemove\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    this.DrawingLatLng.lat = e.latlng.lat;\r\n                    this.DrawingLatLng.lng = e.latlng.lng;\r\n                    this.DrawingPolyline.redraw();\r\n                }\r\n                if (this.MapMode() === MapMode.Admin)\r\n                    for (let marker of this.WaypointMarkers) {\r\n                        if (marker.Point.distanceTo(e.containerPoint) < 150)\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 1);\r\n                        else\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 0.8);\r\n                    }\r\n                if (mapViewModel.HoveredPolyine !== undefined && mapViewModel.HoveredPolyine.DummyHandle !== undefined) {\r\n                    const polyline = mapViewModel.HoveredPolyine;\r\n                    const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n                    const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n                    if (p1.distanceTo(e.containerPoint) < 20 || p2.distanceTo(e.containerPoint) < 20) {\r\n                        mapViewModel.HoveredPolyine = undefined;\r\n                    } else {\r\n                        mapViewModel.HoveredPolyine.DummyHandle.marker.setOpacity(0.8);\r\n                        mapViewModel.HoveredPolyine.DummyHandle\r\n                            .SetLatLng(mapViewModel.Map\r\n                                .containerPointToLatLng(L.LineUtil\r\n                                    .closestPointOnSegment(e.containerPoint,\r\n                                    p1,\r\n                                    p2)),\r\n                            false);\r\n                    }\r\n                }\r\n\r\n            });\r\n        this.Map.addEventListener(\"click\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    const waypoint = mapViewModel.CreateWaypoint(e.latlng, MarkerType.Waypoint);\r\n                    const startId = this.DrawingPolyline.Waypoints[0].Id();\r\n                    waypoint.SaveToServer()\r\n                        .done(w => {\r\n                            ServerApi.WaypointConnections\r\n                                .Connect(w.Id, startId);\r\n                        });\r\n                    waypoint.AddToPolyline(this.DrawingPolyline);\r\n                    addDummyHandle(this.DrawingPolyline);\r\n                    removeFromPolyline(this.DrawingPolyline, this.DrawingLatLng);\r\n                    this.DrawingPolyline = this.AddPolyline(waypoint);\r\n                    this.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                    this.DrawingPolyline.addLatLng(this.DrawingLatLng);\r\n                }\r\n            });\r\n\r\n        this.Map.addEventListener(\"dblclick\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    e.originalEvent.cancelBubble = true;\r\n                    e.originalEvent.preventDefault();\r\n                    e.originalEvent.stopPropagation();\r\n                    this.DrawingPolyline.addLatLng(e.latlng);\r\n                    this.DrawingLatLng = e.latlng;\r\n                }\r\n            });\r\n        $(document)\r\n            .keyup((e: JQueryKeyEventObject) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    if (e.keyCode === 27) {\r\n                        this.RemovePolyline(this.DrawingPolyline);\r\n                    }\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"move\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"zoom\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n    }\r\n\r\n    IsLoggedIn=ko.observable(false);\r\n\r\n    private routePolyline = ko.observable<L.Polyline>();\r\n\r\n    StartRoute() {\r\n        const trip = new ClientModel.Trip();\r\n        const tack = new ClientModel.Tack();\r\n        const harbour = mapViewModel.HarbourHelper.Detail();\r\n        tack.Start(harbour);\r\n        trip.Tacks.push(tack);\r\n        mapViewModel.TripHelper.Editing(trip);\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n    }\r\n\r\n    IsLastTakInRoute = ko.computed({\r\n        read: () => {\r\n            var trip = mapViewModel.TripHelper.Editing();\r\n            var h = mapViewModel.HarbourHelper.Detail();\r\n            return trip !== undefined && h !== undefined && trip.Tacks()[trip.Tacks().length - 1].Start() === h;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    GetRouteDistance = ko.computed({\r\n        read: () => {\r\n            var distance = 0;\r\n            for (let tack of mapViewModel.TripHelper.Editing().Tacks()) {\r\n                if (!isNaN(tack.Distance()))\r\n                    distance += tack.Distance();\r\n            }\r\n            return distance;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    TopJobs = ko.computed({\r\n        read: () => {\r\n            return mapViewModel.Jobs().filter((j) => j.SuperJobId() === undefined);\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    AddToRoute() {\r\n        const trip = mapViewModel.TripHelper.Editing();\r\n        const targetHarbour = mapViewModel.HarbourHelper.Editing();\r\n        const tack = new ClientModel.Tack();\r\n        const lastTack = trip.Tacks()[trip.Tacks().length - 1];\r\n        const startHarbour = lastTack.Start();\r\n        mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n        lastTack.Distance(startHarbour.RouteDistance());\r\n        let wp: ClientModel.Waypoint = startHarbour;\r\n        mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n            wp = wp.RoutePrecessor();\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        }\r\n\r\n        lastTack.End(targetHarbour);\r\n        tack.Start(targetHarbour);\r\n        trip.Tacks.push(tack);\r\n    }\r\n\r\n    RedrawTrip() {\r\n        mapViewModel.Map.removeLayer(mapViewModel.routePolyline());\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n        for (let tack of mapViewModel.TripHelper.Editing().Tacks()) {\r\n            const targetHarbour = tack.End();\r\n            const startHarbour = tack.Start();\r\n            if (targetHarbour === undefined)\r\n                continue;\r\n            mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n            tack.Distance(startHarbour.RouteDistance());\r\n            let wp: ClientModel.Waypoint = startHarbour;\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n                wp = wp.RoutePrecessor();\r\n                mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            }\r\n        }\r\n    }\r\n\r\n    PullTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        var tmpEnd = tack.End();\r\n        tack.End(prevTack.Start());\r\n        prevTack.End(tmpEnd);\r\n        if (index > 1) {\r\n            tacks()[index - 2].End(tack.Start());\r\n        }\r\n        tacks.splice(index - 1, 2, tack, prevTack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    PushTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const nextTack = tacks()[index + 1];\r\n        tack.End(nextTack.End());\r\n        nextTack.End(tack.Start());\r\n        if (index > 0) {\r\n            tacks()[index - 1].End(nextTack.Start());\r\n        }\r\n        tacks.splice(index, 2, nextTack, tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    RemoveTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.TripHelper.Editing().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        if (prevTack !== undefined)\r\n            prevTack.End(tack.End());\r\n        tacks.remove(tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    IsInViewMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.View;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    IsInAdminMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.Admin;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n\r\n    LoadData() {\r\n        ServerApi.Waypoints\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    if (sEntity.Type === \"Waypoint\")\r\n                        this.Waypoints.push(mapViewModel\r\n                            .CreateWaypoint(MarkerType.Waypoint)\r\n                            .LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === \"Harbour\") {\r\n                        const harbour = mapViewModel\r\n                            .CreateHarbour()\r\n                            .LoadFromServerEntity(sEntity);\r\n                        this.Harbours.push(harbour);\r\n                    }\r\n                }\r\n\r\n                this.WaypointsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.WaypointConnections\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.WaypointConnections.push(sEntity);\r\n                }\r\n                this.WaypointConnectionsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Persons\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Persons.push(new ClientModel.Person().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.PersonsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Jobs\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Jobs.push(new ClientModel.Job().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.JobsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Trips\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Trips.push(new ClientModel.Trip().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TripsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Addresses\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Addresses.push(new ClientModel.Address().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AddressesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Images\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Images.push(new ClientModel.Image().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.ImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Albums\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Albums.push(new ClientModel.Album().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AlbumsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.LogBookEntries\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.LogBookEntries.push(new ClientModel.LogBookEntry().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.LogBookEntriesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AlbumImages.Get()\r\n            .done(d => {\r\n                for (let ai of d) {\r\n                    this.AlbumImages.push(ai);\r\n                }\r\n                this.AlbumImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Crews.Get()\r\n            .done(d => {\r\n                for (let c of d) {\r\n                    this.Crews.push(c);\r\n                }\r\n                this.CrewsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Wifis.Get()\r\n            .done(d => {\r\n                for (let c of d) {\r\n                    this.Wifis.push(new ClientModel.Wifi().LoadFromServerEntity(c));\r\n                }\r\n                this.WifisLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.ContentPages.Get()\r\n            .done(d => {\r\n                for (let c of d) {\r\n                    this.ContentPages.push(new ClientModel.ContentPage().LoadFromServerEntity(c));\r\n                }\r\n                this.ContentPagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        //ServerApi.WaypointTacks.Get().done(d => {\r\n        //    for (let sEntity of d) { this.WaypointTacks.push(new ClientModel.WaypointTack().LoadFromServerEntity(sEntity)); }\r\n        //    this.WaypointTacksLoaded = true;\r\n        //    this.InitialozeModel();\r\n        //});\r\n        ServerApi.Tacks\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Tacks.push(new ClientModel.Tack().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TacksLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        //ServerApi.Locations\r\n        //    .Get()\r\n        //    .done(d => {\r\n        //        for (let sEntity of d) {\r\n        //            if (sEntity.Type === \"Location\")\r\n        //                this.Locations.push(new ClientModel.Location().LoadFromServerEntity(sEntity));\r\n        //            else if (sEntity.Type === \"Restaurant\")\r\n        //                this.Restaurants.push(new ClientModel.Restaurant().LoadFromServerEntity(sEntity));\r\n        //            else if (sEntity.Type === \"Supermarket\")\r\n        //                this.Supermarkets.push(new ClientModel.Supermarket().LoadFromServerEntity(sEntity));\r\n        //        }\r\n        this.LocationsLoaded = true;\r\n        //        this.InitializeModel();\r\n        //    });\r\n    }\r\n\r\n    InitializeModel() {\r\n        if (this.WaypointsLoaded &&\r\n            this.WaypointConnectionsLoaded &&\r\n            this.PersonsLoaded &&\r\n            this.JobsLoaded &&\r\n            this.TripsLoaded &&\r\n            this.AddressesLoaded &&\r\n            this.ImagesLoaded &&\r\n            this.AlbumsLoaded &&\r\n            //this.WaypointTacksLoaded &&\r\n            this.TacksLoaded &&\r\n            this.LocationsLoaded &&\r\n            this.CrewsLoaded &&\r\n            this.LogBookEntriesLoaded &&\r\n            this.AlbumImagesLoaded &&\r\n            this.WifisLoaded &&\r\n            this.ContentPagesLoaded) {\r\n            for (let entity of this.Jobs()) {\r\n                if (entity.AssignedToId() !== undefined)\r\n                    entity.AssignedTo(this.GetPersonById(entity.AssignedToId()));\r\n                if (entity.TripId() !== undefined)\r\n                    entity.Trip(this.GetTripById(entity.TripId()));\r\n                if (entity.SuperJobId() !== undefined) {\r\n                    entity.SuperJob(this.GetJobById(entity.SuperJobId()));\r\n                    entity.SuperJob().SubJobs.push(entity);\r\n                }\r\n            }\r\n            for (let entity of this.Harbours()) {\r\n                entity.Album(this.GetAlbumById(entity.AlbumId()));\r\n            }\r\n            for (let entity of this.Locations()) {\r\n                entity.Address(this.GetAddressById(entity.AddressId()));\r\n                this.GetHarbourById(entity.HarbourId()).Locations.push(entity);\r\n            }\r\n            for (let entity of this.AlbumImages()) {\r\n                this.GetAlbumById(entity.AlbumId).Images.push(this.GetImageById(entity.ImageId));\r\n            }\r\n            for (let connection of mapViewModel.WaypointConnections()) {\r\n                const polyline = mapViewModel.AddPolyline([\r\n                    mapViewModel.GetWayPointById(connection.Waypoint1Id), mapViewModel\r\n                        .GetWayPointById(connection.Waypoint2Id)\r\n                ]);\r\n                addDummyHandle(polyline);\r\n            }\r\n            for (let entry of mapViewModel.LogBookEntries()) {\r\n                entry.Start(mapViewModel.GetHarbourById(entry.StartId()));\r\n                entry.End(mapViewModel.GetHarbourById(entry.EndId()));\r\n                entry.Album(mapViewModel.GetAlbumById(entry.AlbumId()));\r\n            }\r\n            for (let crew of mapViewModel.Crews()) {\r\n                const lBE = mapViewModel.GetLogBookEntryById(crew.TackId);\r\n                const tack = mapViewModel.GetTackById(crew.TackId);\r\n                const trip = mapViewModel.GetTripById(crew.TackId);\r\n                const p = mapViewModel.GetPersonById(crew.PersonId);\r\n                if (lBE !== undefined)\r\n                    lBE.Persons.push(p);\r\n                else if (tack !== undefined)\r\n                    tack.Persons.push(p);\r\n                else if (trip !== undefined)\r\n                    trip.Persons.push(p);\r\n            }\r\n            for (let wifi of mapViewModel.Wifis()) {\r\n                var h = mapViewModel.GetHarbourById(wifi.HarbourId());\r\n                h.Wifis.push(wifi);\r\n                wifi.Harbour(h);\r\n            }\r\n            ko.applyBindings(mapViewModel);\r\n            $(\"#loadingOverlay\").remove();\r\n        }\r\n    }\r\n\r\n    InitializeMap() {\r\n        mapViewModel.HarbourHelper.Detail(undefined);\r\n        for (let wp of mapViewModel.Waypoints()) {\r\n            if (wp.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(wp.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Waypoint, wp);\r\n        }\r\n        for (let h of mapViewModel.Harbours()) {\r\n            if (h.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(h.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Harbour, h);\r\n        }\r\n        for (let p of mapViewModel.Polylines) {\r\n            if (p.DummyHandle.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(p.DummyHandle.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Dummy, p.DummyHandle);\r\n        }\r\n        if (mapViewModel.MapMode() === MapMode.Admin) {\r\n            for (let p of mapViewModel.Polylines) {\r\n                p.addTo(mapViewModel.Map);\r\n                //p.contextmenu.enable();\r\n            }\r\n            mapViewModel.Map.contextmenu.enable();\r\n        } else {\r\n            for (let p of mapViewModel.Polylines) {\r\n                mapViewModel.Map.removeLayer(p);\r\n                //p.contextmenu.disable();\r\n            }\r\n            mapViewModel.Map.contextmenu.disable();\r\n        }\r\n    }\r\n\r\n    Map: L.mapbox.Map;\r\n\r\n    GetWaypointById(id: number): ClientModel.Waypoint {\r\n        for (let entity of this.Waypoints()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Waypoint with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetHarbourById(id: number): ClientModel.Harbour {\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Harbour with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetPersonById(id: number): ClientModel.Person {\r\n        for (let entity of this.Persons()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Person with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetJobById(id: number): ClientModel.Job {\r\n        for (let entity of this.Jobs()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Job with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetTripById(id: number): ClientModel.Trip {\r\n        for (let entity of this.Trips()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Trip with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetAddressById(id: number): ClientModel.Address {\r\n        for (let entity of this.Addresses()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Address with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetImageById(id: number): ClientModel.Image {\r\n        for (let entity of this.Images()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Image with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetTackById(id: number): ClientModel.Tack {\r\n        for (let entity of this.Tacks()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetLogBookEntryById(id: number): ClientModel.LogBookEntry {\r\n        for (let entity of this.LogBookEntries()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetAlbumById(id: number): ClientModel.Album {\r\n        for (let entity of this.Albums()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    GetLocationById(id: number): ClientModel.Location {\r\n        for (let entity of this.Locations()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Location with id \" + id + \" found\";\r\n        return undefined;\r\n    }\r\n\r\n    WaypointsLoaded = false;\r\n    WaypointConnectionsLoaded = false;\r\n    PersonsLoaded = false;\r\n    JobsLoaded = false;\r\n    TripsLoaded = false;\r\n    AddressesLoaded = false;\r\n    ImagesLoaded = false;\r\n    AlbumsLoaded = false;\r\n    WaypointTacksLoaded = false;\r\n    TacksLoaded = false;\r\n    LocationsLoaded = false;\r\n    AlbumImagesLoaded = false;\r\n    LogBookEntriesLoaded = false;\r\n    CrewsLoaded = false;\r\n    WifisLoaded = false;\r\n    ContentPagesLoaded = false;\r\n\r\n    Waypoints = ko.observableArray<ClientModel.Waypoint>();\r\n    WaypointConnections = ko.observableArray<ServerModel.WaypointConnection>();\r\n    Harbours = ko.observableArray<ClientModel.Harbour>();\r\n    Persons = ko.observableArray<ClientModel.Person>();\r\n    Jobs = ko.observableArray<ClientModel.Job>();\r\n    Trips = ko.observableArray<ClientModel.Trip>();\r\n    Addresses = ko.observableArray<ClientModel.Address>();\r\n    Images = ko.observableArray<ClientModel.Image>();\r\n    Tacks = ko.observableArray<ClientModel.Tack>();\r\n    Locations = ko.observableArray<ClientModel.Location>();\r\n    Supermarkets = ko.observableArray<ClientModel.Supermarket>();\r\n    Restaurants = ko.observableArray<ClientModel.Restaurant>();\r\n    Albums = ko.observableArray<ClientModel.Album>();\r\n    AlbumImages = ko.observableArray<ServerModel.AlbumImage>();\r\n    LogBookEntries = ko.observableArray<ClientModel.LogBookEntry>();\r\n    Crews = ko.observableArray<ServerModel.Crew>();\r\n    Wifis = ko.observableArray<ClientModel.Wifi>();\r\n    ContentPages = ko.observableArray<ClientModel.ContentPage>();\r\n\r\n    WaypointHelper = new EditingHelper(\"editingWaypointModal\", \"deletingWaypointModal\", () => this.CreateWaypoint(MarkerType.Waypoint), this.Waypoints);\r\n    HarbourHelper = new EditingHelper(\"editingHarbourModal\", \"deletingHarbourModal\", () => this.CreateHarbour(), this.Harbours, rightSidebar);\r\n    PersonHelper = new EditingHelper(\"editingPersonModal\", \"deletingPersonModal\", () => new ClientModel.Person(), this.Persons);\r\n    JobHelper = new EditingHelper(\"editingJobModal\", \"deletingJobModal\", () => new ClientModel.Job(), this.Jobs);\r\n    TripHelper = new EditingHelper(\"editingTripModal\", \"deletingTripModal\", () => new ClientModel.Trip(), this.Trips);\r\n    AddressHelper = new EditingHelper(\"editingAddressModal\", \"deletingAddressModal\", () => new ClientModel.Address(), this.Addresses);\r\n    ImageHelper = new EditingHelper(\"editingImageModal\", \"deletingImageModal\", () => new ClientModel.Image(), this.Images);\r\n    TackHelper = new EditingHelper(\"editingTackModal\", \"deletingTackModal\", () => new ClientModel.Tack(), this.Tacks);\r\n    LocationHelper = new EditingHelper(\"editingLocationModal\", \"deletingLocationModal\", () => new ClientModel.Location(), this.Locations);\r\n    SupermarketHelper = new EditingHelper(\"editingSupermarketModal\", \"deletingSupermarketModal\", () => new ClientModel.Supermarket(), this.Supermarkets);\r\n    RestaurantHelper = new EditingHelper(\"editingRestaurantModal\", \"deletingRestaurantModal\", () => new ClientModel.Restaurant(), this.Restaurants);\r\n    LogBookEntryHelper = new EditingHelper(\"editingLogBookEntryModal\", \"deletingLogBookEntryModal\", () => new ClientModel.LogBookEntry(), this.LogBookEntries, \"detailedLogBookEntryModal\");\r\n    ContentPageHelper = new EditingHelper(\"editingContentPageModal\", \"deletingContentPageModal\", () => new ClientModel.ContentPage(), this.ContentPages, \"detailedContentPageModal\");\r\n    WifiHelper = new EditingHelper(\"editingWifiModal\", \"deletingWifiModal\", () => {\r\n        const w = new ClientModel.Wifi();\r\n        w.HarbourId(mapViewModel.HarbourHelper.Detail().Id());\r\n        return w;\r\n    }, this.Wifis, \"detailWifiModal\");\r\n\r\n    //SortedLogBookEntries = ko.computed({\r\n    //    read: () => this.LogBookEntries.sort((l1, l2) => {\r\n    //        var t1 = l1.StartDate().getTime();\r\n    //        var t2 = l2.StartDate().getTime();\r\n    //        return t2 - t1;\r\n    //    }),\r\n    //    deferEvaluation: true\r\n    //});\r\n\r\n    InitGallery(item: ClientModel.Image, event: JQueryEventObject) {\r\n        const items = new Array<PhotoSwipe.Item>();\r\n        const albumElem = event.target.parentElement;\r\n        const currImage: ClientModel.Image = this as any;\r\n        for (let data of mapViewModel.AlbumStack()[0].Images()) {\r\n            items.push(({\r\n                h: data.Height(),\r\n                w: data.Width(),\r\n                src: data.Path()\r\n            } as any));\r\n        }\r\n        gallery = new PhotoSwipe(pswp,\r\n            PhotoSwipeUI_Default,\r\n            items,\r\n            {\r\n                index: mapViewModel.AlbumStack()[0].Images.indexOf(currImage) as number,\r\n                getThumbBoundsFn: (index: number): { x: number; y: number; w: number } => {\r\n                    const elem = $(\"img\", albumElem)[index];\r\n                    var padding = parseFloat(window.getComputedStyle(elem, null)\r\n                        .getPropertyValue(\"padding-left\")\r\n                        .replace(\"px\", \"\"));\r\n                    elem.scrollIntoView(false);\r\n                    const bounds = elem.getBoundingClientRect();\r\n                    return {\r\n                        x: bounds.left + padding,\r\n                        y: bounds.top + window.screenY + padding,\r\n                        w: bounds.width - (2 * padding)\r\n                    };\r\n                }\r\n            });\r\n        gallery.init();\r\n    }\r\n\r\n    AddHarbour(): void {\r\n        const harbour = mapViewModel.CreateHarbour(`Hafen ${this.Harbours.length}`, this.Map.getCenter());\r\n        mapViewModel.Harbours.push(harbour);\r\n        harbour.SaveToServer();\r\n    }\r\n\r\n    RemoveHarbour = () => {\r\n        mapViewModel.HarbourHelper.Detail().DeleteOnServer();\r\n    };\r\n    RemoveWaypoint = () => {\r\n        mapViewModel.WaypointHelper.Detail().DeleteOnServer();\r\n    };\r\n\r\n    //CopyHarbour(h1: Harbour, h2: Harbour): void {\r\n    //    this.CopyWaypoint(h1, h2);\r\n    //}\r\n\r\n    //CopyWaypoint(w1: Waypoint, w2: Waypoint) {\r\n    //    w2.WaypointNumber(w1.WaypointNumber());\r\n    //    w2.Latitude(w1.Latitude());\r\n    //    w2.Longitude(w1.Longitude());\r\n    //    w2.Name(w1.Name());\r\n    //    w2.Description(w1.Description());\r\n    //}\r\n\r\n    AddPolyline(waypoint?: Waypoint): L.Polyline;\r\n    AddPolyline(waypoints?: Waypoint[]): L.Polyline;\r\n    AddPolyline(arg?): L.Polyline {\r\n        //var options = {\r\n        //    contextmenu: true,\r\n        //    contextmenuInheritItems: false,\r\n        //    contextmenuItems: [\r\n        //        {\r\n        //            text: \"FFFFFFFFFFFFFFFFFF\",\r\n        //            callback: function() { console.log(this);\r\n        //                console.log(arguments);mapViewModel.HarbourHelper.Editing(this) }\r\n        //        },\r\n        //        {\r\n        //            text: \"Löschen\",\r\n        //            callback: function() { mapViewModel.HarbourHelper.Deleting(this) }\r\n        //        }\r\n        //    ]\r\n        //};\r\n\r\n        const polyline = new L.Polyline([]);\r\n\r\n        //polyline.bindContextMenu(options);\r\n\r\n        mapViewModel.Polylines.push(polyline);\r\n        polyline.addEventListener(\"click\", (e: L.LeafletMouseEvent) => {\r\n            const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n            const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n            polyline.DummyHandle\r\n                .SetLatLng(mapViewModel.Map\r\n                    .containerPointToLatLng(L.LineUtil\r\n                        .closestPointOnSegment(e.containerPoint,\r\n                        p1,\r\n                        p2)),\r\n                false);\r\n\r\n            mapViewModel.Waypoints.push(polyline.DummyHandle);\r\n            polyline.DummyHandle.convertFromDummyHandle();\r\n        });\r\n        if (mapViewModel.MapMode() === MapMode.Admin)\r\n            polyline.addTo(this.Map);\r\n        polyline.Waypoints = new Array();\r\n        if (arg !== undefined)\r\n            if (arg instanceof Waypoint)\r\n                (arg as Waypoint).AddToPolyline(polyline);\r\n            else\r\n                for (let waypoint of arg as Waypoint[]) {\r\n                    waypoint.AddToPolyline(polyline);\r\n                }\r\n        polyline.addEventListener(\"mouseover\",\r\n            () => {\r\n                mapViewModel.HoveredPolyine = polyline;\r\n            });\r\n        return polyline;\r\n    }\r\n\r\n\r\n    MapMode = ko.observable<MapMode>();\r\n    DrawingLatLng: L.LatLng;\r\n    DrawingSourceWaypoint: Waypoint;\r\n    DrawingTargetWaypoint: Waypoint;\r\n    RemovePolyline = (polyline: L.Polyline) => {\r\n        this.Map.removeLayer(polyline);\r\n        this.DrawingPolyline = undefined;\r\n    };\r\n\r\n    GetMapMode(): MapMode {\r\n        if (this.DrawingPolyline !== undefined && this.DrawingLatLng !== undefined)\r\n            return MapMode.RouteDrawing;\r\n        return this.MapMode();\r\n    }\r\n\r\n    GetWayPointById(id: number): Waypoint {\r\n        for (let waypoint of this.Waypoints()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        for (let waypoint of this.Harbours()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        throw `No Waypoint with id ${id} in model`;\r\n    }\r\n\r\n    CalculateDistances(start = mapViewModel.HarbourHelper.Detail(), target?: ClientModel.Waypoint) {\r\n\r\n        const waypoints: Array<Waypoint> = [start];\r\n        const calculating = new Array<WaypointDistance>();\r\n        const calculated = new Array<WaypointDistance>();\r\n        const calculateRoute = target !== undefined;\r\n        calculating.push(new WaypointDistance(undefined, start, 0, waypoints, calculateRoute));\r\n        //for (let waypoint of mapViewModel.Waypoints()) {\r\n        //    waypoints.push(new WaypointDistance(null, waypoint, Number.POSITIVE_INFINITY));\r\n        //}\r\n        //for (let harbour of mapViewModel.Harbours()) {\r\n        //    if (harbour !== start) {\r\n        //        waypoints.push(new WaypointDistance(null, harbour, Number.POSITIVE_INFINITY));\r\n        //    }\r\n        //}\r\n        if (calculateRoute) {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.RoutePrecessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.RoutePrecessor(undefined);\r\n            }\r\n        } else {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.Precessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.Precessor(undefined);\r\n            }\r\n        }\r\n        while (calculating.length > 0) {\r\n            let minimalDist = Number.POSITIVE_INFINITY;\r\n            let minimalWp: WaypointDistance;\r\n            for (let wp of calculating) {\r\n                for (let cWp of wp.ConnectedWayPoints) {\r\n                    if ((calculateRoute ? cWp.RoutePrecessor() : cWp.Precessor()) !== undefined)\r\n                        removeFromArray(wp.ConnectedWayPoints, cWp);\r\n                }\r\n                if (wp.ConnectedWayPoints.length === 0) {\r\n                    removeFromArray(calculating, wp);\r\n                    calculated.push(wp);\r\n                } else {\r\n                    const dist = wp.Distance + wp.ConnectedWayPoints[0].LatLng.distanceTo(wp.LatLng) / 1.852;\r\n                    if (dist < minimalDist) {\r\n                        minimalDist = dist;\r\n                        minimalWp = wp;\r\n                    }\r\n                }\r\n            }\r\n            if (minimalWp !== undefined) {\r\n                calculating.push(new WaypointDistance(minimalWp.Waypoint,\r\n                    minimalWp.ConnectedWayPoints.shift(),\r\n                    minimalDist,\r\n                    waypoints,\r\n                    calculateRoute));\r\n                //if (minimalWP.Waypoint === target)\r\n                //    break;\r\n            }\r\n        }\r\n        if (calculateRoute)\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.RouteDistance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n        else\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.Distance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n    }\r\n\r\n    private highlightedRoute: L.Polyline;\r\n    private routeFixed = false;\r\n    private previousBounds: L.LatLngBounds;\r\n    private noRevertToPreviousBounds = false;\r\n\r\n    ShowRoute(h: ClientModel.Waypoint) {\r\n        if (mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        }\r\n        if (h === undefined)\r\n            h = (this as any);\r\n        if (!(h instanceof ClientModel.Harbour))\r\n            return;\r\n        const latLngs = [h.LatLng];\r\n        let dist = h.Distance();\r\n        if (dist === undefined || dist === null)\r\n            dist = 0;\r\n        while (h.Precessor() !== undefined) {\r\n            h = h.Precessor();\r\n            latLngs.push(h.LatLng);\r\n        }\r\n        mapViewModel.highlightedRoute = L.polyline(latLngs);\r\n        mapViewModel.highlightedRoute.addTo(mapViewModel.Map);\r\n        mapViewModel.highlightedRoute.bindLabel(dist.toString() + \" sm\", { noHide: true });\r\n        mapViewModel.FitBounds(mapViewModel.highlightedRoute.getBounds());\r\n    }\r\n\r\n    FitBounds(bounds: L.LatLngBounds) {\r\n        const map = mapViewModel.Map;\r\n        const currentBounds = map.getBounds();\r\n        if (!currentBounds.contains(bounds)) {\r\n            if (mapViewModel.previousBounds === undefined)\r\n                mapViewModel.previousBounds = currentBounds;\r\n            map.fitBounds(bounds);\r\n        }\r\n    }\r\n\r\n    HideRoute(force = false) {\r\n        if ((!mapViewModel.routeFixed || force) && mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.Map.removeLayer(mapViewModel.highlightedRoute);\r\n            mapViewModel.highlightedRoute = undefined;\r\n            if (!mapViewModel.noRevertToPreviousBounds && mapViewModel.previousBounds !== undefined) {\r\n                const tmpBounds = mapViewModel.previousBounds;\r\n                mapViewModel.previousBounds = undefined;\r\n                window.setTimeout(() => {\r\n                    if (mapViewModel.previousBounds === undefined)\r\n                        mapViewModel.Map.fitBounds(tmpBounds);\r\n                    else\r\n                        mapViewModel.previousBounds = tmpBounds;\r\n                }, 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    FixRoute() {\r\n        mapViewModel.routeFixed = true;\r\n        mapViewModel.previousBounds = undefined;\r\n    }\r\n\r\n    CreateWaypoint(markerType: MarkerType): Waypoint;\r\n    CreateWaypoint(latLng: L.LatLng, markerType: MarkerType): Waypoint;\r\n    CreateWaypoint(latLng?: L.LatLng | MarkerType, markerType?: MarkerType): Waypoint {\r\n        let wp: Waypoint;\r\n        if (markerType !== undefined)\r\n            wp = new Waypoint(<L.LatLng>latLng, markerType, mapViewModel.Map as L.mapbox.Map);\r\n        else\r\n            wp = new Waypoint(markerType, mapViewModel.Map as L.mapbox.Map);\r\n        this.InitializeWaypoint(wp, markerType);\r\n        return wp;\r\n    }\r\n\r\n    InitializeWaypoint(wp: Waypoint, markerType: MarkerType) {\r\n        this.CreateMarker(markerType, wp);\r\n    }\r\n\r\n    CreateMarker(markerType: MarkerType, wp: ClientModel.Waypoint) {\r\n        if (mapViewModel.MapMode() === MapMode.Admin || markerType === MarkerType.Harbour) {\r\n            const options: L.MarkerOptions = {\r\n                draggable: (mapViewModel.MapMode() === MapMode.Admin)\r\n            };\r\n            if (markerType === MarkerType.Dummy) {\r\n                options.opacity = 0;\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin &&\r\n                (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy)) {\r\n                options.icon = new L.Icon({\r\n                    iconUrl: \"/images/waypointhandle.png\",\r\n                    iconSize: new L.Point(10, 10, true),\r\n                    className: \"waypoint\"\r\n                });\r\n\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                options.contextmenu = true;\r\n                options.contextmenuInheritItems = false;\r\n                // ReSharper disable SuspiciousThisUsage\r\n                if (markerType === MarkerType.Harbour) {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.HarbourHelper.Editing(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.HarbourHelper.Deleting(this) }\r\n                        }\r\n                    ];\r\n                } else {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.WaypointHelper.Editing(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.WaypointHelper.Deleting(this) }\r\n                        }\r\n                    ];\r\n                }\r\n                // ReSharper restore SuspiciousThisUsage\r\n            }\r\n\r\n            const marker = new L.Marker(wp.LatLng, options);\r\n            marker.addTo(this.Map);\r\n            marker.Waypoint = wp;\r\n            wp.marker = marker;\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                if (markerType === MarkerType.Dummy)\r\n                    marker.addEventListener(\"mouseout\", (e) => {\r\n                        if (e.target.Waypoint.IsDummy())\r\n                            mapViewModel.HoveredPolyine = undefined;\r\n\r\n                    });\r\n                marker.addEventListener(\"drag\", () => { wp.SetLatLng(wp.marker.getLatLng()); });\r\n                if (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy) {\r\n                    this.WaypointMarkers.push(wp.marker);\r\n                    wp.marker.Point = mapViewModel.Map.latLngToContainerPoint(wp.LatLng);\r\n                }\r\n                wp.marker.addEventListener(\"click\", () => {\r\n                    if (wp.IsDummy()) {\r\n                        mapViewModel.HoveredPolyine = undefined;\r\n                        wp.convertFromDummyHandle();\r\n                        mapViewModel.Waypoints.push(wp);\r\n                    }\r\n                    if (mapViewModel.GetMapMode() === MapMode.RouteDrawing) {\r\n                        if (!wp.IsInPolyline(mapViewModel.DrawingPolyline)) {\r\n                            ServerApi.WaypointConnections\r\n                                .Connect(wp.Id(), mapViewModel.DrawingPolyline.Waypoints[0].Id());\r\n                            wp.AddToPolyline(mapViewModel.DrawingPolyline);\r\n                            removeFromPolyline(mapViewModel.DrawingPolyline, mapViewModel.DrawingLatLng);\r\n                            addDummyHandle(mapViewModel.DrawingPolyline);\r\n                            mapViewModel.DrawingPolyline = undefined;\r\n                            mapViewModel.DrawingLatLng = undefined;\r\n                        } else {\r\n                            removePolyline(mapViewModel.DrawingPolyline);\r\n                            mapViewModel.DrawingPolyline = undefined;\r\n                            mapViewModel.DrawingLatLng = undefined;\r\n                        }\r\n                    }\r\n                });\r\n                wp.marker.addEventListener(\"dblclick\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        mapViewModel.DrawingPolyline = mapViewModel.AddPolyline(wp);\r\n                        mapViewModel.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                        mapViewModel.DrawingPolyline.addLatLng(mapViewModel.DrawingLatLng);\r\n                    });\r\n                if (markerType === MarkerType.Dummy)\r\n                    wp.marker.addOneTimeEventListener(\"drag\", () => {\r\n                        wp.convertFromDummyHandle();\r\n                        mapViewModel.Waypoints.push(wp);\r\n                    });\r\n                //else if (markerType === MarkerType.Waypoint) {\r\n                //    wp.Name(`Wegpunkt ${mapViewModel.Waypoints().length + 1}`);\r\n                //}\r\n                wp.marker.addEventListener(\"dragend\", () => { wp.SaveToServer(); });\r\n            } else if (markerType === MarkerType.Harbour) {\r\n                wp.marker.addEventListener(\"mouseover\", () => {\r\n                    if (mapViewModel.HarbourHelper.Detail() !== undefined)\r\n                        mapViewModel.ShowRoute(wp);\r\n                });\r\n                wp.marker.addEventListener(\"click\", () => mapViewModel.HarbourHelper.Detail(wp as ClientModel.Harbour));\r\n            }\r\n        }\r\n    }\r\n\r\n    CreateHarbour();\r\n    CreateHarbour(name: string, latLng: L.LatLng);\r\n    CreateHarbour(name?: string, latLng?: L.LatLng) {\r\n        let h: Harbour;\r\n        if (latLng !== undefined)\r\n            h = new Harbour(latLng, this.Map as L.mapbox.Map);\r\n        else\r\n            h = new Harbour(this.Map as L.mapbox.Map);\r\n        h.Name(name);\r\n        this.InitializeWaypoint(h, MarkerType.Harbour);\r\n        return h;\r\n    }\r\n\r\n    DrawingPolyline: L.Polyline;\r\n    Polylines = new Array<L.Polyline>();\r\n    WaypointMarkers = new Array();\r\n    HoveredPolyine: L.Polyline;\r\n\r\n    SetOptionKey(option, item: Entity) {\r\n        ko.applyBindingsToNode(option, { attr: { \"data-id\": item.Id } }, item);\r\n        ko.applyBindingsToNode(option, { attr: { \"value\": item.Id } }, item);\r\n    };\r\n\r\n    HarboursToSelect = ko.computed(() => {\r\n        return (<any[]>this.Harbours()).concat([{ Name: \"Neuer Hafen...\", IsDummy: true }]);\r\n    });\r\n\r\n    ProcessHarbourSelectOptions = (option: HTMLOptionElement, item) => {\r\n        if (item !== undefined && item !== null && item.IsDummy === true) {\r\n            option.value = \"filled\";\r\n            const context = ko.contextFor(option);\r\n            const select = $(option).parent();\r\n            if (select.data(\"new-change-handler\") === undefined)\r\n                select.data(\"new-change-handler\",\r\n                    select.change(() => {\r\n                        if ($(option).is(\":selected\")) {\r\n                            const harbour = this.CreateHarbour();\r\n                            this.HarbourHelper.Editing(harbour);\r\n                            const subscription = this.HarbourHelper.Editing.subscribe(() => {\r\n                                if (harbour.Id() !== undefined) {\r\n                                    this.Harbours.push(harbour);\r\n                                    context.$data.Harbour(harbour);\r\n                                } else {\r\n                                    harbour.RemoveFromMap();\r\n                                    context.$data.Harbour(undefined);\r\n                                }\r\n                                subscription.dispose();\r\n                            });\r\n                        }\r\n                    }));\r\n        }\r\n    }\r\n\r\n    PersonsToSelect = ko.computed(() => {\r\n        return (<any[]>this.Persons()).concat([{ FullName: \"Neue Person...\", IsDummy: true }]);\r\n    });\r\n\r\n    ProcessPersonSelectOptions = (option: HTMLOptionElement, item) => {\r\n        if (item !== undefined && item !== null && item.IsDummy === true) {\r\n            option.value = \"filled\";\r\n            const context = ko.contextFor(option);\r\n            const select = $(option).parent();\r\n            if (select.data(\"new-change-handler\") === undefined)\r\n                select.data(\"new-change-handler\",\r\n                    select.change(() => {\r\n                        if ($(option).is(\":selected\")) {\r\n                            const person = new Person();\r\n                            this.PersonHelper.Editing(person);\r\n                            const subscription = this.PersonHelper.Editing.subscribe(() => {\r\n                                if (person.Id() !== undefined) {\r\n                                    this.Persons.push(person);\r\n                                    context.$data.Person(person);\r\n                                } else {\r\n                                    context.$data.Person(undefined);\r\n                                }\r\n                                subscription.dispose();\r\n                            });\r\n                        }\r\n                    }));\r\n        }\r\n    }\r\n\r\n    AlbumStack = ko.observableArray<ClientModel.Album>();\r\n}\r\n\r\nvar dropzoneModalOpenedByDrag = false;\r\nvar dropzoneModal = $(\"#dropzoneModal\");\r\nvar jobOverviewModal = $(\"#jobOverviewModal\");\r\nvar personOverviewModal = $(\"#personOverviewModal\");\r\nvar dropzone: Dropzone;\r\nvar hasDrag = false;\r\nvar uploadModalVisible = false;\r\nvar pswp = $(\".pswp\")[0];\r\nvar personDeails = $(\"#personDetails\");\r\nvar deletePerson = $(\"#deletePerson\");\r\nvar leftSidebar = new Sidebar($(\"#leftSidebar\"));\r\nvar rightSidebar = new Sidebar($(\"#rightSidebar\"));\r\nvar bottomSidebar = new Sidebar($(\"#bottomSidebar\"));\r\nvar harbourInfo = $(\"#harbourInfo\");\r\n\r\nvar mapViewModel = new MapViewModel(MapMode.View);\r\n\r\nDropzone.options.dropzone =\r\n    {\r\n        acceptedFiles: \"image/jpeg,image/png\",\r\n        dictInvalidFileType: \"Dieser Dateityp wird nicht unterstützt\",\r\n        dictDefaultMessage: \"Dateien hier ablegen\",\r\n        init() {\r\n            dropzone = this;\r\n            dropzone.on(\"success\",\r\n                (e, data: ServerModel.AlbumImage) => {\r\n                    var image = new ClientModel.Image().LoadFromServerEntity(data.Image);\r\n                    mapViewModel.Images.push(image);\r\n                    mapViewModel.GetAlbumById(data.AlbumId).Images.push(image);\r\n                });\r\n            dropzone.on(\"queuecomplete\", () => {\r\n                if (dropzoneModalOpenedByDrag)\r\n                    dropzoneModal.modal(\"hide\");\r\n            });\r\n            dropzone.on(\"dragover\", () => { hasDrag = true; });\r\n        }\r\n    };\r\ndocument.ondragenter =\r\n    (e: DragEvent) => {\r\n        if (mapViewModel.IsLoggedIn &&\r\n            !uploadModalVisible &&\r\n            !hasDrag &&\r\n            !dropzoneModalOpenedByDrag &&\r\n            dropzoneModal.is(\":not(.in)\") &&\r\n            e.dataTransfer.types[0] === \"Files\" &&\r\n            mapViewModel.AlbumStack()[0] !== undefined) {\r\n            dropzoneModal.modal(\"show\");\r\n            uploadModalVisible = true;\r\n            dropzoneModalOpenedByDrag = true;\r\n        }\r\n\r\n        hasDrag = true;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndocument.ondragover = () => { hasDrag = true; };\r\ndocument.ondragleave =\r\n    (e: DragEvent) => {\r\n        if (uploadModalVisible && hasDrag && dropzoneModalOpenedByDrag && dropzone.getQueuedFiles().length === 0 ||\r\n            dropzone.getUploadingFiles().length === 0) {\r\n            hasDrag = false;\r\n            window.setTimeout(() => {\r\n                if (!hasDrag) {\r\n                    dropzoneModal.modal(\"hide\");\r\n                    uploadModalVisible = false;\r\n                }\r\n            },\r\n                1000);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndropzoneModal.on(\"hide.bs.modal\",\r\n    e => {\r\n        if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            alert(\"Das Fenster kann nicht geschlossen werden, während Dateien hochgeladen werden.\");\r\n            return false;\r\n        } else {\r\n            dropzone.removeAllFiles();\r\n            dropzoneModalOpenedByDrag = false;\r\n        }\r\n    });\r\nvar gallery: PhotoSwipe<PhotoSwipe.Options>;\r\n\r\n$(\".modal\").on(\"hidden.bs.modal\", function () {\r\n    $(this).removeClass(\"fv-modal-stack\");\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") - 1);\r\n});\r\n\r\n\r\n$(\".modal\").on(\"shown.bs.modal\", function () {\r\n\r\n    // keep track of the number of open modals\r\n\r\n    if (typeof ($(\"body\").data(\"fv_open_modals\")) == \"undefined\") {\r\n        $(\"body\").data(\"fv_open_modals\", 0);\r\n    }\r\n\r\n\r\n    // if the z-index of this modal has been set, ignore.\r\n\r\n    if ($(this).hasClass(\"fv-modal-stack\")) {\r\n        return;\r\n    }\r\n\r\n    $(this).addClass(\"fv-modal-stack\");\r\n\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") + 1);\r\n\r\n    $(this).css(\"z-index\", 1040 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n    $(\".modal-backdrop\").not(\".fv-modal-stack\")\r\n        .css(\"z-index\", 1039 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n\r\n    $(\".modal-backdrop\").not(\"fv-modal-stack\")\r\n        .addClass(\"fv-modal-stack\");\r\n\r\n});\r\n\r\ninterface KnockoutBindingHandlers {\r\n    daterange?: KnockoutBindingHandler;\r\n}\r\n\r\nko.bindingHandlers.daterange = {\r\n    init(element: any, valueAccessor: () => any, allBindingsAccessor?: KnockoutAllBindingsAccessor, viewModel?: any, bindingContext?: KnockoutBindingContext) {\r\n        let value = valueAccessor()();\r\n        if (value === undefined)\r\n            valueAccessor()(new Date().toJSON());\r\n        value = valueAccessor()();\r\n        $(element)\r\n            .daterangepicker({\r\n                \"singleDatePicker\": true,\r\n                \"timePicker\": true,\r\n                \"timePicker24Hour\": true,\r\n                \"autoApply\": true,\r\n                \"startDate\": value,\r\n                \"endDate\": value\r\n            }, (start) => {\r\n                valueAccessor()(start._d.toJSON());\r\n            });\r\n    },\r\n    update(element: any, valueAccessor: () => any, allBindingsAccessor?: KnockoutAllBindingsAccessor, viewModel?: any, bindingContext?: KnockoutBindingContext) {\r\n        $(element).data(\"daterangepicker\").setStartDate(moment(valueAccessor()()));\r\n    }\r\n};\r\n\r\n\r\nwindow.Parsley.on(\"form:validate\", form => {\r\n    if (form.submitEvent === undefined)\r\n        return false;\r\n});\r\n\r\nwindow.Parsley.on(\"form:submit\", form => false);\r\n","/// <reference path=\"../../clientmodel.ts\" />\n/// <reference path=\"../../servermodel.ts\" />\n/// <reference path=\"../../serverapi.ts\" />\n/// <reference path=\"../../../../typings/browser/definitions/moment/index.d.ts\" />\nvar Waypoint = ClientModel.Waypoint;\nvar Harbour = ClientModel.Harbour;\nvar Job = ClientModel.Job;\nvar WaypointDistance = ClientModel.WaypointDistance;\nvar ctrlPressed = false;\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    $(\"body\").addClass(\"mobile\");\n}\nfunction renderTime(startDate, endDate) {\n    if (startDate instanceof Date)\n        return renderTime(endDate.getTime() - startDate.getTime());\n    var duration = startDate;\n    var time = Math.floor(duration / 60000);\n    var mins = (time % 60).toString();\n    if (mins.length === 1)\n        mins = \"0\" + mins;\n    time = Math.floor(time / 60);\n    return time.toString() + \":\" + mins;\n}\nfunction getMiddle(pol) {\n    var start = pol.getLatLngs()[0];\n    var end = pol.getLatLngs()[1];\n    //if (end === undefined)\n    //    return start;\n    return new L.LatLng(start.lat + ((end.lat - start.lat) / 2), start.lng + ((end.lng - start.lng) / 2));\n}\nfunction splitPolyline(polyline) {\n    if (polyline.Waypoints.length === 2 && polyline.DummyHandle instanceof Waypoint) {\n        var w1 = polyline.Waypoints[0];\n        var w2 = polyline.DummyHandle;\n        var w3 = polyline.Waypoints[1];\n        w2.RemoveFromPolyline(polyline);\n        polyline.DummyHandle = undefined;\n        w2.AddToPolyline(polyline);\n        w3.RemoveFromPolyline(polyline);\n        addDummyHandle(polyline);\n        addDummyHandle(mapViewModel.AddPolyline([w2, w3]));\n        return;\n    }\n    throw new Error(\"Cannot split polyline. Polyline has no dummy handle or less or more than 2 waypoints\");\n}\nfunction removePolyline(polyline) {\n    for (var _i = 0, _a = polyline.Waypoints; _i < _a.length; _i++) {\n        var waypoint = _a[_i];\n        waypoint.RemoveFromPolyline(polyline);\n    }\n    if (polyline.DummyHandle !== undefined) {\n        polyline.DummyHandle.RemoveFromPolyline(polyline);\n        polyline.DummyHandle.RemoveFromMap();\n    }\n    mapViewModel.Map.removeLayer(polyline);\n}\nfunction addDummyHandle(polyline) {\n    if (polyline.DummyHandle === undefined) {\n        polyline.DummyHandle = mapViewModel.CreateWaypoint(getMiddle(polyline), MarkerType.Dummy);\n        polyline.DummyHandle.AddToPolyline(polyline);\n    }\n}\nfunction redrawPolyline(polyline) {\n    var middleLatLng = getMiddle(polyline);\n    if (polyline.DummyHandle === undefined)\n        addDummyHandle(polyline);\n    if (polyline.DummyHandle.Longitude() !== middleLatLng.lng || polyline.DummyHandle.Latitude() !== middleLatLng.lat)\n        polyline.DummyHandle.SetLatLng(middleLatLng);\n    else\n        polyline.redraw();\n}\nfunction removeFromPolyline(polyline, latLng) {\n    removeFromArray(polyline.getLatLngs(), latLng);\n    polyline.redraw();\n}\nfunction removeFromArray(arr, obj) {\n    var tmpArr = new Array();\n    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n        var item = arr_1[_i];\n        if (item !== obj)\n            tmpArr.push(item);\n    }\n    if (tmpArr.length === arr.length)\n        return false;\n    while (arr.pop()) {\n    }\n    while (tmpArr.length > 0) {\n        arr.push(tmpArr.shift());\n    }\n    return true;\n}\nvar MapMode;\n(function (MapMode) {\n    MapMode[MapMode[\"Admin\"] = 0] = \"Admin\";\n    MapMode[MapMode[\"View\"] = 1] = \"View\";\n    MapMode[MapMode[\"TripPlanning\"] = 2] = \"TripPlanning\";\n    MapMode[MapMode[\"RouteDrawing\"] = 3] = \"RouteDrawing\";\n})(MapMode || (MapMode = {}));\nvar EditingHelper = (function () {\n    function EditingHelper(editingModalId, deletingModalId, Factory, Dataset, detailModalId) {\n        var _this = this;\n        this.Factory = Factory;\n        this.Dataset = Dataset;\n        this.EditingModalOpen = false;\n        this.DeletingModalOpen = false;\n        this.DetailModalOpen = false;\n        this.Detail = ko.observable();\n        this.Editing = ko.observable();\n        this.Deleting = ko.observable();\n        this.Delete = function () {\n            _this.Deleting()\n                .DeleteOnServer()\n                .done(function () {\n                //this.Dataset.remove(this.Deleting());\n                _this.Deleting(undefined);\n                if (_this.Detail() !== undefined)\n                    _this.Detail(undefined);\n                if (_this.Editing() !== undefined)\n                    _this.Editing(undefined);\n            });\n        };\n        this.Save = function () {\n            if (_this.Parsley !== undefined)\n                _this.Parsley.whenValidate()\n                    .done(function () {\n                    var isNew = _this.Editing().Id() === undefined;\n                    _this.Editing()\n                        .SaveToServer()\n                        .done(function () {\n                        //if (isNew)\n                        //    this.Dataset.push(this.Editing());\n                        _this.Editing(undefined);\n                    });\n                });\n            else {\n                var isNew = _this.Editing().Id() === undefined;\n                _this.Editing()\n                    .SaveToServer()\n                    .done(function () {\n                    //if (isNew)\n                    //    this.Dataset.push(this.Editing());\n                    _this.Editing(undefined);\n                });\n            }\n        };\n        this.EditingModal = $(\"#\" + editingModalId);\n        this.DeletingModal = $(\"#\" + deletingModalId);\n        if ($(\"form:first\").length === 1)\n            this.Parsley = $(\"form:first\", this.EditingModal).parsley(window.ParsleyConfig);\n        this.EditingModal.on(\"show.bs.modal\", function () {\n            _this.EditingModalOpen = true;\n            if (_this.Editing() === undefined)\n                _this.Editing(_this.Factory());\n            mapViewModel.AlbumStack.unshift(_this.Editing().Album());\n        });\n        this.EditingModal.on(\"shown.bs.modal\", function () {\n            window.setTimeout(function () { return $(\"input, select, textarea\", _this.EditingModal).first().focus(); }, 200);\n        });\n        this.EditingModal.on(\"hidden.bs.modal\", function () {\n            if (_this.Editing() !== undefined)\n                _this.Editing(undefined);\n            _this.EditingModalOpen = false;\n            mapViewModel.AlbumStack.shift();\n        });\n        this.Editing.subscribe(function (entity) {\n            if (entity === undefined && _this.EditingModalOpen) {\n                _this.EditingModal.modal(\"hide\");\n            }\n            else if (!_this.EditingModalOpen) {\n                entity.SaveState();\n                _this.EditingModal.modal(\"show\");\n            }\n        });\n        this.Editing.subscribe(function () {\n            if (_this.Editing() !== undefined) {\n                _this.Editing().RevertState(true);\n            }\n        }, this, \"beforeChange\");\n        this.DeletingModal.on(\"show.bs.modal\", function () {\n            _this.DeletingModalOpen = true;\n            mapViewModel.AlbumStack.unshift(undefined);\n        });\n        this.DeletingModal.on(\"hidden.bs.modal\", function () {\n            if (_this.Deleting() !== undefined)\n                _this.Deleting(undefined);\n            mapViewModel.AlbumStack.shift();\n            _this.DeletingModalOpen = false;\n        });\n        this.Deleting.subscribe(function (entity) {\n            if (entity === undefined && _this.DeletingModalOpen) {\n                _this.DeletingModal.modal(\"hide\");\n            }\n            else if (!_this.DeletingModalOpen) {\n                _this.DeletingModal.modal(\"show\");\n            }\n        });\n        if (detailModalId !== undefined) {\n            if (detailModalId instanceof Sidebar) {\n                this.DetailSidebar = detailModalId;\n                this.Detail.subscribe(function (entity) {\n                    if (entity === undefined && _this.DetailSidebar.IsActiv()) {\n                        mapViewModel.AlbumStack.shift();\n                        _this.DetailSidebar.Hide();\n                    }\n                    else if (entity !== undefined && !_this.DetailSidebar.IsActiv()) {\n                        _this.DetailSidebar.Show();\n                        mapViewModel.AlbumStack.unshift(entity.Album());\n                    }\n                });\n            }\n            else {\n                this.DetailModal = $(\"#\" + detailModalId);\n                this.Detail.subscribe(function (entity) {\n                    if (entity === undefined && _this.DetailModalOpen) {\n                        _this.DetailModal.modal(\"hide\");\n                    }\n                    else if (entity !== undefined && !_this.DetailModalOpen) {\n                        _this.DetailModal.modal(\"show\");\n                    }\n                });\n                this.DetailModal.on(\"show.bs.modal\", function () {\n                    _this.DetailModalOpen = true;\n                    mapViewModel.AlbumStack.unshift(_this.Detail().Album());\n                });\n                this.DetailModal.on(\"hide.bs.modal\", function () {\n                    _this.DetailModalOpen = false;\n                    mapViewModel.AlbumStack.shift();\n                });\n            }\n        }\n    }\n    return EditingHelper;\n}());\nvar MapViewModel = (function () {\n    function MapViewModel(mapMode) {\n        var _this = this;\n        this.IsLoggedIn = ko.observable(false);\n        this.routePolyline = ko.observable();\n        this.IsLastTakInRoute = ko.computed({\n            read: function () {\n                var trip = mapViewModel.TripHelper.Editing();\n                var h = mapViewModel.HarbourHelper.Detail();\n                return trip !== undefined && h !== undefined && trip.Tacks()[trip.Tacks().length - 1].Start() === h;\n            },\n            deferEvaluation: true\n        });\n        this.GetRouteDistance = ko.computed({\n            read: function () {\n                var distance = 0;\n                for (var _i = 0, _a = mapViewModel.TripHelper.Editing().Tacks(); _i < _a.length; _i++) {\n                    var tack = _a[_i];\n                    if (!isNaN(tack.Distance()))\n                        distance += tack.Distance();\n                }\n                return distance;\n            },\n            deferEvaluation: true\n        });\n        this.TopJobs = ko.computed({\n            read: function () {\n                return mapViewModel.Jobs().filter(function (j) { return j.SuperJobId() === undefined; });\n            },\n            deferEvaluation: true\n        });\n        this.IsInViewMode = ko.computed({\n            read: function () {\n                return mapViewModel.MapMode() === MapMode.View;\n            },\n            deferEvaluation: true\n        });\n        this.IsInAdminMode = ko.computed({\n            read: function () {\n                return mapViewModel.MapMode() === MapMode.Admin;\n            },\n            deferEvaluation: true\n        });\n        this.WaypointsLoaded = false;\n        this.WaypointConnectionsLoaded = false;\n        this.PersonsLoaded = false;\n        this.JobsLoaded = false;\n        this.TripsLoaded = false;\n        this.AddressesLoaded = false;\n        this.ImagesLoaded = false;\n        this.AlbumsLoaded = false;\n        this.WaypointTacksLoaded = false;\n        this.TacksLoaded = false;\n        this.LocationsLoaded = false;\n        this.AlbumImagesLoaded = false;\n        this.LogBookEntriesLoaded = false;\n        this.CrewsLoaded = false;\n        this.WifisLoaded = false;\n        this.ContentPagesLoaded = false;\n        this.Waypoints = ko.observableArray();\n        this.WaypointConnections = ko.observableArray();\n        this.Harbours = ko.observableArray();\n        this.Persons = ko.observableArray();\n        this.Jobs = ko.observableArray();\n        this.Trips = ko.observableArray();\n        this.Addresses = ko.observableArray();\n        this.Images = ko.observableArray();\n        this.Tacks = ko.observableArray();\n        this.Locations = ko.observableArray();\n        this.Supermarkets = ko.observableArray();\n        this.Restaurants = ko.observableArray();\n        this.Albums = ko.observableArray();\n        this.AlbumImages = ko.observableArray();\n        this.LogBookEntries = ko.observableArray();\n        this.Crews = ko.observableArray();\n        this.Wifis = ko.observableArray();\n        this.ContentPages = ko.observableArray();\n        this.WaypointHelper = new EditingHelper(\"editingWaypointModal\", \"deletingWaypointModal\", function () { return _this.CreateWaypoint(MarkerType.Waypoint); }, this.Waypoints);\n        this.HarbourHelper = new EditingHelper(\"editingHarbourModal\", \"deletingHarbourModal\", function () { return _this.CreateHarbour(); }, this.Harbours, rightSidebar);\n        this.PersonHelper = new EditingHelper(\"editingPersonModal\", \"deletingPersonModal\", function () { return new ClientModel.Person(); }, this.Persons);\n        this.JobHelper = new EditingHelper(\"editingJobModal\", \"deletingJobModal\", function () { return new ClientModel.Job(); }, this.Jobs);\n        this.TripHelper = new EditingHelper(\"editingTripModal\", \"deletingTripModal\", function () { return new ClientModel.Trip(); }, this.Trips);\n        this.AddressHelper = new EditingHelper(\"editingAddressModal\", \"deletingAddressModal\", function () { return new ClientModel.Address(); }, this.Addresses);\n        this.ImageHelper = new EditingHelper(\"editingImageModal\", \"deletingImageModal\", function () { return new ClientModel.Image(); }, this.Images);\n        this.TackHelper = new EditingHelper(\"editingTackModal\", \"deletingTackModal\", function () { return new ClientModel.Tack(); }, this.Tacks);\n        this.LocationHelper = new EditingHelper(\"editingLocationModal\", \"deletingLocationModal\", function () { return new ClientModel.Location(); }, this.Locations);\n        this.SupermarketHelper = new EditingHelper(\"editingSupermarketModal\", \"deletingSupermarketModal\", function () { return new ClientModel.Supermarket(); }, this.Supermarkets);\n        this.RestaurantHelper = new EditingHelper(\"editingRestaurantModal\", \"deletingRestaurantModal\", function () { return new ClientModel.Restaurant(); }, this.Restaurants);\n        this.LogBookEntryHelper = new EditingHelper(\"editingLogBookEntryModal\", \"deletingLogBookEntryModal\", function () { return new ClientModel.LogBookEntry(); }, this.LogBookEntries, \"detailedLogBookEntryModal\");\n        this.ContentPageHelper = new EditingHelper(\"editingContentPageModal\", \"deletingContentPageModal\", function () { return new ClientModel.ContentPage(); }, this.ContentPages, \"detailedContentPageModal\");\n        this.WifiHelper = new EditingHelper(\"editingWifiModal\", \"deletingWifiModal\", function () {\n            var w = new ClientModel.Wifi();\n            w.HarbourId(mapViewModel.HarbourHelper.Detail().Id());\n            return w;\n        }, this.Wifis, \"detailWifiModal\");\n        this.RemoveHarbour = function () {\n            mapViewModel.HarbourHelper.Detail().DeleteOnServer();\n        };\n        this.RemoveWaypoint = function () {\n            mapViewModel.WaypointHelper.Detail().DeleteOnServer();\n        };\n        this.MapMode = ko.observable();\n        this.RemovePolyline = function (polyline) {\n            _this.Map.removeLayer(polyline);\n            _this.DrawingPolyline = undefined;\n        };\n        this.routeFixed = false;\n        this.noRevertToPreviousBounds = false;\n        this.Polylines = new Array();\n        this.WaypointMarkers = new Array();\n        this.HarboursToSelect = ko.computed(function () {\n            return _this.Harbours().concat([{ Name: \"Neuer Hafen...\", IsDummy: true }]);\n        });\n        this.ProcessHarbourSelectOptions = function (option, item) {\n            if (item !== undefined && item !== null && item.IsDummy === true) {\n                option.value = \"filled\";\n                var context_1 = ko.contextFor(option);\n                var select = $(option).parent();\n                if (select.data(\"new-change-handler\") === undefined)\n                    select.data(\"new-change-handler\", select.change(function () {\n                        if ($(option).is(\":selected\")) {\n                            var harbour_1 = _this.CreateHarbour();\n                            _this.HarbourHelper.Editing(harbour_1);\n                            var subscription_1 = _this.HarbourHelper.Editing.subscribe(function () {\n                                if (harbour_1.Id() !== undefined) {\n                                    _this.Harbours.push(harbour_1);\n                                    context_1.$data.Harbour(harbour_1);\n                                }\n                                else {\n                                    harbour_1.RemoveFromMap();\n                                    context_1.$data.Harbour(undefined);\n                                }\n                                subscription_1.dispose();\n                            });\n                        }\n                    }));\n            }\n        };\n        this.PersonsToSelect = ko.computed(function () {\n            return _this.Persons().concat([{ FullName: \"Neue Person...\", IsDummy: true }]);\n        });\n        this.ProcessPersonSelectOptions = function (option, item) {\n            if (item !== undefined && item !== null && item.IsDummy === true) {\n                option.value = \"filled\";\n                var context_2 = ko.contextFor(option);\n                var select = $(option).parent();\n                if (select.data(\"new-change-handler\") === undefined)\n                    select.data(\"new-change-handler\", select.change(function () {\n                        if ($(option).is(\":selected\")) {\n                            var person_1 = new Person();\n                            _this.PersonHelper.Editing(person_1);\n                            var subscription_2 = _this.PersonHelper.Editing.subscribe(function () {\n                                if (person_1.Id() !== undefined) {\n                                    _this.Persons.push(person_1);\n                                    context_2.$data.Person(person_1);\n                                }\n                                else {\n                                    context_2.$data.Person(undefined);\n                                }\n                                subscription_2.dispose();\n                            });\n                        }\n                    }));\n            }\n        };\n        this.AlbumStack = ko.observableArray();\n        L.mapbox\n            .accessToken =\n            \"pk.eyJ1IjoiZGFuaWVsLWt1b24iLCJhIjoiY2lldnVtY29iMDBiOHQxbTBvZzBqZWl6cCJ9.UEc2YqH59pB1YTpv22vg8A\";\n        this.MapMode(mapMode);\n        this.MapMode.subscribe(function () {\n            _this.InitializeMap();\n        });\n        var mapOptions = {\n            contextmenu: mapMode === MapMode.Admin,\n            contextmenuItems: [\n                {\n                    text: \"Neuer Hafen\",\n                    callback: function (e) {\n                        console.log(e);\n                        mapViewModel.HarbourHelper.Editing(mapViewModel.CreateHarbour(\"\", e.latlng));\n                    }\n                }\n            ]\n        };\n        this.Map = L.mapbox.map(\"map\", \"mapbox.streets\", mapOptions);\n        this.Map.setView([54.40774166820069, 10.523529052734373], 9);\n        L.tileLayer(\"http://t1.openseamap.org/seamark/{z}/{x}/{y}.png\").addTo(this.Map);\n        this.LoadData();\n        $.get(\"/Account/LoggedIn\").done(function (data) { return _this.IsLoggedIn(data); });\n        this.ContentPages.subscribe(function (data) {\n            var nav = $(\"#leftNav\");\n            $(\".contentPageLink\", nav).remove();\n            var _loop_1 = function(cP) {\n                $(\"<li role=\\\"presentation\\\" class=\\\"contentPageLink\\\"><a href=\\\"#\\\">\" + cP.Title() + \"</a></li>\").click(function () {\n                    mapViewModel.ContentPageHelper.Detail(cP);\n                    return false;\n                }).appendTo(nav);\n            };\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                var cP = data_1[_i];\n                _loop_1(cP);\n            }\n        });\n        this.HarbourHelper.Detail.subscribe(function (newHarbour) {\n            if (newHarbour !== undefined) {\n                mapViewModel.CalculateDistances(newHarbour);\n                mapViewModel.Harbours.sort(function (h1, h2) { return h1.Distance() - h2.Distance(); });\n            }\n            else {\n                for (var _i = 0, _a = mapViewModel.Harbours(); _i < _a.length; _i++) {\n                    var h = _a[_i];\n                    h.Distance(0);\n                }\n            }\n            mapViewModel.routeFixed = false;\n            mapViewModel.HideRoute();\n        });\n        this.HarbourHelper.Editing.subscribe(function (harbour) {\n            if (harbour !== undefined && harbour.Id() === undefined)\n                mapViewModel.Map.removeLayer(harbour.marker);\n        }, this, \"beforeChange\");\n        this.Map.addEventListener(\"mousemove\", function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                _this.DrawingLatLng.lat = e.latlng.lat;\n                _this.DrawingLatLng.lng = e.latlng.lng;\n                _this.DrawingPolyline.redraw();\n            }\n            if (_this.MapMode() === MapMode.Admin)\n                for (var _i = 0, _a = _this.WaypointMarkers; _i < _a.length; _i++) {\n                    var marker = _a[_i];\n                    if (marker.Point.distanceTo(e.containerPoint) < 150)\n                        marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 1);\n                    else\n                        marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 0.8);\n                }\n            if (mapViewModel.HoveredPolyine !== undefined && mapViewModel.HoveredPolyine.DummyHandle !== undefined) {\n                var polyline = mapViewModel.HoveredPolyine;\n                var p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\n                var p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\n                if (p1.distanceTo(e.containerPoint) < 20 || p2.distanceTo(e.containerPoint) < 20) {\n                    mapViewModel.HoveredPolyine = undefined;\n                }\n                else {\n                    mapViewModel.HoveredPolyine.DummyHandle.marker.setOpacity(0.8);\n                    mapViewModel.HoveredPolyine.DummyHandle\n                        .SetLatLng(mapViewModel.Map\n                        .containerPointToLatLng(L.LineUtil\n                        .closestPointOnSegment(e.containerPoint, p1, p2)), false);\n                }\n            }\n        });\n        this.Map.addEventListener(\"click\", function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                var waypoint = mapViewModel.CreateWaypoint(e.latlng, MarkerType.Waypoint);\n                var startId_1 = _this.DrawingPolyline.Waypoints[0].Id();\n                waypoint.SaveToServer()\n                    .done(function (w) {\n                    ServerApi.WaypointConnections\n                        .Connect(w.Id, startId_1);\n                });\n                waypoint.AddToPolyline(_this.DrawingPolyline);\n                addDummyHandle(_this.DrawingPolyline);\n                removeFromPolyline(_this.DrawingPolyline, _this.DrawingLatLng);\n                _this.DrawingPolyline = _this.AddPolyline(waypoint);\n                _this.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\n                _this.DrawingPolyline.addLatLng(_this.DrawingLatLng);\n            }\n        });\n        this.Map.addEventListener(\"dblclick\", function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                e.originalEvent.cancelBubble = true;\n                e.originalEvent.preventDefault();\n                e.originalEvent.stopPropagation();\n                _this.DrawingPolyline.addLatLng(e.latlng);\n                _this.DrawingLatLng = e.latlng;\n            }\n        });\n        $(document)\n            .keyup(function (e) {\n            if (_this.GetMapMode() === MapMode.RouteDrawing) {\n                if (e.keyCode === 27) {\n                    _this.RemovePolyline(_this.DrawingPolyline);\n                }\n            }\n        });\n        this.Map.addEventListener(\"move\", function (e) {\n            for (var _i = 0, _a = _this.WaypointMarkers; _i < _a.length; _i++) {\n                var marker = _a[_i];\n                marker.Point = _this.Map.latLngToContainerPoint(marker.getLatLng());\n            }\n        });\n        this.Map.addEventListener(\"zoom\", function (e) {\n            for (var _i = 0, _a = _this.WaypointMarkers; _i < _a.length; _i++) {\n                var marker = _a[_i];\n                marker.Point = _this.Map.latLngToContainerPoint(marker.getLatLng());\n            }\n        });\n    }\n    MapViewModel.prototype.StartRoute = function () {\n        var trip = new ClientModel.Trip();\n        var tack = new ClientModel.Tack();\n        var harbour = mapViewModel.HarbourHelper.Detail();\n        tack.Start(harbour);\n        trip.Tacks.push(tack);\n        mapViewModel.TripHelper.Editing(trip);\n        mapViewModel.routePolyline(L.polyline([], {\n            color: \"#009900\"\n        }));\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\n    };\n    MapViewModel.prototype.AddToRoute = function () {\n        var trip = mapViewModel.TripHelper.Editing();\n        var targetHarbour = mapViewModel.HarbourHelper.Editing();\n        var tack = new ClientModel.Tack();\n        var lastTack = trip.Tacks()[trip.Tacks().length - 1];\n        var startHarbour = lastTack.Start();\n        mapViewModel.CalculateDistances(targetHarbour, startHarbour);\n        lastTack.Distance(startHarbour.RouteDistance());\n        var wp = startHarbour;\n        mapViewModel.routePolyline().addLatLng(wp.LatLng);\n        while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\n            wp = wp.RoutePrecessor();\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\n        }\n        lastTack.End(targetHarbour);\n        tack.Start(targetHarbour);\n        trip.Tacks.push(tack);\n    };\n    MapViewModel.prototype.RedrawTrip = function () {\n        mapViewModel.Map.removeLayer(mapViewModel.routePolyline());\n        mapViewModel.routePolyline(L.polyline([], {\n            color: \"#009900\"\n        }));\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\n        for (var _i = 0, _a = mapViewModel.TripHelper.Editing().Tacks(); _i < _a.length; _i++) {\n            var tack = _a[_i];\n            var targetHarbour = tack.End();\n            var startHarbour = tack.Start();\n            if (targetHarbour === undefined)\n                continue;\n            mapViewModel.CalculateDistances(targetHarbour, startHarbour);\n            tack.Distance(startHarbour.RouteDistance());\n            var wp = startHarbour;\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\n            while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\n                wp = wp.RoutePrecessor();\n                mapViewModel.routePolyline().addLatLng(wp.LatLng);\n            }\n        }\n    };\n    MapViewModel.prototype.PullTack = function () {\n        var tack = this;\n        var tacks = mapViewModel.TripHelper.Editing().Tacks;\n        var index = tacks.indexOf(tack);\n        var prevTack = tacks()[index - 1];\n        var tmpEnd = tack.End();\n        tack.End(prevTack.Start());\n        prevTack.End(tmpEnd);\n        if (index > 1) {\n            tacks()[index - 2].End(tack.Start());\n        }\n        tacks.splice(index - 1, 2, tack, prevTack);\n        mapViewModel.RedrawTrip();\n    };\n    MapViewModel.prototype.PushTack = function () {\n        var tack = this;\n        var tacks = mapViewModel.TripHelper.Editing().Tacks;\n        var index = tacks.indexOf(tack);\n        var nextTack = tacks()[index + 1];\n        tack.End(nextTack.End());\n        nextTack.End(tack.Start());\n        if (index > 0) {\n            tacks()[index - 1].End(nextTack.Start());\n        }\n        tacks.splice(index, 2, nextTack, tack);\n        mapViewModel.RedrawTrip();\n    };\n    MapViewModel.prototype.RemoveTack = function () {\n        var tack = this;\n        var tacks = mapViewModel.TripHelper.Editing().Tacks;\n        var index = tacks.indexOf(tack);\n        var prevTack = tacks()[index - 1];\n        if (prevTack !== undefined)\n            prevTack.End(tack.End());\n        tacks.remove(tack);\n        mapViewModel.RedrawTrip();\n    };\n    MapViewModel.prototype.LoadData = function () {\n        var _this = this;\n        ServerApi.Waypoints\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_1 = d; _i < d_1.length; _i++) {\n                var sEntity = d_1[_i];\n                if (sEntity.Type === \"Waypoint\")\n                    _this.Waypoints.push(mapViewModel\n                        .CreateWaypoint(MarkerType.Waypoint)\n                        .LoadFromServerEntity(sEntity));\n                else if (sEntity.Type === \"Harbour\") {\n                    var harbour = mapViewModel\n                        .CreateHarbour()\n                        .LoadFromServerEntity(sEntity);\n                    _this.Harbours.push(harbour);\n                }\n            }\n            _this.WaypointsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.WaypointConnections\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_2 = d; _i < d_2.length; _i++) {\n                var sEntity = d_2[_i];\n                _this.WaypointConnections.push(sEntity);\n            }\n            _this.WaypointConnectionsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Persons\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_3 = d; _i < d_3.length; _i++) {\n                var sEntity = d_3[_i];\n                _this.Persons.push(new ClientModel.Person().LoadFromServerEntity(sEntity));\n            }\n            _this.PersonsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Jobs\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_4 = d; _i < d_4.length; _i++) {\n                var sEntity = d_4[_i];\n                _this.Jobs.push(new ClientModel.Job().LoadFromServerEntity(sEntity));\n            }\n            _this.JobsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Trips\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_5 = d; _i < d_5.length; _i++) {\n                var sEntity = d_5[_i];\n                _this.Trips.push(new ClientModel.Trip().LoadFromServerEntity(sEntity));\n            }\n            _this.TripsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Addresses\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_6 = d; _i < d_6.length; _i++) {\n                var sEntity = d_6[_i];\n                _this.Addresses.push(new ClientModel.Address().LoadFromServerEntity(sEntity));\n            }\n            _this.AddressesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Images\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_7 = d; _i < d_7.length; _i++) {\n                var sEntity = d_7[_i];\n                _this.Images.push(new ClientModel.Image().LoadFromServerEntity(sEntity));\n            }\n            _this.ImagesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Albums\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_8 = d; _i < d_8.length; _i++) {\n                var sEntity = d_8[_i];\n                _this.Albums.push(new ClientModel.Album().LoadFromServerEntity(sEntity));\n            }\n            _this.AlbumsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.LogBookEntries\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_9 = d; _i < d_9.length; _i++) {\n                var sEntity = d_9[_i];\n                _this.LogBookEntries.push(new ClientModel.LogBookEntry().LoadFromServerEntity(sEntity));\n            }\n            _this.LogBookEntriesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.AlbumImages.Get()\n            .done(function (d) {\n            for (var _i = 0, d_10 = d; _i < d_10.length; _i++) {\n                var ai = d_10[_i];\n                _this.AlbumImages.push(ai);\n            }\n            _this.AlbumImagesLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Crews.Get()\n            .done(function (d) {\n            for (var _i = 0, d_11 = d; _i < d_11.length; _i++) {\n                var c = d_11[_i];\n                _this.Crews.push(c);\n            }\n            _this.CrewsLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.Wifis.Get()\n            .done(function (d) {\n            for (var _i = 0, d_12 = d; _i < d_12.length; _i++) {\n                var c = d_12[_i];\n                _this.Wifis.push(new ClientModel.Wifi().LoadFromServerEntity(c));\n            }\n            _this.WifisLoaded = true;\n            _this.InitializeModel();\n        });\n        ServerApi.ContentPages.Get()\n            .done(function (d) {\n            for (var _i = 0, d_13 = d; _i < d_13.length; _i++) {\n                var c = d_13[_i];\n                _this.ContentPages.push(new ClientModel.ContentPage().LoadFromServerEntity(c));\n            }\n            _this.ContentPagesLoaded = true;\n            _this.InitializeModel();\n        });\n        //ServerApi.WaypointTacks.Get().done(d => {\n        //    for (let sEntity of d) { this.WaypointTacks.push(new ClientModel.WaypointTack().LoadFromServerEntity(sEntity)); }\n        //    this.WaypointTacksLoaded = true;\n        //    this.InitialozeModel();\n        //});\n        ServerApi.Tacks\n            .Get()\n            .done(function (d) {\n            for (var _i = 0, d_14 = d; _i < d_14.length; _i++) {\n                var sEntity = d_14[_i];\n                _this.Tacks.push(new ClientModel.Tack().LoadFromServerEntity(sEntity));\n            }\n            _this.TacksLoaded = true;\n            _this.InitializeModel();\n        });\n        //ServerApi.Locations\n        //    .Get()\n        //    .done(d => {\n        //        for (let sEntity of d) {\n        //            if (sEntity.Type === \"Location\")\n        //                this.Locations.push(new ClientModel.Location().LoadFromServerEntity(sEntity));\n        //            else if (sEntity.Type === \"Restaurant\")\n        //                this.Restaurants.push(new ClientModel.Restaurant().LoadFromServerEntity(sEntity));\n        //            else if (sEntity.Type === \"Supermarket\")\n        //                this.Supermarkets.push(new ClientModel.Supermarket().LoadFromServerEntity(sEntity));\n        //        }\n        this.LocationsLoaded = true;\n        //        this.InitializeModel();\n        //    });\n    };\n    MapViewModel.prototype.InitializeModel = function () {\n        if (this.WaypointsLoaded &&\n            this.WaypointConnectionsLoaded &&\n            this.PersonsLoaded &&\n            this.JobsLoaded &&\n            this.TripsLoaded &&\n            this.AddressesLoaded &&\n            this.ImagesLoaded &&\n            this.AlbumsLoaded &&\n            //this.WaypointTacksLoaded &&\n            this.TacksLoaded &&\n            this.LocationsLoaded &&\n            this.CrewsLoaded &&\n            this.LogBookEntriesLoaded &&\n            this.AlbumImagesLoaded &&\n            this.WifisLoaded &&\n            this.ContentPagesLoaded) {\n            for (var _i = 0, _a = this.Jobs(); _i < _a.length; _i++) {\n                var entity = _a[_i];\n                if (entity.AssignedToId() !== undefined)\n                    entity.AssignedTo(this.GetPersonById(entity.AssignedToId()));\n                if (entity.TripId() !== undefined)\n                    entity.Trip(this.GetTripById(entity.TripId()));\n                if (entity.SuperJobId() !== undefined) {\n                    entity.SuperJob(this.GetJobById(entity.SuperJobId()));\n                    entity.SuperJob().SubJobs.push(entity);\n                }\n            }\n            for (var _b = 0, _c = this.Harbours(); _b < _c.length; _b++) {\n                var entity = _c[_b];\n                entity.Album(this.GetAlbumById(entity.AlbumId()));\n            }\n            for (var _e = 0, _f = this.Locations(); _e < _f.length; _e++) {\n                var entity = _f[_e];\n                entity.Address(this.GetAddressById(entity.AddressId()));\n                this.GetHarbourById(entity.HarbourId()).Locations.push(entity);\n            }\n            for (var _g = 0, _h = this.AlbumImages(); _g < _h.length; _g++) {\n                var entity = _h[_g];\n                this.GetAlbumById(entity.AlbumId).Images.push(this.GetImageById(entity.ImageId));\n            }\n            for (var _j = 0, _k = mapViewModel.WaypointConnections(); _j < _k.length; _j++) {\n                var connection = _k[_j];\n                var polyline = mapViewModel.AddPolyline([\n                    mapViewModel.GetWayPointById(connection.Waypoint1Id), mapViewModel\n                        .GetWayPointById(connection.Waypoint2Id)\n                ]);\n                addDummyHandle(polyline);\n            }\n            for (var _l = 0, _m = mapViewModel.LogBookEntries(); _l < _m.length; _l++) {\n                var entry = _m[_l];\n                entry.Start(mapViewModel.GetHarbourById(entry.StartId()));\n                entry.End(mapViewModel.GetHarbourById(entry.EndId()));\n                entry.Album(mapViewModel.GetAlbumById(entry.AlbumId()));\n            }\n            for (var _o = 0, _p = mapViewModel.Crews(); _o < _p.length; _o++) {\n                var crew = _p[_o];\n                var lBE = mapViewModel.GetLogBookEntryById(crew.TackId);\n                var tack = mapViewModel.GetTackById(crew.TackId);\n                var trip = mapViewModel.GetTripById(crew.TackId);\n                var p = mapViewModel.GetPersonById(crew.PersonId);\n                if (lBE !== undefined)\n                    lBE.Persons.push(p);\n                else if (tack !== undefined)\n                    tack.Persons.push(p);\n                else if (trip !== undefined)\n                    trip.Persons.push(p);\n            }\n            for (var _q = 0, _r = mapViewModel.Wifis(); _q < _r.length; _q++) {\n                var wifi = _r[_q];\n                var h = mapViewModel.GetHarbourById(wifi.HarbourId());\n                h.Wifis.push(wifi);\n                wifi.Harbour(h);\n            }\n            ko.applyBindings(mapViewModel);\n            $(\"#loadingOverlay\").remove();\n        }\n    };\n    MapViewModel.prototype.InitializeMap = function () {\n        mapViewModel.HarbourHelper.Detail(undefined);\n        for (var _i = 0, _a = mapViewModel.Waypoints(); _i < _a.length; _i++) {\n            var wp = _a[_i];\n            if (wp.marker !== undefined)\n                mapViewModel.Map.removeLayer(wp.marker);\n            mapViewModel.CreateMarker(MarkerType.Waypoint, wp);\n        }\n        for (var _b = 0, _c = mapViewModel.Harbours(); _b < _c.length; _b++) {\n            var h = _c[_b];\n            if (h.marker !== undefined)\n                mapViewModel.Map.removeLayer(h.marker);\n            mapViewModel.CreateMarker(MarkerType.Harbour, h);\n        }\n        for (var _e = 0, _f = mapViewModel.Polylines; _e < _f.length; _e++) {\n            var p = _f[_e];\n            if (p.DummyHandle.marker !== undefined)\n                mapViewModel.Map.removeLayer(p.DummyHandle.marker);\n            mapViewModel.CreateMarker(MarkerType.Dummy, p.DummyHandle);\n        }\n        if (mapViewModel.MapMode() === MapMode.Admin) {\n            for (var _g = 0, _h = mapViewModel.Polylines; _g < _h.length; _g++) {\n                var p = _h[_g];\n                p.addTo(mapViewModel.Map);\n            }\n            mapViewModel.Map.contextmenu.enable();\n        }\n        else {\n            for (var _j = 0, _k = mapViewModel.Polylines; _j < _k.length; _j++) {\n                var p = _k[_j];\n                mapViewModel.Map.removeLayer(p);\n            }\n            mapViewModel.Map.contextmenu.disable();\n        }\n    };\n    MapViewModel.prototype.GetWaypointById = function (id) {\n        for (var _i = 0, _a = this.Waypoints(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        for (var _b = 0, _c = this.Harbours(); _b < _c.length; _b++) {\n            var entity = _c[_b];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Waypoint with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetHarbourById = function (id) {\n        for (var _i = 0, _a = this.Harbours(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Harbour with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetPersonById = function (id) {\n        for (var _i = 0, _a = this.Persons(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Person with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetJobById = function (id) {\n        for (var _i = 0, _a = this.Jobs(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Job with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetTripById = function (id) {\n        for (var _i = 0, _a = this.Trips(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Trip with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetAddressById = function (id) {\n        for (var _i = 0, _a = this.Addresses(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Address with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetImageById = function (id) {\n        for (var _i = 0, _a = this.Images(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Image with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetTackById = function (id) {\n        for (var _i = 0, _a = this.Tacks(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Tack with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetLogBookEntryById = function (id) {\n        for (var _i = 0, _a = this.LogBookEntries(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Tack with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetAlbumById = function (id) {\n        for (var _i = 0, _a = this.Albums(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Tack with id \" + id + \" found\";\n        return undefined;\n    };\n    MapViewModel.prototype.GetLocationById = function (id) {\n        for (var _i = 0, _a = this.Locations(); _i < _a.length; _i++) {\n            var entity = _a[_i];\n            if (entity.Id() === id)\n                return entity;\n        }\n        for (var _b = 0, _c = this.Restaurants(); _b < _c.length; _b++) {\n            var entity = _c[_b];\n            if (entity.Id() === id)\n                return entity;\n        }\n        for (var _e = 0, _f = this.Restaurants(); _e < _f.length; _e++) {\n            var entity = _f[_e];\n            if (entity.Id() === id)\n                return entity;\n        }\n        //throw \"No Location with id \" + id + \" found\";\n        return undefined;\n    };\n    //SortedLogBookEntries = ko.computed({\n    //    read: () => this.LogBookEntries.sort((l1, l2) => {\n    //        var t1 = l1.StartDate().getTime();\n    //        var t2 = l2.StartDate().getTime();\n    //        return t2 - t1;\n    //    }),\n    //    deferEvaluation: true\n    //});\n    MapViewModel.prototype.InitGallery = function (item, event) {\n        var items = new Array();\n        var albumElem = event.target.parentElement;\n        var currImage = this;\n        for (var _i = 0, _a = mapViewModel.AlbumStack()[0].Images(); _i < _a.length; _i++) {\n            var data = _a[_i];\n            items.push({\n                h: data.Height(),\n                w: data.Width(),\n                src: data.Path()\n            });\n        }\n        gallery = new PhotoSwipe(pswp, PhotoSwipeUI_Default, items, {\n            index: mapViewModel.AlbumStack()[0].Images.indexOf(currImage),\n            getThumbBoundsFn: function (index) {\n                var elem = $(\"img\", albumElem)[index];\n                var padding = parseFloat(window.getComputedStyle(elem, null)\n                    .getPropertyValue(\"padding-left\")\n                    .replace(\"px\", \"\"));\n                elem.scrollIntoView(false);\n                var bounds = elem.getBoundingClientRect();\n                return {\n                    x: bounds.left + padding,\n                    y: bounds.top + window.screenY + padding,\n                    w: bounds.width - (2 * padding)\n                };\n            }\n        });\n        gallery.init();\n    };\n    MapViewModel.prototype.AddHarbour = function () {\n        var harbour = mapViewModel.CreateHarbour(\"Hafen \" + this.Harbours.length, this.Map.getCenter());\n        mapViewModel.Harbours.push(harbour);\n        harbour.SaveToServer();\n    };\n    MapViewModel.prototype.AddPolyline = function (arg) {\n        //var options = {\n        //    contextmenu: true,\n        //    contextmenuInheritItems: false,\n        //    contextmenuItems: [\n        //        {\n        //            text: \"FFFFFFFFFFFFFFFFFF\",\n        //            callback: function() { console.log(this);\n        //                console.log(arguments);mapViewModel.HarbourHelper.Editing(this) }\n        //        },\n        //        {\n        //            text: \"Löschen\",\n        //            callback: function() { mapViewModel.HarbourHelper.Deleting(this) }\n        //        }\n        //    ]\n        //};\n        var polyline = new L.Polyline([]);\n        //polyline.bindContextMenu(options);\n        mapViewModel.Polylines.push(polyline);\n        polyline.addEventListener(\"click\", function (e) {\n            var p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\n            var p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\n            polyline.DummyHandle\n                .SetLatLng(mapViewModel.Map\n                .containerPointToLatLng(L.LineUtil\n                .closestPointOnSegment(e.containerPoint, p1, p2)), false);\n            mapViewModel.Waypoints.push(polyline.DummyHandle);\n            polyline.DummyHandle.convertFromDummyHandle();\n        });\n        if (mapViewModel.MapMode() === MapMode.Admin)\n            polyline.addTo(this.Map);\n        polyline.Waypoints = new Array();\n        if (arg !== undefined)\n            if (arg instanceof Waypoint)\n                arg.AddToPolyline(polyline);\n            else\n                for (var _i = 0, _a = arg; _i < _a.length; _i++) {\n                    var waypoint = _a[_i];\n                    waypoint.AddToPolyline(polyline);\n                }\n        polyline.addEventListener(\"mouseover\", function () {\n            mapViewModel.HoveredPolyine = polyline;\n        });\n        return polyline;\n    };\n    MapViewModel.prototype.GetMapMode = function () {\n        if (this.DrawingPolyline !== undefined && this.DrawingLatLng !== undefined)\n            return MapMode.RouteDrawing;\n        return this.MapMode();\n    };\n    MapViewModel.prototype.GetWayPointById = function (id) {\n        for (var _i = 0, _a = this.Waypoints(); _i < _a.length; _i++) {\n            var waypoint = _a[_i];\n            if (waypoint.Id() === id)\n                return waypoint;\n        }\n        for (var _b = 0, _c = this.Harbours(); _b < _c.length; _b++) {\n            var waypoint = _c[_b];\n            if (waypoint.Id() === id)\n                return waypoint;\n        }\n        throw \"No Waypoint with id \" + id + \" in model\";\n    };\n    MapViewModel.prototype.CalculateDistances = function (start, target) {\n        if (start === void 0) { start = mapViewModel.HarbourHelper.Detail(); }\n        var waypoints = [start];\n        var calculating = new Array();\n        var calculated = new Array();\n        var calculateRoute = target !== undefined;\n        calculating.push(new WaypointDistance(undefined, start, 0, waypoints, calculateRoute));\n        //for (let waypoint of mapViewModel.Waypoints()) {\n        //    waypoints.push(new WaypointDistance(null, waypoint, Number.POSITIVE_INFINITY));\n        //}\n        //for (let harbour of mapViewModel.Harbours()) {\n        //    if (harbour !== start) {\n        //        waypoints.push(new WaypointDistance(null, harbour, Number.POSITIVE_INFINITY));\n        //    }\n        //}\n        if (calculateRoute) {\n            for (var _i = 0, _a = mapViewModel.Waypoints(); _i < _a.length; _i++) {\n                var wp = _a[_i];\n                wp.RoutePrecessor(undefined);\n            }\n            for (var _b = 0, _c = mapViewModel.Harbours(); _b < _c.length; _b++) {\n                var h = _c[_b];\n                h.RoutePrecessor(undefined);\n            }\n        }\n        else {\n            for (var _e = 0, _f = mapViewModel.Waypoints(); _e < _f.length; _e++) {\n                var wp = _f[_e];\n                wp.Precessor(undefined);\n            }\n            for (var _g = 0, _h = mapViewModel.Harbours(); _g < _h.length; _g++) {\n                var h = _h[_g];\n                h.Precessor(undefined);\n            }\n        }\n        while (calculating.length > 0) {\n            var minimalDist = Number.POSITIVE_INFINITY;\n            var minimalWp = void 0;\n            for (var _j = 0, calculating_1 = calculating; _j < calculating_1.length; _j++) {\n                var wp = calculating_1[_j];\n                for (var _k = 0, _l = wp.ConnectedWayPoints; _k < _l.length; _k++) {\n                    var cWp = _l[_k];\n                    if ((calculateRoute ? cWp.RoutePrecessor() : cWp.Precessor()) !== undefined)\n                        removeFromArray(wp.ConnectedWayPoints, cWp);\n                }\n                if (wp.ConnectedWayPoints.length === 0) {\n                    removeFromArray(calculating, wp);\n                    calculated.push(wp);\n                }\n                else {\n                    var dist = wp.Distance + wp.ConnectedWayPoints[0].LatLng.distanceTo(wp.LatLng) / 1.852;\n                    if (dist < minimalDist) {\n                        minimalDist = dist;\n                        minimalWp = wp;\n                    }\n                }\n            }\n            if (minimalWp !== undefined) {\n                calculating.push(new WaypointDistance(minimalWp.Waypoint, minimalWp.ConnectedWayPoints.shift(), minimalDist, waypoints, calculateRoute));\n            }\n        }\n        if (calculateRoute)\n            for (var _m = 0, calculated_1 = calculated; _m < calculated_1.length; _m++) {\n                var wp = calculated_1[_m];\n                wp.Waypoint.RouteDistance(Math.round(wp.Distance / 100) / 10);\n            }\n        else\n            for (var _o = 0, calculated_2 = calculated; _o < calculated_2.length; _o++) {\n                var wp = calculated_2[_o];\n                wp.Waypoint.Distance(Math.round(wp.Distance / 100) / 10);\n            }\n    };\n    MapViewModel.prototype.ShowRoute = function (h) {\n        if (mapViewModel.highlightedRoute !== undefined) {\n            mapViewModel.routeFixed = false;\n            mapViewModel.HideRoute();\n        }\n        if (h === undefined)\n            h = this;\n        if (!(h instanceof ClientModel.Harbour))\n            return;\n        var latLngs = [h.LatLng];\n        var dist = h.Distance();\n        if (dist === undefined || dist === null)\n            dist = 0;\n        while (h.Precessor() !== undefined) {\n            h = h.Precessor();\n            latLngs.push(h.LatLng);\n        }\n        mapViewModel.highlightedRoute = L.polyline(latLngs);\n        mapViewModel.highlightedRoute.addTo(mapViewModel.Map);\n        mapViewModel.highlightedRoute.bindLabel(dist.toString() + \" sm\", { noHide: true });\n        mapViewModel.FitBounds(mapViewModel.highlightedRoute.getBounds());\n    };\n    MapViewModel.prototype.FitBounds = function (bounds) {\n        var map = mapViewModel.Map;\n        var currentBounds = map.getBounds();\n        if (!currentBounds.contains(bounds)) {\n            if (mapViewModel.previousBounds === undefined)\n                mapViewModel.previousBounds = currentBounds;\n            map.fitBounds(bounds);\n        }\n    };\n    MapViewModel.prototype.HideRoute = function (force) {\n        if (force === void 0) { force = false; }\n        if ((!mapViewModel.routeFixed || force) && mapViewModel.highlightedRoute !== undefined) {\n            mapViewModel.routeFixed = false;\n            mapViewModel.Map.removeLayer(mapViewModel.highlightedRoute);\n            mapViewModel.highlightedRoute = undefined;\n            if (!mapViewModel.noRevertToPreviousBounds && mapViewModel.previousBounds !== undefined) {\n                var tmpBounds_1 = mapViewModel.previousBounds;\n                mapViewModel.previousBounds = undefined;\n                window.setTimeout(function () {\n                    if (mapViewModel.previousBounds === undefined)\n                        mapViewModel.Map.fitBounds(tmpBounds_1);\n                    else\n                        mapViewModel.previousBounds = tmpBounds_1;\n                }, 100);\n            }\n        }\n    };\n    MapViewModel.prototype.FixRoute = function () {\n        mapViewModel.routeFixed = true;\n        mapViewModel.previousBounds = undefined;\n    };\n    MapViewModel.prototype.CreateWaypoint = function (latLng, markerType) {\n        var wp;\n        if (markerType !== undefined)\n            wp = new Waypoint(latLng, markerType, mapViewModel.Map);\n        else\n            wp = new Waypoint(markerType, mapViewModel.Map);\n        this.InitializeWaypoint(wp, markerType);\n        return wp;\n    };\n    MapViewModel.prototype.InitializeWaypoint = function (wp, markerType) {\n        this.CreateMarker(markerType, wp);\n    };\n    MapViewModel.prototype.CreateMarker = function (markerType, wp) {\n        if (mapViewModel.MapMode() === MapMode.Admin || markerType === MarkerType.Harbour) {\n            var options = {\n                draggable: (mapViewModel.MapMode() === MapMode.Admin)\n            };\n            if (markerType === MarkerType.Dummy) {\n                options.opacity = 0;\n            }\n            if (mapViewModel.MapMode() === MapMode.Admin &&\n                (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy)) {\n                options.icon = new L.Icon({\n                    iconUrl: \"/images/waypointhandle.png\",\n                    iconSize: new L.Point(10, 10, true),\n                    className: \"waypoint\"\n                });\n            }\n            if (mapViewModel.MapMode() === MapMode.Admin) {\n                options.contextmenu = true;\n                options.contextmenuInheritItems = false;\n                // ReSharper disable SuspiciousThisUsage\n                if (markerType === MarkerType.Harbour) {\n                    options.contextmenuItems = [\n                        {\n                            text: \"Bearbeiten\",\n                            context: wp,\n                            callback: function () { mapViewModel.HarbourHelper.Editing(this); }\n                        },\n                        {\n                            text: \"Löschen\",\n                            context: wp,\n                            callback: function () { mapViewModel.HarbourHelper.Deleting(this); }\n                        }\n                    ];\n                }\n                else {\n                    options.contextmenuItems = [\n                        {\n                            text: \"Bearbeiten\",\n                            context: wp,\n                            callback: function () { mapViewModel.WaypointHelper.Editing(this); }\n                        },\n                        {\n                            text: \"Löschen\",\n                            context: wp,\n                            callback: function () { mapViewModel.WaypointHelper.Deleting(this); }\n                        }\n                    ];\n                }\n            }\n            var marker = new L.Marker(wp.LatLng, options);\n            marker.addTo(this.Map);\n            marker.Waypoint = wp;\n            wp.marker = marker;\n            if (mapViewModel.MapMode() === MapMode.Admin) {\n                if (markerType === MarkerType.Dummy)\n                    marker.addEventListener(\"mouseout\", function (e) {\n                        if (e.target.Waypoint.IsDummy())\n                            mapViewModel.HoveredPolyine = undefined;\n                    });\n                marker.addEventListener(\"drag\", function () { wp.SetLatLng(wp.marker.getLatLng()); });\n                if (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy) {\n                    this.WaypointMarkers.push(wp.marker);\n                    wp.marker.Point = mapViewModel.Map.latLngToContainerPoint(wp.LatLng);\n                }\n                wp.marker.addEventListener(\"click\", function () {\n                    if (wp.IsDummy()) {\n                        mapViewModel.HoveredPolyine = undefined;\n                        wp.convertFromDummyHandle();\n                        mapViewModel.Waypoints.push(wp);\n                    }\n                    if (mapViewModel.GetMapMode() === MapMode.RouteDrawing) {\n                        if (!wp.IsInPolyline(mapViewModel.DrawingPolyline)) {\n                            ServerApi.WaypointConnections\n                                .Connect(wp.Id(), mapViewModel.DrawingPolyline.Waypoints[0].Id());\n                            wp.AddToPolyline(mapViewModel.DrawingPolyline);\n                            removeFromPolyline(mapViewModel.DrawingPolyline, mapViewModel.DrawingLatLng);\n                            addDummyHandle(mapViewModel.DrawingPolyline);\n                            mapViewModel.DrawingPolyline = undefined;\n                            mapViewModel.DrawingLatLng = undefined;\n                        }\n                        else {\n                            removePolyline(mapViewModel.DrawingPolyline);\n                            mapViewModel.DrawingPolyline = undefined;\n                            mapViewModel.DrawingLatLng = undefined;\n                        }\n                    }\n                });\n                wp.marker.addEventListener(\"dblclick\", function (e) {\n                    mapViewModel.DrawingPolyline = mapViewModel.AddPolyline(wp);\n                    mapViewModel.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\n                    mapViewModel.DrawingPolyline.addLatLng(mapViewModel.DrawingLatLng);\n                });\n                if (markerType === MarkerType.Dummy)\n                    wp.marker.addOneTimeEventListener(\"drag\", function () {\n                        wp.convertFromDummyHandle();\n                        mapViewModel.Waypoints.push(wp);\n                    });\n                //else if (markerType === MarkerType.Waypoint) {\n                //    wp.Name(`Wegpunkt ${mapViewModel.Waypoints().length + 1}`);\n                //}\n                wp.marker.addEventListener(\"dragend\", function () { wp.SaveToServer(); });\n            }\n            else if (markerType === MarkerType.Harbour) {\n                wp.marker.addEventListener(\"mouseover\", function () {\n                    if (mapViewModel.HarbourHelper.Detail() !== undefined)\n                        mapViewModel.ShowRoute(wp);\n                });\n                wp.marker.addEventListener(\"click\", function () { return mapViewModel.HarbourHelper.Detail(wp); });\n            }\n        }\n    };\n    MapViewModel.prototype.CreateHarbour = function (name, latLng) {\n        var h;\n        if (latLng !== undefined)\n            h = new Harbour(latLng, this.Map);\n        else\n            h = new Harbour(this.Map);\n        h.Name(name);\n        this.InitializeWaypoint(h, MarkerType.Harbour);\n        return h;\n    };\n    MapViewModel.prototype.SetOptionKey = function (option, item) {\n        ko.applyBindingsToNode(option, { attr: { \"data-id\": item.Id } }, item);\n        ko.applyBindingsToNode(option, { attr: { \"value\": item.Id } }, item);\n    };\n    ;\n    return MapViewModel;\n}());\nvar dropzoneModalOpenedByDrag = false;\nvar dropzoneModal = $(\"#dropzoneModal\");\nvar jobOverviewModal = $(\"#jobOverviewModal\");\nvar personOverviewModal = $(\"#personOverviewModal\");\nvar dropzone;\nvar hasDrag = false;\nvar uploadModalVisible = false;\nvar pswp = $(\".pswp\")[0];\nvar personDeails = $(\"#personDetails\");\nvar deletePerson = $(\"#deletePerson\");\nvar leftSidebar = new Sidebar($(\"#leftSidebar\"));\nvar rightSidebar = new Sidebar($(\"#rightSidebar\"));\nvar bottomSidebar = new Sidebar($(\"#bottomSidebar\"));\nvar harbourInfo = $(\"#harbourInfo\");\nvar mapViewModel = new MapViewModel(MapMode.View);\nDropzone.options.dropzone =\n    {\n        acceptedFiles: \"image/jpeg,image/png\",\n        dictInvalidFileType: \"Dieser Dateityp wird nicht unterstützt\",\n        dictDefaultMessage: \"Dateien hier ablegen\",\n        init: function () {\n            dropzone = this;\n            dropzone.on(\"success\", function (e, data) {\n                var image = new ClientModel.Image().LoadFromServerEntity(data.Image);\n                mapViewModel.Images.push(image);\n                mapViewModel.GetAlbumById(data.AlbumId).Images.push(image);\n            });\n            dropzone.on(\"queuecomplete\", function () {\n                if (dropzoneModalOpenedByDrag)\n                    dropzoneModal.modal(\"hide\");\n            });\n            dropzone.on(\"dragover\", function () { hasDrag = true; });\n        }\n    };\ndocument.ondragenter =\n    function (e) {\n        if (mapViewModel.IsLoggedIn &&\n            !uploadModalVisible &&\n            !hasDrag &&\n            !dropzoneModalOpenedByDrag &&\n            dropzoneModal.is(\":not(.in)\") &&\n            e.dataTransfer.types[0] === \"Files\" &&\n            mapViewModel.AlbumStack()[0] !== undefined) {\n            dropzoneModal.modal(\"show\");\n            uploadModalVisible = true;\n            dropzoneModalOpenedByDrag = true;\n        }\n        hasDrag = true;\n        e.preventDefault();\n        e.stopPropagation();\n    };\ndocument.ondragover = function () { hasDrag = true; };\ndocument.ondragleave =\n    function (e) {\n        if (uploadModalVisible && hasDrag && dropzoneModalOpenedByDrag && dropzone.getQueuedFiles().length === 0 ||\n            dropzone.getUploadingFiles().length === 0) {\n            hasDrag = false;\n            window.setTimeout(function () {\n                if (!hasDrag) {\n                    dropzoneModal.modal(\"hide\");\n                    uploadModalVisible = false;\n                }\n            }, 1000);\n        }\n        e.preventDefault();\n        e.stopPropagation();\n    };\ndropzoneModal.on(\"hide.bs.modal\", function (e) {\n    if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        alert(\"Das Fenster kann nicht geschlossen werden, während Dateien hochgeladen werden.\");\n        return false;\n    }\n    else {\n        dropzone.removeAllFiles();\n        dropzoneModalOpenedByDrag = false;\n    }\n});\nvar gallery;\n$(\".modal\").on(\"hidden.bs.modal\", function () {\n    $(this).removeClass(\"fv-modal-stack\");\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") - 1);\n});\n$(\".modal\").on(\"shown.bs.modal\", function () {\n    // keep track of the number of open modals\n    if (typeof ($(\"body\").data(\"fv_open_modals\")) == \"undefined\") {\n        $(\"body\").data(\"fv_open_modals\", 0);\n    }\n    // if the z-index of this modal has been set, ignore.\n    if ($(this).hasClass(\"fv-modal-stack\")) {\n        return;\n    }\n    $(this).addClass(\"fv-modal-stack\");\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") + 1);\n    $(this).css(\"z-index\", 1040 + (10 * $(\"body\").data(\"fv_open_modals\")));\n    $(\".modal-backdrop\").not(\".fv-modal-stack\")\n        .css(\"z-index\", 1039 + (10 * $(\"body\").data(\"fv_open_modals\")));\n    $(\".modal-backdrop\").not(\"fv-modal-stack\")\n        .addClass(\"fv-modal-stack\");\n});\nko.bindingHandlers.daterange = {\n    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n        var value = valueAccessor()();\n        if (value === undefined)\n            valueAccessor()(new Date().toJSON());\n        value = valueAccessor()();\n        $(element)\n            .daterangepicker({\n            \"singleDatePicker\": true,\n            \"timePicker\": true,\n            \"timePicker24Hour\": true,\n            \"autoApply\": true,\n            \"startDate\": value,\n            \"endDate\": value\n        }, function (start) {\n            valueAccessor()(start._d.toJSON());\n        });\n    },\n    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\n        $(element).data(\"daterangepicker\").setStartDate(moment(valueAccessor()()));\n    }\n};\nwindow.Parsley.on(\"form:validate\", function (form) {\n    if (form.submitEvent === undefined)\n        return false;\n});\nwindow.Parsley.on(\"form:submit\", function (form) { return false; });\n\n"],"sourceRoot":"/source/"}