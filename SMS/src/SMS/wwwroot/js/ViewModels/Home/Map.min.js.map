{"version":3,"sources":["/source/wwwroot/js/ViewModels/Home/ViewModels/Home/Map.ts"],"names":["renderTime","startDate","endDate","Date","getTime","duration","time","Math","ceil","mins","toString","length","getMiddle","pol","start","getLatLngs","end","L","LatLng","lat","lng","splitPolyline","polyline","Waypoints","DummyHandle","Waypoint","w2","w3","RemoveFromPolyline","undefined","AddToPolyline","addDummyHandle","mapViewModel","AddPolyline","Error","removePolyline","_i","_a","waypoint","RemoveFromMap","Map","removeLayer","CreateWaypoint","MarkerType","Dummy","redrawPolyline","middleLatLng","Longitude","Latitude","SetLatLng","redraw","removeFromPolyline","latLng","removeFromArray","arr","obj","tmpArr","Array","arr_1","item","push","pop","shift","ClientModel","Harbour","Job","WaypointDistance","test","navigator","userAgent","$","addClass","MapMode","MapViewModel","mapMode","_this","this","routePolyline","ko","observable","IsLastTakInRoute","computed","read","trip","SelectedTrip","h","SelectedHarbour","Tacks","Start","deferEvaluation","GetRouteDistance","distance","tack","isNaN","Distance","TopJobs","Jobs","filter","j","SuperJobId","IsInViewMode","View","IsInAdminMode","Admin","WaypointsLoaded","WaypointConnectionsLoaded","PersonsLoaded","JobsLoaded","TripsLoaded","AddressesLoaded","ImagesLoaded","AlbumsLoaded","WaypointTacksLoaded","TacksLoaded","LocationsLoaded","AlbumImagesLoaded","LogBookEntriesLoaded","CrewsLoaded","observableArray","WaypointConnections","Harbours","Persons","Trips","Addresses","Images","Locations","Supermarkets","Restaurants","Albums","AlbumImages","LogBookEntries","Crews","SelectedWaypoint","SelectedPerson","SelectedJob","SelectedAddress","SelectedImage","SelectedTack","SelectedLocation","SelectedSupermarket","SelectedRestaurant","SelectedLogBookEntry","RemoveHarbour","remove","RemoveWaypoint","RemovePolyline","DrawingPolyline","routeFixed","noRevertToPreviousBounds","Polylines","DeletingPerson","EditingPerson","EditingHarbour","DeletingHarbour","EditingWaypoint","DeletingWaypoint","DeletingJob","EditingJob","EditingLogBookEntry","DeletingLogBookEntry","DetailedLogBookEntry","WaypointMarkers","mapbox","accessToken","subscribe","InitializeMap","mapOptions","contextmenu","contextmenuItems","text","callback","e","console","log","CreateHarbour","latlng","map","setView","tileLayer","addTo","LoadData","newHarbour","CalculateDistances","sort","h1","h2","HideRoute","harbour","editingHarbourModal","modal","SaveState","RevertState","Id","marker","deletingHarbourModal","editingWaypointModal","deletingWaypointModal","job","editingJobModal","deletingJobModal","Person","editingPersonModal","deletingPersonModal","logBookEntry","detailedLogBookEntryModal","editingLogBookEntryModal","rightSidebar","Hide","Show","t","bottomSidebar","addEventListener","GetMapMode","RouteDrawing","DrawingLatLng","Point","distanceTo","containerPoint","setOpacity","IsDummy","HoveredPolyine","p1","latLngToContainerPoint","p2","containerPointToLatLng","LineUtil","closestPointOnSegment","startId_1","SaveToServer","done","w","ServerApi","Connect","addLatLng","originalEvent","cancelBubble","preventDefault","stopPropagation","document","keyup","keyCode","getLatLng","prototype","StartRoute","Trip","Tack","color","AddToRoute","targetHarbour","lastTack","startHarbour","RouteDistance","wp","RoutePrecessor","End","RedrawTrip","PullTack","tacks","index","indexOf","prevTack","tmpEnd","splice","PushTack","nextTack","RemoveTack","Get","d","d_1","sEntity","Type","LoadFromServerEntity","InitializeModel","d_2","d_3","d_4","d_5","d_6","Address","d_7","Image","d_8","Album","d_9","LogBookEntry","d_10","ai","d_11","d_12","entity","AssignedToId","AssignedTo","GetPersonById","TripId","GetTripById","SuperJob","GetJobById","SubJobs","_b","_c","GetAlbumById","AlbumId","_e","_f","GetAddressById","AddressId","GetHarbourById","HarbourId","_g","_h","GetImageById","ImageId","_j","_k","connection","GetWayPointById","Waypoint1Id","Waypoint2Id","_l","_m","entry","StartId","EndId","_o","_p","crew","lBE","GetLogBookEntryById","TackId","GetTackById","p","PersonId","applyBindings","CreateMarker","enable","disable","GetWaypointById","id","GetLocationById","InitGallery","items","currImage","data","Height","Width","src","Path","gallery","PhotoSwipe","pswp","PhotoSwipeUI_Default","getThumbBoundsFn","elem","padding","parseFloat","window","getComputedStyle","getPropertyValue","replace","scrollIntoView","bounds","getBoundingClientRect","x","left","y","top","screenY","width","init","AddHarbour","getCenter","arg","Polyline","convertFromDummyHandle","target","waypoints","calculating","calculated","calculateRoute","Precessor","minimalDist","Number","POSITIVE_INFINITY","minimalWP","calculating_1","ConnectedWayPoints","cWP","dist","calculated_1","round","calculated_2","ShowRoute","highlightedRoute","latLngs","bindLabel","noHide","FitBounds","getBounds","currentBounds","contains","previousBounds","fitBounds","force","tmpBounds_1","setTimeout","FixRoute","markerType","InitializeWaypoint","options","draggable","opacity","icon","Icon","iconUrl","iconSize","className","contextmenuInheritItems","context","Marker","IsInPolyline","addOneTimeEventListener","name","Name","SaveHarbour","DeleteHarbour","Disconnect","DeleteOnServer","SaveWaypoint","DeleteWaypoint","SaveJob","newJob","DeleteJob","SaveLogBookEntry","newLogBookEntry","DeleteLogBookEntry","SetOptionKey","option","applyBindingsToNode","attr","data-id","value","SavePerson","DeletePerson","dropzoneModalOpenedByDrag","dropzoneModal","jobOverviewModal","personOverviewModal","dropzone","hasDrag","uploadModalVisible","personDeails","deletePerson","leftSidebar","Sidebar","harbourInfo","Dropzone","acceptedFiles","dictInvalidFileType","dictDefaultMessage","on","image","ondragenter","is","dataTransfer","types","ondragover","ondragleave","getQueuedFiles","getUploadingFiles","stopImmediatePropagation","alert","removeAllFiles","event","removeClass","hasClass","css","not","bindingHandlers","daterange","element","valueAccessor","allBindingsAccessor","viewModel","bindingContext","toJSON","daterangepicker","singleDatePicker","timePicker","timePicker24Hour","autoApply","label","_d","update","setStartDate","moment"],"mappings":"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","file":"wwwroot/js/ViewModels/Home/Map.min.js","sourcesContent":["/// <reference path=\"../../clientmodel.ts\" />\r\n/// <reference path=\"../../servermodel.ts\" />\r\n/// <reference path=\"../../serverapi.ts\" />\r\n/// <reference path=\"../../../../typings/browser/definitions/moment/index.d.ts\" />\r\n\r\nimport Waypoint = ClientModel.Waypoint;\r\nimport Harbour = ClientModel.Harbour;\r\nimport Job = ClientModel.Job;\r\nimport WaypointDistance = ClientModel.WaypointDistance;\r\n\r\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n    $(\"body\").addClass(\"mobile\");\r\n}\r\n\r\nfunction renderTime(duration: number);\r\nfunction renderTime(startDate: Date, endDate: Date);\r\nfunction renderTime(startDate: Date | number, endDate?: Date) {\r\n    if (startDate instanceof Date)\r\n        return renderTime(endDate.getTime() - startDate.getTime());\r\n    const duration = <number>startDate;\r\n    var time = Math.ceil(duration / 60000);\r\n    var mins = (time % 60).toString();\r\n    if (mins.length === 1)\r\n        mins = \"0\" + mins;\r\n    time = Math.ceil(time / 60);\r\n    return time.toString() + \":\" + mins;\r\n}\r\n\r\nfunction getMiddle(pol: L.Polyline): L.LatLng {\r\n    const start = pol.getLatLngs()[0];\r\n    const end = pol.getLatLngs()[1];\r\n    return new L.LatLng(start.lat + ((end.lat - start.lat) / 2), start.lng + ((end.lng - start.lng) / 2));\r\n}\r\n\r\nfunction splitPolyline(polyline: L.Polyline) {\r\n    if (polyline.Waypoints.length === 2 && polyline.DummyHandle instanceof Waypoint) {\r\n        const w1 = polyline.Waypoints[0];\r\n        const w2 = polyline.DummyHandle;\r\n        const w3 = polyline.Waypoints[1];\r\n        w2.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle = undefined;\r\n        w2.AddToPolyline(polyline);\r\n        w3.RemoveFromPolyline(polyline);\r\n        addDummyHandle(polyline);\r\n        addDummyHandle(mapViewModel.AddPolyline([w2, w3]));\r\n        return;\r\n    }\r\n    throw new Error(\"Cannot split polyline. Polyline has no dummy handle or less or more than 2 waypoints\");\r\n}\r\n\r\n\r\nfunction removePolyline(polyline: L.Polyline) {\r\n    for (let waypoint of polyline.Waypoints) {\r\n        waypoint.RemoveFromPolyline(polyline);\r\n    }\r\n    if (polyline.DummyHandle !== undefined) {\r\n        polyline.DummyHandle.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle.RemoveFromMap();\r\n    }\r\n    mapViewModel.Map.removeLayer(polyline);\r\n}\r\n\r\nfunction addDummyHandle(polyline: L.Polyline) {\r\n    if (polyline.DummyHandle === undefined) {\r\n        polyline.DummyHandle = mapViewModel.CreateWaypoint(getMiddle(polyline), MarkerType.Dummy);\r\n        polyline.DummyHandle.AddToPolyline(polyline);\r\n    }\r\n}\r\n\r\nfunction redrawPolyline(polyline: L.Polyline) {\r\n    const middleLatLng = getMiddle(polyline);\r\n    if (polyline.DummyHandle === undefined)\r\n        addDummyHandle(polyline);\r\n    if (polyline.DummyHandle.Longitude() !== middleLatLng.lng || polyline.DummyHandle.Latitude() !== middleLatLng.lat)\r\n        polyline.DummyHandle.SetLatLng(middleLatLng);\r\n    else\r\n        polyline.redraw();\r\n}\r\n\r\nfunction removeFromPolyline(polyline: L.Polyline, latLng: L.LatLng) {\r\n    removeFromArray(polyline.getLatLngs(), latLng);\r\n    polyline.redraw();\r\n}\r\n\r\nfunction removeFromArray<T>(arr: T[], obj: T): boolean {\r\n    const tmpArr = new Array<T>();\r\n    for (let item of arr) {\r\n        if (item !== obj)\r\n            tmpArr.push(item);\r\n    }\r\n    if (tmpArr.length === arr.length)\r\n        return false;\r\n    while (arr.pop()) {\r\n    }\r\n    while (tmpArr.length > 0) {\r\n        arr.push(tmpArr.shift());\r\n    }\r\n    return true;\r\n}\r\n\r\nenum MapMode {\r\n    Admin,\r\n    View,\r\n    TripPlanning,\r\n    RouteDrawing\r\n}\r\n\r\ndeclare namespace L {\r\n    export interface Polyline extends Path {\r\n\r\n        Waypoints: Array<Waypoint>;\r\n        DummyHandle: Waypoint;\r\n    }\r\n\r\n    export interface LatLng {\r\n        Polylines: Polyline[];\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface Marker {\r\n        Waypoint: Waypoint;\r\n        Point: L.Point;\r\n        _icon;\r\n    }\r\n\r\n    export interface CircleMarker {\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface PathOptions {\r\n        Draggable?: boolean;\r\n    }\r\n\r\n    export interface MarkerOptions {\r\n        contextmenu?: boolean;\r\n        contextmenuWidth?: number;\r\n        contextmenuAnchor?: L.Point | L.Point[];\r\n        contextmenuItems?: contextmenuItem[];\r\n        contextmenuInheritItems: boolean;\r\n\r\n    }\r\n\r\n    export interface contextmenuItem {\r\n        text?: string;\r\n        icon?: string;\r\n        iconCls?: string;\r\n        callback?: Function;\r\n        context?: Object;\r\n        disabled?: boolean;\r\n        separator?: boolean;\r\n        hideOnSelect?: boolean;\r\n        index?: number;\r\n    }\r\n\r\n\r\n}\r\n\r\nclass MapViewModel {\r\n    constructor(mapMode: MapMode) {\r\n        L.mapbox\r\n            .accessToken =\r\n            \"pk.eyJ1IjoiZGFuaWVsLWt1b24iLCJhIjoiY2lldnVtY29iMDBiOHQxbTBvZzBqZWl6cCJ9.UEc2YqH59pB1YTpv22vg8A\";\r\n        this.MapMode(mapMode);\r\n        this.MapMode.subscribe(() => {\r\n            this.InitializeMap();\r\n        });\r\n        const mapOptions: L.mapbox.MapOptions = {\r\n            contextmenu: mapMode === MapMode.Admin,\r\n            contextmenuItems: [\r\n                {\r\n                    text: \"Neuer Hafen\",\r\n                    callback: function (e) {\r\n                        console.log(e);\r\n                        mapViewModel.EditingHarbour(mapViewModel.CreateHarbour(\"\", e.latlng))\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        this.Map = L.mapbox.map(\"map\",\r\n            \"mapbox.streets\",\r\n            mapOptions);\r\n        this.Map.setView([54.40774166820069, 10.523529052734373], 9);\r\n        L.tileLayer(\"http://t1.openseamap.org/seamark/{z}/{x}/{y}.png\").addTo(this.Map);\r\n        this.LoadData();\r\n        this.SelectedHarbour.subscribe((newHarbour) => {\r\n            if (newHarbour !== undefined) {\r\n                mapViewModel.CalculateDistances(newHarbour);\r\n                mapViewModel.Harbours.sort((h1, h2) => h1.Distance() - h2.Distance());\r\n            } else {\r\n                for (let h of mapViewModel.Harbours()) {\r\n                    h.Distance(0);\r\n                }\r\n            }\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        });\r\n        this.EditingHarbour.subscribe((harbour) => {\r\n            if (harbour === undefined) {\r\n                editingHarbourModal.modal(\"hide\");\r\n            } else {\r\n                harbour.SaveState();\r\n                editingHarbourModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingHarbour.subscribe((harbour) => {\r\n            if (harbour !== undefined) {\r\n                harbour.RevertState(true);\r\n                if (harbour.Id() === undefined)\r\n                    mapViewModel.Map.removeLayer(harbour.marker);\r\n            }\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingHarbour.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingHarbourModal.modal(\"hide\");\r\n            } else {\r\n                deletingHarbourModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingWaypoint.subscribe((waypoint) => {\r\n            if (waypoint === undefined) {\r\n                editingWaypointModal.modal(\"hide\");\r\n            } else {\r\n                waypoint.SaveState();\r\n                editingWaypointModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingWaypoint.subscribe((waypoint) => {\r\n            if (mapViewModel.EditingWaypoint() !== undefined)\r\n                mapViewModel.EditingWaypoint().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingWaypoint.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingWaypointModal.modal(\"hide\");\r\n            } else {\r\n                deletingWaypointModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingJob.subscribe((job) => {\r\n            if (job === undefined) {\r\n                editingJobModal.modal(\"hide\");\r\n            } else {\r\n                job.SaveState();\r\n                editingJobModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingJob.subscribe((job) => {\r\n            if (mapViewModel.EditingJob() !== undefined)\r\n                mapViewModel.EditingJob().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingJob.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingJobModal.modal(\"hide\");\r\n            } else {\r\n                deletingJobModal.modal(\"show\");\r\n            }\r\n        });\r\n\r\n        this.EditingPerson.subscribe((Person) => {\r\n            if (Person === undefined) {\r\n                editingPersonModal.modal(\"hide\");\r\n            } else {\r\n                Person.SaveState();\r\n                editingPersonModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingPerson.subscribe((Person) => {\r\n            if (mapViewModel.EditingPerson() !== undefined)\r\n                mapViewModel.EditingPerson().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingPerson.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingPersonModal.modal(\"hide\");\r\n            } else {\r\n                deletingPersonModal.modal(\"show\");\r\n            }\r\n        });\r\n\r\n\r\n        this.DetailedLogBookEntry.subscribe((logBookEntry) => {\r\n            detailedLogBookEntryModal.modal(\"show\");\r\n        });\r\n\r\n        this.EditingLogBookEntry.subscribe((logBookEntry) => {\r\n            if (logBookEntry === undefined) {\r\n                editingLogBookEntryModal.modal(\"hide\");\r\n            } else {\r\n                logBookEntry.SaveState();\r\n                editingLogBookEntryModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingLogBookEntry.subscribe((job) => {\r\n            if (mapViewModel.EditingLogBookEntry() !== undefined)\r\n                mapViewModel.EditingLogBookEntry().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n\r\n        this.SelectedHarbour.subscribe((h) => {\r\n            if (h === undefined)\r\n                rightSidebar.Hide();\r\n            else\r\n                rightSidebar.Show();\r\n\r\n        });\r\n        this.SelectedTrip.subscribe((t) => {\r\n            if (t === undefined)\r\n                bottomSidebar.Hide();\r\n            else\r\n                bottomSidebar.Show();\r\n        });\r\n        this.Map.addEventListener(\"mousemove\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    this.DrawingLatLng.lat = e.latlng.lat;\r\n                    this.DrawingLatLng.lng = e.latlng.lng;\r\n                    this.DrawingPolyline.redraw();\r\n                }\r\n                if (this.MapMode() === MapMode.Admin)\r\n                    for (let marker of this.WaypointMarkers) {\r\n                        if (marker.Point.distanceTo(e.containerPoint) < 150)\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 1);\r\n                        else\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 0.8);\r\n                    }\r\n                if (mapViewModel.HoveredPolyine !== undefined && mapViewModel.HoveredPolyine.DummyHandle !== undefined) {\r\n                    const polyline = mapViewModel.HoveredPolyine;\r\n                    const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n                    const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n                    if (p1.distanceTo(e.containerPoint) < 20 || p2.distanceTo(e.containerPoint) < 20) {\r\n                        mapViewModel.HoveredPolyine = undefined;\r\n                    } else {\r\n                        mapViewModel.HoveredPolyine.DummyHandle.marker.setOpacity(0.8);\r\n                        mapViewModel.HoveredPolyine.DummyHandle\r\n                            .SetLatLng(mapViewModel.Map\r\n                                .containerPointToLatLng(L.LineUtil\r\n                                    .closestPointOnSegment(e.containerPoint,\r\n                                    p1,\r\n                                    p2)),\r\n                            false);\r\n                    }\r\n                }\r\n\r\n            });\r\n        this.Map.addEventListener(\"click\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    const waypoint = mapViewModel.CreateWaypoint(e.latlng, MarkerType.Waypoint);\r\n                    const startId = this.DrawingPolyline.Waypoints[0].Id();\r\n                    waypoint.SaveToServer()\r\n                        .done(w => {\r\n                            ServerApi.WaypointConnections\r\n                                .Connect(w.Id, startId);\r\n                        });\r\n                    waypoint.AddToPolyline(this.DrawingPolyline);\r\n                    addDummyHandle(this.DrawingPolyline);\r\n                    removeFromPolyline(this.DrawingPolyline, this.DrawingLatLng);\r\n                    this.DrawingPolyline = this.AddPolyline(waypoint);\r\n                    this.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                    this.DrawingPolyline.addLatLng(this.DrawingLatLng);\r\n                }\r\n            });\r\n\r\n        this.Map.addEventListener(\"dblclick\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    e.originalEvent.cancelBubble = true;\r\n                    e.originalEvent.preventDefault();\r\n                    e.originalEvent.stopPropagation();\r\n                    this.DrawingPolyline.addLatLng(e.latlng);\r\n                    this.DrawingLatLng = e.latlng;\r\n                }\r\n            });\r\n        $(document)\r\n            .keyup((e: JQueryKeyEventObject) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    if (e.keyCode === 27) {\r\n                        this.RemovePolyline(this.DrawingPolyline);\r\n                    }\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"move\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"zoom\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n    }\r\n\r\n    private routePolyline = ko.observable<L.Polyline>();\r\n\r\n    StartRoute() {\r\n        const trip = new ClientModel.Trip();\r\n        const tack = new ClientModel.Tack();\r\n        const harbour = mapViewModel.SelectedHarbour();\r\n        tack.Start(harbour);\r\n        trip.Tacks.push(tack);\r\n        mapViewModel.SelectedTrip(trip);\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n    }\r\n\r\n    IsLastTakInRoute = ko.computed({\r\n        read: () => {\r\n            var trip = mapViewModel.SelectedTrip();\r\n            var h = mapViewModel.SelectedHarbour();\r\n            return trip !== undefined && h !== undefined && trip.Tacks()[trip.Tacks().length - 1].Start() === h;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    GetRouteDistance = ko.computed({\r\n        read: () => {\r\n            var distance = 0;\r\n            for (let tack of mapViewModel.SelectedTrip().Tacks()) {\r\n                if (!isNaN(tack.Distance()))\r\n                    distance += tack.Distance();\r\n            }\r\n            return distance;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    TopJobs = ko.computed({\r\n        read: () => {\r\n            return mapViewModel.Jobs().filter((j) => j.SuperJobId() === undefined);\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    AddToRoute() {\r\n        const trip = mapViewModel.SelectedTrip();\r\n        const targetHarbour = mapViewModel.SelectedHarbour();\r\n        const tack = new ClientModel.Tack();\r\n        const lastTack = trip.Tacks()[trip.Tacks().length - 1];\r\n        const startHarbour = lastTack.Start();\r\n        mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n        lastTack.Distance(startHarbour.RouteDistance());\r\n        let wp: ClientModel.Waypoint = startHarbour;\r\n        mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n            wp = wp.RoutePrecessor();\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        }\r\n\r\n        lastTack.End(targetHarbour);\r\n        tack.Start(targetHarbour);\r\n        trip.Tacks.push(tack);\r\n    }\r\n\r\n    RedrawTrip() {\r\n        mapViewModel.Map.removeLayer(mapViewModel.routePolyline());\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n        for (let tack of mapViewModel.SelectedTrip().Tacks()) {\r\n            const targetHarbour = tack.End();\r\n            const startHarbour = tack.Start();\r\n            if (targetHarbour === undefined)\r\n                continue;\r\n            mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n            tack.Distance(startHarbour.RouteDistance());\r\n            let wp: ClientModel.Waypoint = startHarbour;\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n                wp = wp.RoutePrecessor();\r\n                mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            }\r\n        }\r\n    }\r\n\r\n    PullTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        var tmpEnd = tack.End();\r\n        tack.End(prevTack.Start());\r\n        prevTack.End(tmpEnd);\r\n        if (index > 1) {\r\n            tacks()[index - 2].End(tack.Start());\r\n        }\r\n        tacks.splice(index - 1, 2, tack, prevTack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    PushTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const nextTack = tacks()[index + 1];\r\n        tack.End(nextTack.End());\r\n        nextTack.End(tack.Start());\r\n        if (index > 0) {\r\n            tacks()[index - 1].End(nextTack.Start());\r\n        }\r\n        tacks.splice(index, 2, nextTack, tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    RemoveTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        if (prevTack !== undefined)\r\n            prevTack.End(tack.End());\r\n        tacks.remove(tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    IsInViewMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.View;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    IsInAdminMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.Admin;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n\r\n    LoadData() {\r\n        ServerApi.Waypoints\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    if (sEntity.Type === \"Waypoint\")\r\n                        this.Waypoints.push(mapViewModel\r\n                            .CreateWaypoint(MarkerType.Waypoint)\r\n                            .LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === \"Harbour\") {\r\n                        const harbour = mapViewModel\r\n                            .CreateHarbour()\r\n                            .LoadFromServerEntity(sEntity);\r\n                        this.Harbours.push(harbour);\r\n                    }\r\n                }\r\n\r\n                this.WaypointsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.WaypointConnections\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.WaypointConnections.push(sEntity);\r\n                }\r\n                this.WaypointConnectionsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Persons\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Persons.push(new ClientModel.Person().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.PersonsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Jobs\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Jobs.push(new ClientModel.Job().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.JobsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Trips\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Trips.push(new ClientModel.Trip().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TripsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Addresses\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Addresses.push(new ClientModel.Address().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AddressesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Images\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Images.push(new ClientModel.Image().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.ImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Albums\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Albums.push(new ClientModel.Album().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AlbumsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.LogBookEntries\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.LogBookEntries.push(new ClientModel.LogBookEntry().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.LogBookEntriesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AlbumImages.Get()\r\n            .done(d => {\r\n                for (let ai of d) {\r\n                    this.AlbumImages.push(ai);\r\n                }\r\n                this.AlbumImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.Crews.Get()\r\n            .done(d => {\r\n                for (let ai of d) {\r\n                    this.Crews.push(ai);\r\n                }\r\n                this.CrewsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        //ServerApi.WaypointTacks.Get().done(d => {\r\n        //    for (let sEntity of d) { this.WaypointTacks.push(new ClientModel.WaypointTack().LoadFromServerEntity(sEntity)); }\r\n        //    this.WaypointTacksLoaded = true;\r\n        //    this.InitialozeModel();\r\n        //});\r\n        ServerApi.Tacks\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Tacks.push(new ClientModel.Tack().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TacksLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        //ServerApi.Locations\r\n        //    .Get()\r\n        //    .done(d => {\r\n        //        for (let sEntity of d) {\r\n        //            if (sEntity.Type === \"Location\")\r\n        //                this.Locations.push(new ClientModel.Location().LoadFromServerEntity(sEntity));\r\n        //            else if (sEntity.Type === \"Restaurant\")\r\n        //                this.Restaurants.push(new ClientModel.Restaurant().LoadFromServerEntity(sEntity));\r\n        //            else if (sEntity.Type === \"Supermarket\")\r\n        //                this.Supermarkets.push(new ClientModel.Supermarket().LoadFromServerEntity(sEntity));\r\n        //        }\r\n                this.LocationsLoaded = true;\r\n        //        this.InitializeModel();\r\n        //    });\r\n    }\r\n\r\n    InitializeModel() {\r\n        if (this.WaypointsLoaded &&\r\n            this.WaypointConnectionsLoaded &&\r\n            this.PersonsLoaded &&\r\n            this.JobsLoaded &&\r\n            this.TripsLoaded &&\r\n            this.AddressesLoaded &&\r\n            this.ImagesLoaded &&\r\n            this.AlbumsLoaded &&\r\n            //this.WaypointTacksLoaded &&\r\n            this.TacksLoaded &&\r\n            this.LocationsLoaded &&\r\n            this.CrewsLoaded &&\r\n            this.AlbumImagesLoaded) {\r\n            for (let entity of this.Jobs()) {\r\n                if (entity.AssignedToId() !== undefined)\r\n                    entity.AssignedTo(this.GetPersonById(entity.AssignedToId()));\r\n                if (entity.TripId() !== undefined)\r\n                    entity.Trip(this.GetTripById(entity.TripId()));\r\n                if (entity.SuperJobId() !== undefined) {\r\n                    entity.SuperJob(this.GetJobById(entity.SuperJobId()));\r\n                    entity.SuperJob().SubJobs.push(entity);\r\n                }\r\n            }\r\n            for (let entity of this.Harbours()) {\r\n                entity.Album(this.GetAlbumById(entity.AlbumId()));\r\n            }\r\n            for (let entity of this.Locations()) {\r\n                entity.Address(this.GetAddressById(entity.AddressId()));\r\n                this.GetHarbourById(entity.HarbourId()).Locations.push(entity);\r\n            }\r\n            for (let entity of this.AlbumImages()) {\r\n                this.GetAlbumById(entity.AlbumId).Images.push(this.GetImageById(entity.ImageId));\r\n            }\r\n            for (let connection of mapViewModel.WaypointConnections()) {\r\n                const polyline = mapViewModel.AddPolyline([\r\n                    mapViewModel.GetWayPointById(connection.Waypoint1Id), mapViewModel\r\n                        .GetWayPointById(connection.Waypoint2Id)\r\n                ]);\r\n                addDummyHandle(polyline);\r\n            }\r\n            for (let entry of mapViewModel.LogBookEntries()) {\r\n                entry.Start(mapViewModel.GetHarbourById(entry.StartId()));\r\n                entry.End(mapViewModel.GetHarbourById(entry.EndId()));\r\n                entry.Album(mapViewModel.GetAlbumById(entry.AlbumId()));\r\n            }\r\n            for (let crew of mapViewModel.Crews()) {\r\n                const lBE = mapViewModel.GetLogBookEntryById(crew.TackId);\r\n                const tack = mapViewModel.GetTackById(crew.TackId);\r\n                const trip = mapViewModel.GetTripById(crew.TackId);\r\n                const p = mapViewModel.GetPersonById(crew.PersonId);\r\n                if (lBE !== undefined)\r\n                    lBE.Persons.push(p);\r\n                else if (tack !== undefined)\r\n                    tack.Persons.push(p);\r\n                else if (trip !== undefined)\r\n                    trip.Persons.push(p);\r\n            }\r\n            ko.applyBindings(mapViewModel);\r\n            $(\"#loadingOverlay\").remove();\r\n        }\r\n    }\r\n\r\n    InitializeMap() {\r\n        mapViewModel.SelectedHarbour(undefined);\r\n        for (let wp of mapViewModel.Waypoints()) {\r\n            if (wp.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(wp.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Waypoint, wp);\r\n        }\r\n        for (let h of mapViewModel.Harbours()) {\r\n            if (h.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(h.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Harbour, h);\r\n        }\r\n        for (let p of mapViewModel.Polylines) {\r\n            if (p.DummyHandle.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(p.DummyHandle.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Dummy, p.DummyHandle);\r\n        }\r\n        if (mapViewModel.MapMode() === MapMode.Admin) {\r\n            for (let p of mapViewModel.Polylines) {\r\n                p.addTo(mapViewModel.Map);\r\n            }\r\n            mapViewModel.Map.contextmenu.enable();\r\n        } else {\r\n            for (let p of mapViewModel.Polylines) {\r\n                mapViewModel.Map.removeLayer(p);\r\n            }\r\n            mapViewModel.Map.contextmenu.disable();\r\n        }\r\n    }\r\n\r\n    Map: L.mapbox.Map;\r\n\r\n    GetWaypointById(id: number): ClientModel.Waypoint {\r\n        for (let entity of this.Waypoints()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Waypoint with id \" + id + \" found\";\r\n    }\r\n\r\n    GetHarbourById(id: number): ClientModel.Harbour {\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Harbour with id \" + id + \" found\";\r\n    }\r\n\r\n    GetPersonById(id: number): ClientModel.Person {\r\n        for (let entity of this.Persons()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Person with id \" + id + \" found\";\r\n    }\r\n\r\n    GetJobById(id: number): ClientModel.Job {\r\n        for (let entity of this.Jobs()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Job with id \" + id + \" found\";\r\n    }\r\n\r\n    GetTripById(id: number): ClientModel.Trip {\r\n        for (let entity of this.Trips()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Trip with id \" + id + \" found\";\r\n    }\r\n\r\n    GetAddressById(id: number): ClientModel.Address {\r\n        for (let entity of this.Addresses()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Address with id \" + id + \" found\";\r\n    }\r\n\r\n    GetImageById(id: number): ClientModel.Image {\r\n        for (let entity of this.Images()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Image with id \" + id + \" found\";\r\n    }\r\n\r\n    GetTackById(id: number): ClientModel.Tack {\r\n        for (let entity of this.Tacks()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n    }\r\n\r\n    GetLogBookEntryById(id: number): ClientModel.Tack {\r\n        for (let entity of this.LogBookEntries()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n    }\r\n\r\n    GetAlbumById(id: number): ClientModel.Album {\r\n        for (let entity of this.Albums()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n    }\r\n\r\n    GetLocationById(id: number): ClientModel.Location {\r\n        for (let entity of this.Locations()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Location with id \" + id + \" found\";\r\n    }\r\n\r\n    WaypointsLoaded = false;\r\n    WaypointConnectionsLoaded = false;\r\n    PersonsLoaded = false;\r\n    JobsLoaded = false;\r\n    TripsLoaded = false;\r\n    AddressesLoaded = false;\r\n    ImagesLoaded = false;\r\n    AlbumsLoaded = false;\r\n    WaypointTacksLoaded = false;\r\n    TacksLoaded = false;\r\n    LocationsLoaded = false;\r\n    AlbumImagesLoaded = false;\r\n    LogBookEntriesLoaded = false;\r\n    CrewsLoaded = false;\r\n\r\n    Waypoints = ko.observableArray<ClientModel.Waypoint>();\r\n    WaypointConnections = ko.observableArray<ServerModel.WaypointConnection>();\r\n    Harbours = ko.observableArray<ClientModel.Harbour>();\r\n    Persons = ko.observableArray<ClientModel.Person>();\r\n    Jobs = ko.observableArray<ClientModel.Job>();\r\n    Trips = ko.observableArray<ClientModel.Trip>();\r\n    Addresses = ko.observableArray<ClientModel.Address>();\r\n    Images = ko.observableArray<ClientModel.Image>();\r\n    Tacks = ko.observableArray<ClientModel.Tack>();\r\n    Locations = ko.observableArray<ClientModel.Location>();\r\n    Supermarkets = ko.observableArray<ClientModel.Supermarket>();\r\n    Restaurants = ko.observableArray<ClientModel.Restaurant>();\r\n    Albums = ko.observableArray<ClientModel.Album>();\r\n    AlbumImages = ko.observableArray<ServerModel.AlbumImage>();\r\n    LogBookEntries = ko.observableArray<ClientModel.LogBookEntry>();\r\n    Crews = ko.observableArray<ServerModel.Crew>();\r\n\r\n    SelectedWaypoint = ko.observable<ClientModel.Waypoint>();\r\n    SelectedHarbour = ko.observable<ClientModel.Harbour>();\r\n    SelectedPerson = ko.observable<ClientModel.Person>();\r\n    SelectedJob = ko.observable<ClientModel.Job>();\r\n    SelectedTrip = ko.observable<ClientModel.Trip>();\r\n    SelectedAddress = ko.observable<ClientModel.Address>();\r\n    SelectedImage = ko.observable<ClientModel.Image>();\r\n    SelectedTack = ko.observable<ClientModel.Tack>();\r\n    SelectedLocation = ko.observable<ClientModel.Location>();\r\n    SelectedSupermarket = ko.observable<ClientModel.Supermarket>();\r\n    SelectedRestaurant = ko.observable<ClientModel.Restaurant>();\r\n    SelectedLogBookEntry = ko.observable<ClientModel.LogBookEntry>();\r\n\r\n    //SortedLogBookEntries = ko.computed({\r\n    //    read: () => this.LogBookEntries.sort((l1, l2) => {\r\n    //        var t1 = l1.StartDate().getTime();\r\n    //        var t2 = l2.StartDate().getTime();\r\n    //        return t2 - t1;\r\n    //    }),\r\n    //    deferEvaluation: true\r\n    //});\r\n\r\n    InitGallery() {\r\n        const items = new Array<PhotoSwipe.Item>();\r\n        const currImage: ClientModel.Image = this as any;\r\n        for (let data of mapViewModel.SelectedHarbour().Album().Images()) {\r\n            items.push(({\r\n                h: data.Height(),\r\n                w: data.Width(),\r\n                src: data.Path()\r\n            } as any));\r\n        }\r\n        gallery = new PhotoSwipe(pswp,\r\n            PhotoSwipeUI_Default,\r\n            items,\r\n            {\r\n                index: mapViewModel.SelectedHarbour().Album().Images.indexOf(currImage) as number,\r\n                getThumbBoundsFn: (index: number): { x: number; y: number; w: number } => {\r\n                    const elem = $(\".images:first img\")[index];\r\n                    var padding = parseFloat(window.getComputedStyle(elem, null)\r\n                        .getPropertyValue(\"padding-left\")\r\n                        .replace(\"px\", \"\"));\r\n                    elem.scrollIntoView(false);\r\n                    const bounds = elem.getBoundingClientRect();\r\n                    return {\r\n                        x: bounds.left + padding,\r\n                        y: bounds.top + window.screenY + padding,\r\n                        w: bounds.width - (2 * padding)\r\n                    };\r\n                }\r\n            });\r\n        gallery.init();\r\n    }\r\n\r\n    AddHarbour(): void {\r\n        const harbour = mapViewModel.CreateHarbour(`Hafen ${this.Harbours.length}`, this.Map.getCenter());\r\n        mapViewModel.Harbours.push(harbour);\r\n        harbour.SaveToServer();\r\n    }\r\n\r\n    RemoveHarbour = () => {\r\n        mapViewModel.SelectedWaypoint().RemoveFromMap();\r\n        mapViewModel.Waypoints.remove(this.SelectedWaypoint());\r\n    };\r\n    RemoveWaypoint = () => {\r\n        mapViewModel.SelectedHarbour().RemoveFromMap();\r\n        mapViewModel.Harbours.remove(this.SelectedHarbour());\r\n        mapViewModel.Harbours.remove(this.SelectedHarbour());\r\n    };\r\n\r\n    //CopyHarbour(h1: Harbour, h2: Harbour): void {\r\n    //    this.CopyWaypoint(h1, h2);\r\n    //}\r\n\r\n    //CopyWaypoint(w1: Waypoint, w2: Waypoint) {\r\n    //    w2.WaypointNumber(w1.WaypointNumber());\r\n    //    w2.Latitude(w1.Latitude());\r\n    //    w2.Longitude(w1.Longitude());\r\n    //    w2.Name(w1.Name());\r\n    //    w2.Description(w1.Description());\r\n    //}\r\n\r\n    AddPolyline(waypoint?: Waypoint): L.Polyline;\r\n    AddPolyline(waypoints?: Waypoint[]): L.Polyline;\r\n    AddPolyline(arg?): L.Polyline {\r\n        const polyline = new L.Polyline([]);\r\n        mapViewModel.Polylines.push(polyline);\r\n        polyline.addEventListener(\"click\", (e: L.LeafletMouseEvent) => {\r\n            const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n            const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n            polyline.DummyHandle\r\n                .SetLatLng(mapViewModel.Map\r\n                    .containerPointToLatLng(L.LineUtil\r\n                        .closestPointOnSegment(e.containerPoint,\r\n                        p1,\r\n                        p2)),\r\n                false);\r\n            \r\n                            mapViewModel.Waypoints.push(polyline.DummyHandle);\r\n                            polyline.DummyHandle.convertFromDummyHandle();\r\n        });\r\n        if (mapViewModel.MapMode() === MapMode.Admin)\r\n            polyline.addTo(this.Map);\r\n        polyline.Waypoints = new Array();\r\n        if (arg !== undefined)\r\n            if (arg instanceof Waypoint)\r\n                (arg as Waypoint).AddToPolyline(polyline);\r\n            else\r\n                for (let waypoint of arg as Waypoint[]) {\r\n                    waypoint.AddToPolyline(polyline);\r\n                }\r\n        polyline.addEventListener(\"mouseover\",\r\n            () => {\r\n                //mapViewModel.HoveredPolyine = polyline;\r\n            });\r\n        return polyline;\r\n    }\r\n\r\n\r\n    MapMode = ko.observable<MapMode>();\r\n    DrawingLatLng: L.LatLng;\r\n    DrawingSourceWaypoint: Waypoint;\r\n    DrawingTargetWaypoint: Waypoint;\r\n    RemovePolyline = (polyline: L.Polyline) => {\r\n        this.Map.removeLayer(polyline);\r\n        this.DrawingPolyline = undefined;\r\n    };\r\n\r\n    GetMapMode(): MapMode {\r\n        if (this.DrawingPolyline !== undefined && this.DrawingLatLng !== undefined)\r\n            return MapMode.RouteDrawing;\r\n        return this.MapMode();\r\n    }\r\n\r\n    GetWayPointById(id: number): Waypoint {\r\n        for (let waypoint of this.Waypoints()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        for (let waypoint of this.Harbours()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        throw `No Waypoint with id ${id} in model`;\r\n    }\r\n\r\n    CalculateDistances(start = mapViewModel.SelectedHarbour(), target?: ClientModel.Waypoint) {\r\n\r\n        const waypoints: Array<Waypoint> = [start];\r\n        const calculating = new Array<WaypointDistance>();\r\n        const calculated = new Array<WaypointDistance>();\r\n        const calculateRoute = target !== undefined;\r\n        calculating.push(new WaypointDistance(undefined, start, 0, waypoints, calculateRoute));\r\n        //for (let waypoint of mapViewModel.Waypoints()) {\r\n        //    waypoints.push(new WaypointDistance(null, waypoint, Number.POSITIVE_INFINITY));\r\n        //}\r\n        //for (let harbour of mapViewModel.Harbours()) {\r\n        //    if (harbour !== start) {\r\n        //        waypoints.push(new WaypointDistance(null, harbour, Number.POSITIVE_INFINITY));\r\n        //    }\r\n        //}\r\n        if (calculateRoute) {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.RoutePrecessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.RoutePrecessor(undefined);\r\n            }\r\n        } else {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.Precessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.Precessor(undefined);\r\n            }\r\n        }\r\n        while (calculating.length > 0) {\r\n            let minimalDist = Number.POSITIVE_INFINITY;\r\n            let minimalWP: WaypointDistance;\r\n            for (let wp of calculating) {\r\n                for (let cWP of wp.ConnectedWayPoints) {\r\n                    if ((calculateRoute ? cWP.RoutePrecessor() : cWP.Precessor()) !== undefined)\r\n                        removeFromArray(wp.ConnectedWayPoints, cWP);\r\n                }\r\n                if (wp.ConnectedWayPoints.length === 0) {\r\n                    removeFromArray(calculating, wp);\r\n                    calculated.push(wp);\r\n                } else {\r\n                    const dist = wp.Distance + wp.ConnectedWayPoints[0].LatLng.distanceTo(wp.LatLng) / 1.852;\r\n                    if (dist < minimalDist) {\r\n                        minimalDist = dist;\r\n                        minimalWP = wp;\r\n                    }\r\n                }\r\n            }\r\n            if (minimalWP !== undefined) {\r\n                calculating.push(new WaypointDistance(minimalWP.Waypoint,\r\n                    minimalWP.ConnectedWayPoints.shift(),\r\n                    minimalDist,\r\n                    waypoints,\r\n                    calculateRoute));\r\n                //if (minimalWP.Waypoint === target)\r\n                //    break;\r\n            }\r\n        }\r\n        if (calculateRoute)\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.RouteDistance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n        else\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.Distance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n    }\r\n\r\n    private highlightedRoute: L.Polyline;\r\n    private routeFixed = false;\r\n    private previousBounds: L.LatLngBounds;\r\n    private noRevertToPreviousBounds = false;\r\n\r\n    ShowRoute(h: ClientModel.Waypoint) {\r\n        if (mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        }\r\n        if (h === undefined)\r\n            h = (this as any);\r\n        if (!(h instanceof ClientModel.Harbour))\r\n            return;\r\n        const latLngs = [h.LatLng];\r\n        let dist = h.Distance();\r\n        if (dist === undefined)\r\n            dist = 0;\r\n        while (h.Precessor() !== undefined) {\r\n            h = h.Precessor();\r\n            latLngs.push(h.LatLng);\r\n        }\r\n        mapViewModel.highlightedRoute = L.polyline(latLngs);\r\n        mapViewModel.highlightedRoute.addTo(mapViewModel.Map);\r\n        mapViewModel.highlightedRoute.bindLabel(dist.toString() + \" sm\", { noHide: true });\r\n        mapViewModel.FitBounds(mapViewModel.highlightedRoute.getBounds());\r\n    }\r\n\r\n    FitBounds(bounds: L.LatLngBounds) {\r\n        const map = mapViewModel.Map;\r\n        const currentBounds = map.getBounds();\r\n        if (!currentBounds.contains(bounds)) {\r\n            if (mapViewModel.previousBounds === undefined)\r\n                mapViewModel.previousBounds = currentBounds;\r\n            map.fitBounds(bounds);\r\n        }\r\n    }\r\n\r\n    HideRoute(force = false) {\r\n        if ((!mapViewModel.routeFixed || force) && mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.Map.removeLayer(mapViewModel.highlightedRoute);\r\n            mapViewModel.highlightedRoute = undefined;\r\n            if (!mapViewModel.noRevertToPreviousBounds && mapViewModel.previousBounds !== undefined) {\r\n                const tmpBounds = mapViewModel.previousBounds;\r\n                mapViewModel.previousBounds = undefined;\r\n                window.setTimeout(() => {\r\n                    if (mapViewModel.previousBounds === undefined)\r\n                        mapViewModel.Map.fitBounds(tmpBounds);\r\n                    else\r\n                        mapViewModel.previousBounds = tmpBounds;\r\n                }, 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    FixRoute() {\r\n        mapViewModel.routeFixed = true;\r\n        mapViewModel.previousBounds = undefined;\r\n    }\r\n\r\n    CreateWaypoint(markerType: MarkerType): Waypoint;\r\n    CreateWaypoint(latLng: L.LatLng, markerType: MarkerType): Waypoint;\r\n    CreateWaypoint(latLng?: L.LatLng | MarkerType, markerType?: MarkerType): Waypoint {\r\n        let wp: Waypoint;\r\n        if (markerType !== undefined)\r\n            wp = new Waypoint(<L.LatLng>latLng, markerType, mapViewModel.Map as L.mapbox.Map);\r\n        else\r\n            wp = new Waypoint(markerType, mapViewModel.Map as L.mapbox.Map);\r\n        this.InitializeWaypoint(wp, markerType);\r\n        return wp;\r\n    }\r\n\r\n    InitializeWaypoint(wp: Waypoint, markerType: MarkerType) {\r\n        this.CreateMarker(markerType, wp);\r\n    }\r\n\r\n    CreateMarker(markerType: MarkerType, wp: ClientModel.Waypoint) {\r\n        if (mapViewModel.MapMode() === MapMode.Admin || markerType === MarkerType.Harbour) {\r\n            const options: L.MarkerOptions = {\r\n                draggable: (mapViewModel.MapMode() === MapMode.Admin)\r\n            };\r\n            if (markerType === MarkerType.Dummy) {\r\n                options.opacity = 0;\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin &&\r\n                (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy)) {\r\n                options.icon = new L.Icon({\r\n                    iconUrl: \"/images/waypointhandle.png\",\r\n                    iconSize: new L.Point(10, 10, true),\r\n                    className: \"waypoint\"\r\n                });\r\n\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                options.contextmenu = true;\r\n                options.contextmenuInheritItems = false;\r\n                if (markerType === MarkerType.Harbour) {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.EditingHarbour(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.DeletingHarbour(this) }\r\n                        }\r\n                    ];\r\n                } else {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.EditingWaypoint(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.DeletingWaypoint(this) }\r\n                        }\r\n                    ];\r\n                }\r\n            }\r\n\r\n            const marker = new L.Marker(wp.LatLng, options);\r\n            marker.addTo(this.Map);\r\n            marker.Waypoint = wp;\r\n            wp.marker = marker;\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                if (markerType === MarkerType.Dummy)\r\n                    marker.addEventListener(\"mouseout\",\r\n                        (e) => {\r\n                            if (e.target.Waypoint.IsDummy()) {\r\n                                mapViewModel.HoveredPolyine = undefined;\r\n                            }\r\n                        });\r\n                marker.addEventListener(\"drag\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        wp.SetLatLng(wp.marker.getLatLng());\r\n                    });\r\n                if (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy) {\r\n                    this.WaypointMarkers.push(wp.marker);\r\n                    wp.marker.Point = mapViewModel.Map.latLngToContainerPoint(wp.LatLng);\r\n                }\r\n                wp.marker.addEventListener(\"click\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        if (wp.IsDummy()) {\r\n                            mapViewModel.Waypoints.push(wp);\r\n                            wp.convertFromDummyHandle();\r\n                        }\r\n                        if (mapViewModel.GetMapMode() === MapMode.RouteDrawing) {\r\n                            if (!wp.IsInPolyline(mapViewModel.DrawingPolyline)) {\r\n                                ServerApi.WaypointConnections\r\n                                    .Connect(wp.Id(), mapViewModel.DrawingPolyline.Waypoints[0].Id());\r\n                                wp.AddToPolyline(mapViewModel.DrawingPolyline);\r\n                                removeFromPolyline(mapViewModel.DrawingPolyline, mapViewModel.DrawingLatLng);\r\n                                addDummyHandle(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            } else {\r\n                                removePolyline(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            }\r\n                        }\r\n                    });\r\n                wp.marker.addEventListener(\"dblclick\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        mapViewModel.DrawingPolyline = mapViewModel.AddPolyline(wp);\r\n                        mapViewModel.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                        mapViewModel.DrawingPolyline.addLatLng(mapViewModel.DrawingLatLng);\r\n                    });\r\n                if (markerType === MarkerType.Dummy)\r\n                    wp.marker.addOneTimeEventListener(\"drag\",\r\n                        (e: L.LeafletMouseEvent) => {\r\n                            wp.convertFromDummyHandle();\r\n                            mapViewModel.Waypoints.push(wp);\r\n                        });\r\n                //else if (markerType === MarkerType.Waypoint) {\r\n                //    wp.Name(`Wegpunkt ${mapViewModel.Waypoints().length + 1}`);\r\n                //}\r\n                wp.marker.addEventListener(\"dragend\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        wp.SaveToServer();\r\n                    });\r\n            } else if (markerType === MarkerType.Harbour) {\r\n                wp.marker.addEventListener(\"mouseover\",\r\n                    () => {\r\n                        if (mapViewModel.SelectedHarbour() !== undefined)\r\n                            mapViewModel.ShowRoute(wp);\r\n                    });\r\n                wp.marker.addEventListener(\"click\", () => mapViewModel.SelectedHarbour(wp as ClientModel.Harbour));\r\n            }\r\n        }\r\n    }\r\n\r\n    CreateHarbour();\r\n    CreateHarbour(name: string, latLng: L.LatLng);\r\n    CreateHarbour(name?: string, latLng?: L.LatLng) {\r\n        let h: Harbour;\r\n        if (latLng !== undefined)\r\n            h = new Harbour(latLng, this.Map as L.mapbox.Map);\r\n        else\r\n            h = new Harbour(this.Map as L.mapbox.Map);\r\n        h.Name(name);\r\n        this.InitializeWaypoint(h, MarkerType.Harbour);\r\n        return h;\r\n    }\r\n\r\n    SaveHarbour() {\r\n        const harbour: ClientModel.Harbour = this as any;\r\n        if (harbour.Id() === undefined) {\r\n            mapViewModel.Harbours.push(harbour);\r\n        }\r\n        harbour.SaveToServer()\r\n            .done(() => {\r\n                mapViewModel.EditingHarbour(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteHarbour() {\r\n        var h = mapViewModel.DeletingHarbour();\r\n        ServerApi.WaypointConnections\r\n            .Disconnect(h.Id())\r\n            .done(() => {\r\n                h.DeleteOnServer()\r\n                    .done(() => {\r\n                        h.RemoveFromMap();\r\n                        mapViewModel.Harbours.remove(h);\r\n                        mapViewModel.DeletingHarbour(undefined);\r\n                    });\r\n            });\r\n    }\r\n\r\n    SaveWaypoint() {\r\n        const waypoint: ClientModel.Waypoint = this as any;\r\n        waypoint.SaveToServer()\r\n            .done(() => {\r\n                mapViewModel.EditingWaypoint(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteWaypoint() {\r\n        var wp = mapViewModel.DeletingWaypoint();\r\n        ServerApi.WaypointConnections\r\n            .Disconnect(wp.Id())\r\n            .done(() => {\r\n                wp.DeleteOnServer()\r\n                    .done(() => {\r\n                        wp.RemoveFromMap();\r\n                        mapViewModel.Waypoints.remove(wp);\r\n                        mapViewModel.DeletingWaypoint(undefined);\r\n                    });\r\n            });\r\n    };\r\n\r\n\r\n    SaveJob() {\r\n        const job: ClientModel.Job = this as any;\r\n        const newJob = job.Id() === undefined;\r\n        job.SaveToServer()\r\n            .done(() => {\r\n                if (newJob) {\r\n                    mapViewModel.Jobs.push(mapViewModel.EditingJob());\r\n                    if (mapViewModel.EditingJob().SuperJobId() !== undefined)\r\n                        mapViewModel.GetJobById(mapViewModel.EditingJob().SuperJobId()).SubJobs.push(mapViewModel.EditingJob());\r\n                }\r\n                mapViewModel.EditingJob(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteJob() {\r\n        const job = mapViewModel.DeletingJob();\r\n        job.DeleteOnServer()\r\n            .done(() => {\r\n                mapViewModel.Jobs.remove(job);\r\n                if (job.SuperJobId() !== undefined)\r\n                    mapViewModel.GetJobById(job.SuperJobId()).SubJobs.remove(job);\r\n                mapViewModel.DeletingJob(undefined);\r\n            });\r\n    }\r\n\r\n\r\n    SaveLogBookEntry() {\r\n        const job: ClientModel.LogBookEntry = this as any;\r\n        const newLogBookEntry = job.Id() === undefined;\r\n        job.SaveToServer()\r\n            .done(() => {\r\n                if (newLogBookEntry) {\r\n                    mapViewModel.LogBookEntries.push(mapViewModel.EditingLogBookEntry());\r\n                }\r\n                mapViewModel.EditingLogBookEntry(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteLogBookEntry() {\r\n        const job = mapViewModel.DeletingLogBookEntry();\r\n        job.DeleteOnServer()\r\n            .done(() => {\r\n                mapViewModel.LogBookEntries.remove(job);\r\n                mapViewModel.DeletingLogBookEntry(undefined);\r\n            });\r\n    }\r\n\r\n\r\n    DrawingPolyline: L.Polyline;\r\n    Polylines = new Array<L.Polyline>();\r\n    DeletingPerson = ko.observable<Person>();\r\n    EditingPerson = ko.observable<Person>();\r\n    EditingHarbour = ko.observable<Harbour>();\r\n    DeletingHarbour = ko.observable<Harbour>();\r\n    EditingWaypoint = ko.observable<Waypoint>();\r\n    DeletingWaypoint = ko.observable<Waypoint>();\r\n    DeletingJob = ko.observable<Job>();\r\n    EditingJob = ko.observable<Job>();\r\n    EditingLogBookEntry = ko.observable<ClientModel.LogBookEntry>();\r\n    DeletingLogBookEntry = ko.observable<ClientModel.LogBookEntry>();\r\n    DetailedLogBookEntry = ko.observable<ClientModel.LogBookEntry>();\r\n    WaypointMarkers = new Array();\r\n    HoveredPolyine: L.Polyline;\r\n\r\n    SetOptionKey(option, item: Entity) {\r\n        ko.applyBindingsToNode(option, { attr: { \"data-id\": item.Id } }, item);\r\n        ko.applyBindingsToNode(option, { attr: { \"value\": item.Id } }, item);\r\n    };\r\n\r\n\r\n    SavePerson() {\r\n        mapViewModel.EditingPerson().SaveToServer().done(() => {\r\n            mapViewModel.Persons.push(mapViewModel.EditingPerson());\r\n            mapViewModel.EditingPerson(undefined);\r\n        });\r\n\r\n    }\r\n\r\n    DeletePerson() {\r\n        mapViewModel.DeletingPerson()\r\n            .DeleteOnServer()\r\n            .done(() => {\r\n                mapViewModel.Persons.remove(mapViewModel.DeletingPerson());\r\n                mapViewModel.DeletingPerson(undefined);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nvar mapViewModel = new MapViewModel(MapMode.View);\r\nvar dropzoneModalOpenedByDrag = false;\r\n\r\nvar dropzoneModal = $(\"#dropzoneModal\");\r\nvar editingLogBookEntryModal = $(\"#editingLogBookEntryModal\");\r\nvar detailedLogBookEntryModal = $(\"#detailedLogBookEntryModal\");\r\nvar editingHarbourModal = $(\"#editingHarbourModal\");\r\nvar deletingHarbourModal = $(\"#deletingHarbourModal\");\r\nvar editingWaypointModal = $(\"#editingWaypointModal\");\r\nvar deletingWaypointModal = $(\"#deletingWaypointModal\");\r\nvar deletingJobModal = $(\"#deletingJobModal\");\r\nvar editingJobModal = $(\"#editingJobModal\");\r\nvar jobOverviewModal = $(\"#jobOverviewModal\");\r\nvar editingPersonModal = $(\"#editingPersonModal\");\r\nvar deletingPersonModal = $(\"#deletingPersonModal\");\r\nvar personOverviewModal = $(\"#personOverviewModal\");\r\nvar dropzone: Dropzone;\r\nvar hasDrag = false;\r\nvar uploadModalVisible = false;\r\nvar pswp = $(\".pswp\")[0]; var personDeails = $(\"#personDetails\");\r\nimport Person = ClientModel.Person;\r\n\r\n\r\nvar deletePerson = $(\"#deletePerson\");\r\n\r\nvar leftSidebar = new Sidebar($(\"#leftSidebar\"));\r\nvar rightSidebar = new Sidebar($(\"#rightSidebar\"));\r\nvar bottomSidebar = new Sidebar($(\"#bottomSidebar\"));\r\nvar harbourInfo = $(\"#harbourInfo\");\r\nDropzone.options.dropzone =\r\n    {\r\n        acceptedFiles: \"image/jpeg,image/png\",\r\n        dictInvalidFileType: \"Dieser Dateityp wird nicht unterstützt\",\r\n        dictDefaultMessage: \"Dateien hier ablegen\",\r\n        init() {\r\n            dropzone = this;\r\n            dropzone.on(\"success\",\r\n                (e, data: ServerModel.AlbumImage) => {\r\n                    var image = new ClientModel.Image().LoadFromServerEntity(data.Image);\r\n                    mapViewModel.Images.push(image);\r\n                    mapViewModel.GetAlbumById(data.AlbumId).Images.push(image);\r\n                });\r\n            dropzone.on(\"queuecomplete\",\r\n                () => {\r\n                    if (dropzoneModalOpenedByDrag)\r\n                        dropzoneModal.modal(\"hide\");\r\n                });\r\n            dropzone.on(\"dragover\",\r\n                () => {\r\n                    hasDrag = true;\r\n                });\r\n        }\r\n    };\r\n\r\ndocument.ondragenter =\r\n    (e: DragEvent) => {\r\n        if (!uploadModalVisible &&\r\n            !hasDrag &&\r\n            !dropzoneModalOpenedByDrag &&\r\n            dropzoneModal.is(\":not(.in)\") &&\r\n            e.dataTransfer.types[0] === \"Files\" &&\r\n            mapViewModel.SelectedHarbour() !== undefined) {\r\n            dropzoneModal.modal(\"show\");\r\n            uploadModalVisible = true;\r\n            dropzoneModalOpenedByDrag = true;\r\n        }\r\n\r\n        hasDrag = true;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndocument.ondragover =\r\n    (e: DragEvent) => {\r\n        hasDrag = true;\r\n    };\r\ndocument.ondragleave =\r\n    (e: DragEvent) => {\r\n        if (uploadModalVisible && hasDrag && dropzoneModalOpenedByDrag && dropzone.getQueuedFiles().length === 0 ||\r\n            dropzone.getUploadingFiles().length === 0) {\r\n            hasDrag = false;\r\n            window.setTimeout(() => {\r\n                if (!hasDrag) {\r\n                    dropzoneModal.modal(\"hide\");\r\n                    uploadModalVisible = false;\r\n                }\r\n            },\r\n                1000);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndropzoneModal.on(\"hide.bs.modal\",\r\n    e => {\r\n        if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            alert(\"Das Fenster kann nicht geschlossen werden, während Dateien hochgeladen werden.\");\r\n            return false;\r\n        } else {\r\n            dropzone.removeAllFiles();\r\n            dropzoneModalOpenedByDrag = false;\r\n        }\r\n    });\r\nvar gallery: PhotoSwipe<PhotoSwipe.Options>;\r\n\r\n$(\".modal\").on(\"hidden.bs.modal\", function (event) {\r\n    $(this).removeClass(\"fv-modal-stack\");\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") - 1);\r\n});\r\n\r\n\r\n$(\".modal\").on(\"shown.bs.modal\", function (event) {\r\n\r\n    // keep track of the number of open modals\r\n\r\n    if (typeof ($(\"body\").data(\"fv_open_modals\")) == \"undefined\") {\r\n        $(\"body\").data(\"fv_open_modals\", 0);\r\n    }\r\n\r\n\r\n    // if the z-index of this modal has been set, ignore.\r\n\r\n    if ($(this).hasClass(\"fv-modal-stack\")) {\r\n        return;\r\n    }\r\n\r\n    $(this).addClass(\"fv-modal-stack\");\r\n\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") + 1);\r\n\r\n    $(this).css(\"z-index\", 1040 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n    $(\".modal-backdrop\").not(\".fv-modal-stack\")\r\n        .css(\"z-index\", 1039 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n\r\n    $(\".modal-backdrop\").not(\"fv-modal-stack\")\r\n        .addClass(\"fv-modal-stack\");\r\n\r\n});\r\n\r\ninterface KnockoutBindingHandlers {\r\n    daterange?: KnockoutBindingHandler;\r\n}\r\n\r\nko.bindingHandlers.daterange = {\r\n    init: function (element: any, valueAccessor: () => any, allBindingsAccessor?: KnockoutAllBindingsAccessor, viewModel?: any, bindingContext?: KnockoutBindingContext) {\r\n        let value = valueAccessor()();\r\n        if (value === undefined)\r\n            valueAccessor()(new Date().toJSON());\r\n        value = valueAccessor()();\r\n        $(element)\r\n            .daterangepicker({\r\n                \"singleDatePicker\": true,\r\n                \"timePicker\": true,\r\n                \"timePicker24Hour\": true,\r\n                \"autoApply\": true,\r\n                \"startDate\": value,\r\n                \"endDate\": value\r\n            }, function (start, end, label) {\r\n                valueAccessor()(start._d.toJSON());\r\n            });\r\n    },\r\n    update: function (element: any, valueAccessor: () => any, allBindingsAccessor?: KnockoutAllBindingsAccessor, viewModel?: any, bindingContext?: KnockoutBindingContext) {\r\n        $(element).data(\"daterangepicker\").setStartDate(moment(valueAccessor()()));\r\n    }\r\n};\r\n"],"sourceRoot":"/source/"}