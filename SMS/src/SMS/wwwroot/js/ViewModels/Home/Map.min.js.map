{"version":3,"sources":["/source/wwwroot/js/ViewModels/Home/ViewModels/Home/Map.ts"],"names":["getMiddle","pol","start","getLatLngs","end","L","LatLng","lat","lng","splitPolyline","polyline","Waypoints","length","DummyHandle","Waypoint","w2","w3","RemoveFromPolyline","undefined","AddToPolyline","addDummyHandle","mapViewModel","AddPolyline","Error","removePolyline","_i","_a","waypoint","RemoveFromMap","Map","removeLayer","CreateWaypoint","MarkerType","Dummy","redrawPolyline","middleLatLng","Longitude","Latitude","SetLatLng","redraw","removeFromPolyline","latLng","removeFromArray","arr","obj","tmpArr","Array","arr_1","item","push","pop","shift","SHarbour","ServerModel","Harbour","ClientModel","Job","WaypointDistance","MapMode","MapViewModel","mapMode","_this","this","routePolyline","ko","observable","IsLastTakInRoute","computed","read","trip","SelectedTrip","h","SelectedHarbour","Tacks","Start","deferEvaluation","GetRouteDistance","distance","tack","isNaN","Distance","TopJobs","Jobs","filter","j","SuperJobId","IsInViewMode","View","IsInAdminMode","Admin","WaypointsLoaded","WaypointConnectionsLoaded","PersonsLoaded","JobsLoaded","TripsLoaded","AddressesLoaded","ImagesLoaded","AlbumsLoaded","WaypointTacksLoaded","TacksLoaded","LocationsLoaded","observableArray","WaypointConnections","Harbours","Persons","Trips","Addresses","Images","Locations","Supermarkets","Restaurants","Albums","SelectedWaypoint","SelectedPerson","SelectedJob","SelectedAddress","SelectedImage","SelectedTack","SelectedLocation","SelectedSupermarket","SelectedRestaurant","RemoveHarbour","remove","RemoveWaypoint","RemovePolyline","DrawingPolyline","routeFixed","noRevertToPreviousBounds","Polylines","EditingHarbour","DeletingHarbour","EditingWaypoint","DeletingWaypoint","DeletingJob","EditingJob","WaypointMarkers","mapbox","accessToken","subscribe","InitializeMap","mapOptions","contextmenu","contextmenuItems","text","callback","e","console","log","CreateHarbour","latlng","map","setView","tileLayer","addTo","LoadData","newHarbour","CalculateDistances","sort","h1","h2","HideRoute","harbour","editingHarbourModal","modal","SaveState","RevertState","Id","marker","deletingHarbourModal","editingWaypointModal","deletingWaypointModal","job","editingJobModal","deletingJobModal","rightSidebar","Hide","Show","t","bottomSidebar","addEventListener","GetMapMode","RouteDrawing","DrawingLatLng","Point","distanceTo","containerPoint","setOpacity","IsDummy","HoveredPolyine","p1","latLngToContainerPoint","p2","containerPointToLatLng","LineUtil","closestPointOnSegment","startId_1","SaveToServer","done","w","ServerApi","WaypointConnectionApi","GetDefault","Connect","addLatLng","originalEvent","cancelBubble","preventDefault","stopPropagation","$","document","keyup","keyCode","getLatLng","prototype","StartRoute","Trip","Tack","color","AddToRoute","targetHarbour","lastTack","startHarbour","RouteDistance","wp","RoutePrecessor","End","RedrawTrip","PullTack","tacks","index","indexOf","prevTack","tmpEnd","splice","PushTack","nextTack","RemoveTack","WaypointApi","Get","d","d_1","sEntity","Type","GetType","LoadFromServerEntity","Name","InitializeModel","d_2","PersonApi","d_3","Person","JobApi","d_4","TripApi","d_5","AddressApi","d_6","Address","ImageApi","d_7","Image","AlbumApi","d_8","Album","TackApi","d_9","LocationApi","d_10","Location","Restaurant","Supermarket","entity","AssignedToId","AssignedTo","GetPersonById","TripId","GetTripById","SuperJob","GetJobById","SubJobs","_b","_c","GetAlbumById","AlbumId","_d","_e","GetAddressById","AddressId","GetHarbourById","HarbourId","_f","_g","ParentAlbumId","_h","_j","connection","GetWayPointById","Waypoint1Id","Waypoint2Id","CreateMarker","p","enable","disable","GetWaypointById","id","GetImageById","GetTackById","GetLocationById","InitGallery","items","currImage","data","Height","Width","src","Path","gallery","PhotoSwipe","pswp","PhotoSwipeUI_Default","getThumbBoundsFn","elem","padding","parseFloat","window","getComputedStyle","getPropertyValue","replace","scrollIntoView","bounds","getBoundingClientRect","x","left","y","top","screenY","width","init","AddHarbour","getCenter","arg","Polyline","target","waypoints","calculating","calculated","calculateRoute","Precessor","minimalDist","Number","POSITIVE_INFINITY","minimalWP","calculating_1","_k","ConnectedWayPoints","cWP","dist","_l","calculated_1","Math","round","_m","calculated_2","ShowRoute","highlightedRoute","latLngs","bindLabel","toString","noHide","FitBounds","getBounds","currentBounds","contains","previousBounds","fitBounds","force","tmpBounds_1","setTimeout","FixRoute","markerType","InitializeWaypoint","options","draggable","opacity","icon","Icon","iconUrl","iconSize","className","contextmenuInheritItems","context","Marker","convertFromDummyHandle","IsInPolyline","addOneTimeEventListener","name","SaveHarbour","DeleteHarbour","Disconnect","DeleteOnServer","SaveWaypoint","DeleteWaypoint","SaveJob","newJob","DeleteJob","applyBindings","dropzoneModalOpenedByDrag","dropzoneModal","jobOverviewModal","dropzone","hasDrag","uploadModalVisible","leftSidebar","Sidebar","harbourInfo","Dropzone","acceptedFiles","dictInvalidFileType","dictDefaultMessage","on","image","ondragenter","is","dataTransfer","types","ondragover","ondragleave","getQueuedFiles","getUploadingFiles","stopImmediatePropagation","alert","removeAllFiles","event","removeClass","hasClass","addClass","css","not"],"mappings":"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","file":"wwwroot/js/ViewModels/Home/Map.min.js","sourcesContent":["import SHarbour = ServerModel.Harbour;\r\n\r\nimport Waypoint = ClientModel.Waypoint;\r\nimport Harbour = ClientModel.Harbour;\r\nimport Job = ClientModel.Job;\r\nimport WaypointDistance = ClientModel.WaypointDistance;\r\n\r\nfunction getMiddle(pol: L.Polyline): L.LatLng {\r\n    const start = pol.getLatLngs()[0];\r\n    const end = pol.getLatLngs()[1];\r\n    return new L.LatLng(start.lat + ((end.lat - start.lat) / 2), start.lng + ((end.lng - start.lng) / 2));\r\n}\r\n\r\nfunction splitPolyline(polyline: L.Polyline) {\r\n    if (polyline.Waypoints.length === 2 && polyline.DummyHandle instanceof Waypoint) {\r\n        const w1 = polyline.Waypoints[0];\r\n        const w2 = polyline.DummyHandle;\r\n        const w3 = polyline.Waypoints[1];\r\n        w2.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle = undefined;\r\n        w2.AddToPolyline(polyline);\r\n        w3.RemoveFromPolyline(polyline);\r\n        addDummyHandle(polyline);\r\n        addDummyHandle(mapViewModel.AddPolyline([w2, w3]));\r\n        return;\r\n    }\r\n    throw new Error(\"Cannot split polyline. Polyline has no dummy handle or less or more than 2 waypoints\");\r\n}\r\n\r\n\r\nfunction removePolyline(polyline: L.Polyline) {\r\n    for (let waypoint of polyline.Waypoints) {\r\n        waypoint.RemoveFromPolyline(polyline);\r\n    }\r\n    if (polyline.DummyHandle !== undefined) {\r\n        polyline.DummyHandle.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle.RemoveFromMap();\r\n    }\r\n    mapViewModel.Map.removeLayer(polyline);\r\n}\r\n\r\nfunction addDummyHandle(polyline: L.Polyline) {\r\n    if (polyline.DummyHandle === undefined) {\r\n        polyline.DummyHandle = mapViewModel.CreateWaypoint(getMiddle(polyline), MarkerType.Dummy);\r\n        polyline.DummyHandle.AddToPolyline(polyline);\r\n    }\r\n}\r\n\r\nfunction redrawPolyline(polyline: L.Polyline) {\r\n    const middleLatLng = getMiddle(polyline);\r\n    if (polyline.DummyHandle === undefined)\r\n        addDummyHandle(polyline);\r\n    if (polyline.DummyHandle.Longitude() !== middleLatLng.lng || polyline.DummyHandle.Latitude() !== middleLatLng.lat)\r\n        polyline.DummyHandle.SetLatLng(middleLatLng);\r\n    else\r\n        polyline.redraw();\r\n}\r\n\r\nfunction removeFromPolyline(polyline: L.Polyline, latLng: L.LatLng) {\r\n    removeFromArray(polyline.getLatLngs(), latLng);\r\n    polyline.redraw();\r\n}\r\n\r\nfunction removeFromArray<T>(arr: T[], obj: T): boolean {\r\n    const tmpArr = new Array<T>();\r\n    for (let item of arr) {\r\n        if (item !== obj)\r\n            tmpArr.push(item);\r\n    }\r\n    if (tmpArr.length === arr.length)\r\n        return false;\r\n    while (arr.pop()) {\r\n    }\r\n    while (tmpArr.length > 0) {\r\n        arr.push(tmpArr.shift());\r\n    }\r\n    return true;\r\n}\r\n\r\nenum MapMode {\r\n    Admin,\r\n    View,\r\n    TripPlanning,\r\n    RouteDrawing\r\n}\r\n\r\ndeclare namespace L {\r\n    export interface Polyline extends Path {\r\n\r\n        Waypoints: Array<Waypoint>;\r\n        DummyHandle: Waypoint;\r\n    }\r\n\r\n    export interface LatLng {\r\n        Polylines: Polyline[];\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface Marker {\r\n        Waypoint: Waypoint;\r\n        Point: L.Point;\r\n        _icon;\r\n    }\r\n\r\n    export interface CircleMarker {\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface PathOptions {\r\n        Draggable?: boolean;\r\n    }\r\n\r\n    export interface MarkerOptions {\r\n        contextmenu?: boolean;\r\n        contextmenuWidth?: number;\r\n        contextmenuAnchor?: L.Point | L.Point[];\r\n        contextmenuItems?: contextmenuItem[];\r\n        contextmenuInheritItems: boolean;\r\n\r\n    }\r\n\r\n    export interface contextmenuItem {\r\n        text?: string;\r\n        icon?: string;\r\n        iconCls?: string;\r\n        callback?: Function;\r\n        context?: Object;\r\n        disabled?: boolean;\r\n        separator?: boolean;\r\n        hideOnSelect?: boolean;\r\n        index?: number;\r\n    }\r\n\r\n\r\n}\r\n\r\nclass MapViewModel {\r\n    constructor(mapMode: MapMode) {\r\n        L.mapbox\r\n            .accessToken =\r\n            \"pk.eyJ1IjoiZGFuaWVsLWt1b24iLCJhIjoiY2lldnVtY29iMDBiOHQxbTBvZzBqZWl6cCJ9.UEc2YqH59pB1YTpv22vg8A\";\r\n        this.MapMode(mapMode);\r\n        this.MapMode.subscribe(() => {\r\n            this.InitializeMap();\r\n        });\r\n        const mapOptions: L.mapbox.MapOptions = {\r\n            contextmenu: mapMode === MapMode.Admin,\r\n            contextmenuItems: [\r\n                {\r\n                    text: \"Neuer Hafen\",\r\n                    callback: function (e) {\r\n                        console.log(e);\r\n                        mapViewModel.EditingHarbour(mapViewModel.CreateHarbour(\"\", e.latlng))\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        this.Map = L.mapbox.map(\"map\",\r\n            \"mapbox.streets\",\r\n            mapOptions);\r\n        this.Map.setView([54.40774166820069, 10.523529052734373], 9);\r\n        L.tileLayer(\"http://t1.openseamap.org/seamark/{z}/{x}/{y}.png\").addTo(this.Map);\r\n        this.LoadData();\r\n        this.SelectedHarbour.subscribe((newHarbour) => {\r\n            if (newHarbour !== undefined) {\r\n                mapViewModel.CalculateDistances(newHarbour);\r\n                mapViewModel.Harbours.sort((h1, h2) => h1.Distance() - h2.Distance());\r\n            } else {\r\n                for (let h of mapViewModel.Harbours()) {\r\n                    h.Distance(0);\r\n                }\r\n            }\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        });\r\n        this.EditingHarbour.subscribe((harbour) => {\r\n            if (harbour === undefined) {\r\n                editingHarbourModal.modal(\"hide\");\r\n            } else {\r\n                harbour.SaveState();\r\n                editingHarbourModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingHarbour.subscribe((harbour) => {\r\n            if (harbour !== undefined) {\r\n                harbour.RevertState(true);\r\n                if (harbour.Id() === undefined)\r\n                    mapViewModel.Map.removeLayer(harbour.marker);\r\n            }\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingHarbour.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingHarbourModal.modal(\"hide\");\r\n            } else {\r\n                deletingHarbourModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingWaypoint.subscribe((waypoint) => {\r\n            if (waypoint === undefined) {\r\n                editingWaypointModal.modal(\"hide\");\r\n            } else {\r\n                waypoint.SaveState();\r\n                editingWaypointModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingWaypoint.subscribe((waypoint) => {\r\n            if (mapViewModel.EditingWaypoint() !== undefined)\r\n                mapViewModel.EditingWaypoint().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingWaypoint.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingWaypointModal.modal(\"hide\");\r\n            } else {\r\n                deletingWaypointModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingJob.subscribe((job) => {\r\n            if (job === undefined) {\r\n                editingJobModal.modal(\"hide\");\r\n            } else {\r\n                job.SaveState();\r\n                editingJobModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingJob.subscribe((job) => {\r\n            if (mapViewModel.EditingJob() !== undefined)\r\n                mapViewModel.EditingJob().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingJob.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingJobModal.modal(\"hide\");\r\n            } else {\r\n                deletingJobModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.SelectedHarbour.subscribe((h) => {\r\n            if (h === undefined)\r\n                rightSidebar.Hide();\r\n            else\r\n                rightSidebar.Show();\r\n\r\n        });\r\n        this.SelectedTrip.subscribe((t) => {\r\n            if (t === undefined)\r\n                bottomSidebar.Hide();\r\n            else\r\n                bottomSidebar.Show();\r\n        });\r\n        this.Map.addEventListener(\"mousemove\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    this.DrawingLatLng.lat = e.latlng.lat;\r\n                    this.DrawingLatLng.lng = e.latlng.lng;\r\n                    this.DrawingPolyline.redraw();\r\n                }\r\n                if (this.MapMode() === MapMode.Admin)\r\n                    for (let marker of this.WaypointMarkers) {\r\n                        if (marker.Point.distanceTo(e.containerPoint) < 150)\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 1);\r\n                        else\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 0.8);\r\n                    }\r\n                if (mapViewModel.HoveredPolyine !== undefined && mapViewModel.HoveredPolyine.DummyHandle !== undefined) {\r\n                    const polyline = mapViewModel.HoveredPolyine;\r\n                    const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n                    const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n                    if (p1.distanceTo(e.containerPoint) < 20 || p2.distanceTo(e.containerPoint) < 20) {\r\n                        mapViewModel.HoveredPolyine = undefined;\r\n                    } else {\r\n                        mapViewModel.HoveredPolyine.DummyHandle.marker.setOpacity(0.8);\r\n                        mapViewModel.HoveredPolyine.DummyHandle\r\n                            .SetLatLng(mapViewModel.Map\r\n                                .containerPointToLatLng(L.LineUtil\r\n                                    .closestPointOnSegment(e.containerPoint,\r\n                                    p1,\r\n                                    p2)),\r\n                            false);\r\n                    }\r\n                }\r\n\r\n            });\r\n        this.Map.addEventListener(\"click\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    const waypoint = mapViewModel.CreateWaypoint(e.latlng, MarkerType.Waypoint);\r\n                    const startId = this.DrawingPolyline.Waypoints[0].Id();\r\n                    waypoint.SaveToServer()\r\n                        .done(w => {\r\n                            ServerApi.WaypointConnectionApi.GetDefault()\r\n                                .Connect(w.Id, startId);\r\n                        });\r\n                    waypoint.AddToPolyline(this.DrawingPolyline);\r\n                    addDummyHandle(this.DrawingPolyline);\r\n                    removeFromPolyline(this.DrawingPolyline, this.DrawingLatLng);\r\n                    this.DrawingPolyline = this.AddPolyline(waypoint);\r\n                    this.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                    this.DrawingPolyline.addLatLng(this.DrawingLatLng);\r\n                }\r\n            });\r\n\r\n        this.Map.addEventListener(\"dblclick\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    e.originalEvent.cancelBubble = true;\r\n                    e.originalEvent.preventDefault();\r\n                    e.originalEvent.stopPropagation();\r\n                    this.DrawingPolyline.addLatLng(e.latlng);\r\n                    this.DrawingLatLng = e.latlng;\r\n                }\r\n            });\r\n        $(document)\r\n            .keyup((e: JQueryKeyEventObject) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    if (e.keyCode === 27) {\r\n                        this.RemovePolyline(this.DrawingPolyline);\r\n                    }\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"move\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"zoom\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n    }\r\n\r\n    private routePolyline = ko.observable<L.Polyline>();\r\n\r\n    StartRoute() {\r\n        const trip = new ClientModel.Trip();\r\n        const tack = new ClientModel.Tack();\r\n        const harbour = mapViewModel.SelectedHarbour();\r\n        tack.Start(harbour);\r\n        trip.Tacks.push(tack);\r\n        mapViewModel.SelectedTrip(trip);\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n    }\r\n\r\n    IsLastTakInRoute = ko.computed({\r\n        read: () => {\r\n            var trip = mapViewModel.SelectedTrip();\r\n            var h = mapViewModel.SelectedHarbour();\r\n            return trip !== undefined && h !== undefined && trip.Tacks()[trip.Tacks().length - 1].Start() === h;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    GetRouteDistance = ko.computed({\r\n        read: () => {\r\n            var distance = 0;\r\n            for (let tack of mapViewModel.SelectedTrip().Tacks()) {\r\n                if (!isNaN(tack.Distance()))\r\n                    distance += tack.Distance();\r\n            }\r\n            return distance;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    TopJobs = ko.computed({\r\n        read: () => {\r\n            return mapViewModel.Jobs().filter((j) => j.SuperJobId() === undefined);\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    AddToRoute() {\r\n        const trip = mapViewModel.SelectedTrip();\r\n        const targetHarbour = mapViewModel.SelectedHarbour();\r\n        const tack = new ClientModel.Tack();\r\n        const lastTack = trip.Tacks()[trip.Tacks().length - 1];\r\n        const startHarbour = lastTack.Start();\r\n        mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n        lastTack.Distance(startHarbour.RouteDistance());\r\n        let wp: ClientModel.Waypoint = startHarbour;\r\n        mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n            wp = wp.RoutePrecessor();\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        }\r\n\r\n        lastTack.End(targetHarbour);\r\n        tack.Start(targetHarbour);\r\n        trip.Tacks.push(tack);\r\n    }\r\n\r\n    RedrawTrip() {\r\n        mapViewModel.Map.removeLayer(mapViewModel.routePolyline());\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n        for (let tack of mapViewModel.SelectedTrip().Tacks()) {\r\n            const targetHarbour = tack.End();\r\n            const startHarbour = tack.Start();\r\n            if (targetHarbour === undefined)\r\n                continue;\r\n            mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n            tack.Distance(startHarbour.RouteDistance());\r\n            let wp: ClientModel.Waypoint = startHarbour;\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n                wp = wp.RoutePrecessor();\r\n                mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            }\r\n        }\r\n    }\r\n\r\n    PullTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        var tmpEnd = tack.End();\r\n        tack.End(prevTack.Start());\r\n        prevTack.End(tmpEnd);\r\n        if (index > 1) {\r\n            tacks()[index - 2].End(tack.Start());\r\n        }\r\n        tacks.splice(index - 1, 2, tack, prevTack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    PushTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const nextTack = tacks()[index + 1];\r\n        tack.End(nextTack.End());\r\n        nextTack.End(tack.Start());\r\n        if (index > 0) {\r\n            tacks()[index - 1].End(nextTack.Start());\r\n        }\r\n        tacks.splice(index, 2, nextTack, tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    RemoveTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        if (prevTack !== undefined)\r\n            prevTack.End(tack.End());\r\n        tacks.remove(tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    IsInViewMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.View;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    IsInAdminMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.Admin;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n\r\n    LoadData() {\r\n        ServerApi.WaypointApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    if (sEntity.Type === ServerModel.Waypoint.GetType())\r\n                        this.Waypoints.push(mapViewModel\r\n                            .CreateWaypoint(L.latLng(sEntity.Latitude, sEntity.Longitude), MarkerType.Waypoint)\r\n                            .LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === ServerModel.Harbour.GetType()) {\r\n                        const harbour = mapViewModel\r\n                            .CreateHarbour(sEntity.Name, L.latLng(sEntity.Latitude, sEntity.Longitude))\r\n                            .LoadFromServerEntity(sEntity as SHarbour);\r\n                        this.Harbours.push(harbour);\r\n                    }\r\n                }\r\n\r\n                this.WaypointsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.WaypointConnectionApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.WaypointConnections.push(sEntity);\r\n                }\r\n                this.WaypointConnectionsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.PersonApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Persons.push(new ClientModel.Person().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.PersonsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.JobApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Jobs.push(new ClientModel.Job().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.JobsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.TripApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Trips.push(new ClientModel.Trip().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TripsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AddressApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Addresses.push(new ClientModel.Address().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AddressesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.ImageApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Images.push(new ClientModel.Image().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.ImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AlbumApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Albums.push(new ClientModel.Album().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AlbumsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        //ServerApi.WaypointTackApi.GetDefault().Get().done(d => {\r\n        //    for (let sEntity of d) { this.WaypointTacks.push(new ClientModel.WaypointTack().LoadFromServerEntity(sEntity)); }\r\n        //    this.WaypointTacksLoaded = true;\r\n        //    this.InitialozeModel();\r\n        //});\r\n        ServerApi.TackApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Tacks.push(new ClientModel.Tack().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TacksLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.LocationApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    if (sEntity.Type === ServerModel.Location.GetType())\r\n                        this.Locations.push(new ClientModel.Location().LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === ServerModel.Restaurant.GetType())\r\n                        this.Restaurants.push(new ClientModel.Restaurant().LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === ServerModel.Supermarket.GetType())\r\n                        this.Supermarkets.push(new ClientModel.Supermarket().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.LocationsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n    }\r\n\r\n    InitializeModel() {\r\n        if (this.WaypointsLoaded &&\r\n            this.WaypointConnectionsLoaded &&\r\n            this.PersonsLoaded &&\r\n            this.JobsLoaded &&\r\n            this.TripsLoaded &&\r\n            this.AddressesLoaded &&\r\n            this.ImagesLoaded &&\r\n            this.AlbumsLoaded &&\r\n            //this.WaypointTacksLoaded &&\r\n            this.TacksLoaded &&\r\n            this.LocationsLoaded) {\r\n            for (let entity of this.Jobs()) {\r\n                if (entity.AssignedToId() !== undefined)\r\n                    entity.AssignedTo(this.GetPersonById(entity.AssignedToId()));\r\n                if (entity.TripId() !== undefined)\r\n                    entity.Trip(this.GetTripById(entity.TripId()));\r\n                if (entity.SuperJobId() !== undefined) {\r\n                    entity.SuperJob(this.GetJobById(entity.SuperJobId()));\r\n                    entity.SuperJob().SubJobs.push(entity);\r\n                }\r\n            }\r\n            for (let entity of this.Harbours()) {\r\n                entity.Album(this.GetAlbumById(entity.AlbumId()));\r\n            }\r\n            for (let entity of this.Locations()) {\r\n                entity.Address(this.GetAddressById(entity.AddressId()));\r\n                this.GetHarbourById(entity.HarbourId()).Locations.push(entity);\r\n            }\r\n            for (let entity of this.Images()) {\r\n                this.GetAlbumById(entity.ParentAlbumId()).Images.push(entity);\r\n            }\r\n            for (let connection of mapViewModel.WaypointConnections()) {\r\n                const polyline = mapViewModel.AddPolyline([\r\n                    mapViewModel.GetWayPointById(connection.Waypoint1Id), mapViewModel\r\n                        .GetWayPointById(connection.Waypoint2Id)\r\n                ]);\r\n                addDummyHandle(polyline);\r\n            }\r\n            $(\"#loadingOverlay\").remove();\r\n        }\r\n    }\r\n\r\n    InitializeMap() {\r\n        mapViewModel.SelectedHarbour(undefined);\r\n        for (let wp of mapViewModel.Waypoints()) {\r\n            if (wp.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(wp.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Waypoint, wp);\r\n        }\r\n        for (let h of mapViewModel.Harbours()) {\r\n            if (h.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(h.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Harbour, h);\r\n        }\r\n        for (let p of mapViewModel.Polylines) {\r\n            if (p.DummyHandle.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(p.DummyHandle.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Dummy, p.DummyHandle);\r\n        }\r\n        if (mapViewModel.MapMode() === MapMode.Admin) {\r\n            for (let p of mapViewModel.Polylines) {\r\n                p.addTo(mapViewModel.Map);\r\n            }\r\n            mapViewModel.Map.contextmenu.enable();\r\n        } else {\r\n            for (let p of mapViewModel.Polylines) {\r\n                mapViewModel.Map.removeLayer(p);\r\n            }\r\n            mapViewModel.Map.contextmenu.disable();\r\n        }\r\n    }\r\n\r\n    Map: L.mapbox.Map;\r\n\r\n    GetWaypointById(id: number): ClientModel.Waypoint {\r\n        for (let entity of this.Waypoints()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Waypoint with id \" + id + \" found\";\r\n    }\r\n\r\n    GetHarbourById(id: number): ClientModel.Harbour {\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Harbour with id \" + id + \" found\";\r\n    }\r\n\r\n    GetPersonById(id: number): ClientModel.Person {\r\n        for (let entity of this.Persons()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Person with id \" + id + \" found\";\r\n    }\r\n\r\n    GetJobById(id: number): ClientModel.Job {\r\n        for (let entity of this.Jobs()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Job with id \" + id + \" found\";\r\n    }\r\n\r\n    GetTripById(id: number): ClientModel.Trip {\r\n        for (let entity of this.Trips()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Trip with id \" + id + \" found\";\r\n    }\r\n\r\n    GetAddressById(id: number): ClientModel.Address {\r\n        for (let entity of this.Addresses()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Address with id \" + id + \" found\";\r\n    }\r\n\r\n    GetImageById(id: number): ClientModel.Image {\r\n        for (let entity of this.Images()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Image with id \" + id + \" found\";\r\n    }\r\n\r\n    GetTackById(id: number): ClientModel.Tack {\r\n        for (let entity of this.Tacks()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n    }\r\n\r\n    GetAlbumById(id: number): ClientModel.Album {\r\n        for (let entity of this.Albums()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n    }\r\n\r\n    GetLocationById(id: number): ClientModel.Location {\r\n        for (let entity of this.Locations()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Location with id \" + id + \" found\";\r\n    }\r\n\r\n    WaypointsLoaded = false;\r\n    WaypointConnectionsLoaded = false;\r\n    PersonsLoaded = false;\r\n    JobsLoaded = false;\r\n    TripsLoaded = false;\r\n    AddressesLoaded = false;\r\n    ImagesLoaded = false;\r\n    AlbumsLoaded = false;\r\n    WaypointTacksLoaded = false;\r\n    TacksLoaded = false;\r\n    LocationsLoaded = false;\r\n\r\n    Waypoints = ko.observableArray<ClientModel.Waypoint>();\r\n    WaypointConnections = ko.observableArray<ServerModel.WaypointConnection>();\r\n    Harbours = ko.observableArray<ClientModel.Harbour>();\r\n    Persons = ko.observableArray<ClientModel.Person>();\r\n    Jobs = ko.observableArray<ClientModel.Job>();\r\n    Trips = ko.observableArray<ClientModel.Trip>();\r\n    Addresses = ko.observableArray<ClientModel.Address>();\r\n    Images = ko.observableArray<ClientModel.Image>();\r\n    Tacks = ko.observableArray<ClientModel.Tack>();\r\n    Locations = ko.observableArray<ClientModel.Location>();\r\n    Supermarkets = ko.observableArray<ClientModel.Supermarket>();\r\n    Restaurants = ko.observableArray<ClientModel.Restaurant>();\r\n    Albums = ko.observableArray<ClientModel.Album>();\r\n\r\n\r\n    SelectedWaypoint = ko.observable<ClientModel.Waypoint>();\r\n    SelectedHarbour = ko.observable<ClientModel.Harbour>();\r\n    SelectedPerson = ko.observable<ClientModel.Person>();\r\n    SelectedJob = ko.observable<ClientModel.Job>();\r\n    SelectedTrip = ko.observable<ClientModel.Trip>();\r\n    SelectedAddress = ko.observable<ClientModel.Address>();\r\n    SelectedImage = ko.observable<ClientModel.Image>();\r\n    SelectedTack = ko.observable<ClientModel.Tack>();\r\n    SelectedLocation = ko.observable<ClientModel.Location>();\r\n    SelectedSupermarket = ko.observable<ClientModel.Supermarket>();\r\n    SelectedRestaurant = ko.observable<ClientModel.Restaurant>();\r\n\r\n    InitGallery() {\r\n        const items = new Array<PhotoSwipe.Item>();\r\n        const currImage: ClientModel.Image = this as any;\r\n        for (let data of mapViewModel.SelectedHarbour().Album().Images()) {\r\n            items.push(({\r\n                h: data.Height(),\r\n                w: data.Width(),\r\n                src: data.Path()\r\n            } as any));\r\n        }\r\n        gallery = new PhotoSwipe(pswp,\r\n            PhotoSwipeUI_Default,\r\n            items,\r\n            {\r\n                index: mapViewModel.SelectedHarbour().Album().Images.indexOf(currImage) as number,\r\n                getThumbBoundsFn: (index: number): { x: number; y: number; w: number } => {\r\n                    const elem = $(\".images:first img\")[index];\r\n                    var padding = parseFloat(window.getComputedStyle(elem, null)\r\n                        .getPropertyValue(\"padding-left\")\r\n                        .replace(\"px\", \"\"));\r\n                    elem.scrollIntoView();\r\n                    const bounds = elem.getBoundingClientRect();\r\n                    return {\r\n                        x: bounds.left + padding,\r\n                        y: bounds.top + window.screenY + padding,\r\n                        w: bounds.width - (2 * padding)\r\n                    };\r\n                }\r\n            });\r\n        gallery.init();\r\n    }\r\n\r\n    AddHarbour(): void {\r\n        const harbour = mapViewModel.CreateHarbour(`Hafen ${this.Harbours.length}`, this.Map.getCenter());\r\n        mapViewModel.Harbours.push(harbour);\r\n        harbour.SaveToServer();\r\n    }\r\n\r\n    RemoveHarbour = () => {\r\n        mapViewModel.SelectedWaypoint().RemoveFromMap();\r\n        mapViewModel.Waypoints.remove(this.SelectedWaypoint());\r\n    };\r\n    RemoveWaypoint = () => {\r\n        mapViewModel.SelectedHarbour().RemoveFromMap();\r\n        mapViewModel.Harbours.remove(this.SelectedHarbour());\r\n        mapViewModel.Harbours.remove(this.SelectedHarbour());\r\n    };\r\n\r\n    //CopyHarbour(h1: Harbour, h2: Harbour): void {\r\n    //    this.CopyWaypoint(h1, h2);\r\n    //}\r\n\r\n    //CopyWaypoint(w1: Waypoint, w2: Waypoint) {\r\n    //    w2.WaypointNumber(w1.WaypointNumber());\r\n    //    w2.Latitude(w1.Latitude());\r\n    //    w2.Longitude(w1.Longitude());\r\n    //    w2.Name(w1.Name());\r\n    //    w2.Description(w1.Description());\r\n    //}\r\n\r\n    AddPolyline(waypoint?: Waypoint): L.Polyline;\r\n    AddPolyline(waypoints?: Waypoint[]): L.Polyline;\r\n    AddPolyline(arg?): L.Polyline {\r\n        const polyline = new L.Polyline([]);\r\n        mapViewModel.Polylines.push(polyline);\r\n        if (mapViewModel.MapMode() === MapMode.Admin)\r\n            polyline.addTo(this.Map);\r\n        polyline.Waypoints = new Array();\r\n        if (arg !== undefined)\r\n            if (arg instanceof Waypoint)\r\n                (arg as Waypoint).AddToPolyline(polyline);\r\n            else\r\n                for (let waypoint of arg as Waypoint[]) {\r\n                    waypoint.AddToPolyline(polyline);\r\n                }\r\n        polyline.addEventListener(\"mouseover\",\r\n            () => {\r\n                mapViewModel.HoveredPolyine = polyline;\r\n            });\r\n        return polyline;\r\n    }\r\n\r\n\r\n    MapMode = ko.observable<MapMode>();\r\n    DrawingLatLng: L.LatLng;\r\n    DrawingSourceWaypoint: Waypoint;\r\n    DrawingTargetWaypoint: Waypoint;\r\n    RemovePolyline = (polyline: L.Polyline) => {\r\n        this.Map.removeLayer(polyline);\r\n        this.DrawingPolyline = undefined;\r\n    };\r\n\r\n    GetMapMode(): MapMode {\r\n        if (this.DrawingPolyline !== undefined && this.DrawingLatLng !== undefined)\r\n            return MapMode.RouteDrawing;\r\n        return this.MapMode();\r\n    }\r\n\r\n    GetWayPointById(id: number): Waypoint {\r\n        for (let waypoint of this.Waypoints()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        for (let waypoint of this.Harbours()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        throw `No Waypoint with id ${id} in model`;\r\n    }\r\n\r\n    CalculateDistances(start = mapViewModel.SelectedHarbour(), target?: ClientModel.Waypoint) {\r\n\r\n        const waypoints: Array<Waypoint> = [start];\r\n        const calculating = new Array<WaypointDistance>();\r\n        const calculated = new Array<WaypointDistance>();\r\n        const calculateRoute = target !== undefined;\r\n        calculating.push(new WaypointDistance(undefined, start, 0, waypoints, calculateRoute));\r\n        //for (let waypoint of mapViewModel.Waypoints()) {\r\n        //    waypoints.push(new WaypointDistance(null, waypoint, Number.POSITIVE_INFINITY));\r\n        //}\r\n        //for (let harbour of mapViewModel.Harbours()) {\r\n        //    if (harbour !== start) {\r\n        //        waypoints.push(new WaypointDistance(null, harbour, Number.POSITIVE_INFINITY));\r\n        //    }\r\n        //}\r\n        if (calculateRoute) {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.RoutePrecessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.RoutePrecessor(undefined);\r\n            }\r\n        } else {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.Precessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.Precessor(undefined);\r\n            }\r\n        }\r\n        while (calculating.length > 0) {\r\n            let minimalDist = Number.POSITIVE_INFINITY;\r\n            let minimalWP: WaypointDistance;\r\n            for (let wp of calculating) {\r\n                for (let cWP of wp.ConnectedWayPoints) {\r\n                    if ((calculateRoute ? cWP.RoutePrecessor() : cWP.Precessor()) !== undefined)\r\n                        removeFromArray(wp.ConnectedWayPoints, cWP);\r\n                }\r\n                if (wp.ConnectedWayPoints.length === 0) {\r\n                    removeFromArray(calculating, wp);\r\n                    calculated.push(wp);\r\n                } else {\r\n                    const dist = wp.Distance + wp.ConnectedWayPoints[0].LatLng.distanceTo(wp.LatLng);\r\n                    if (dist < minimalDist) {\r\n                        minimalDist = dist;\r\n                        minimalWP = wp;\r\n                    }\r\n                }\r\n            }\r\n            if (minimalWP !== undefined) {\r\n                calculating.push(new WaypointDistance(minimalWP.Waypoint,\r\n                    minimalWP.ConnectedWayPoints.shift(),\r\n                    minimalDist,\r\n                    waypoints,\r\n                    calculateRoute));\r\n                //if (minimalWP.Waypoint === target)\r\n                //    break;\r\n            }\r\n        }\r\n        if (calculateRoute)\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.RouteDistance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n        else\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.Distance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n    }\r\n\r\n    private highlightedRoute: L.Polyline;\r\n    private routeFixed = false;\r\n    private previousBounds: L.LatLngBounds;\r\n    private noRevertToPreviousBounds = false;\r\n\r\n    ShowRoute(h: ClientModel.Waypoint) {\r\n        if (mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        }\r\n        if (h === undefined)\r\n            h = (this as any);\r\n        if (!(h instanceof ClientModel.Harbour))\r\n            return;\r\n        const latLngs = [h.LatLng];\r\n        let dist = h.Distance();\r\n        if (dist === undefined)\r\n            dist = 0;\r\n        while (h.Precessor() !== undefined) {\r\n            h = h.Precessor();\r\n            latLngs.push(h.LatLng);\r\n        }\r\n        mapViewModel.highlightedRoute = L.polyline(latLngs);\r\n        mapViewModel.highlightedRoute.addTo(mapViewModel.Map);\r\n        mapViewModel.highlightedRoute.bindLabel(dist.toString() + \" km\", { noHide: true });\r\n        mapViewModel.FitBounds(mapViewModel.highlightedRoute.getBounds());\r\n    }\r\n\r\n    FitBounds(bounds: L.LatLngBounds) {\r\n        const map = mapViewModel.Map;\r\n        const currentBounds = map.getBounds();\r\n        if (!currentBounds.contains(bounds)) {\r\n            if (mapViewModel.previousBounds === undefined)\r\n                mapViewModel.previousBounds = currentBounds;\r\n            map.fitBounds(bounds);\r\n        }\r\n    }\r\n\r\n    HideRoute(force = false) {\r\n        if ((!mapViewModel.routeFixed || force) && mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.Map.removeLayer(mapViewModel.highlightedRoute);\r\n            mapViewModel.highlightedRoute = undefined;\r\n            if (!mapViewModel.noRevertToPreviousBounds && mapViewModel.previousBounds !== undefined) {\r\n                const tmpBounds = mapViewModel.previousBounds;\r\n                mapViewModel.previousBounds = undefined;\r\n                window.setTimeout(() => {\r\n                    if (mapViewModel.previousBounds === undefined)\r\n                        mapViewModel.Map.fitBounds(tmpBounds);\r\n                    else\r\n                        mapViewModel.previousBounds = tmpBounds;\r\n                }, 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    FixRoute() {\r\n        mapViewModel.routeFixed = true;\r\n        mapViewModel.previousBounds = undefined;\r\n    }\r\n\r\n    CreateWaypoint(latLng: L.LatLng, markerType: MarkerType): Waypoint {\r\n        const wp = new Waypoint(latLng, markerType, mapViewModel.Map as L.mapbox.Map);\r\n        this.InitializeWaypoint(wp, markerType);\r\n        return wp;\r\n    }\r\n\r\n    InitializeWaypoint(wp: Waypoint, markerType: MarkerType) {\r\n        this.CreateMarker(markerType, wp);\r\n    }\r\n\r\n    CreateMarker(markerType: MarkerType, wp: ClientModel.Waypoint) {\r\n        if (mapViewModel.MapMode() === MapMode.Admin || markerType === MarkerType.Harbour) {\r\n            const options: L.MarkerOptions = {\r\n                draggable: (mapViewModel.MapMode() === MapMode.Admin)\r\n            };\r\n            if (markerType === MarkerType.Dummy) {\r\n                options.opacity = 0;\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin &&\r\n                (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy)) {\r\n                options.icon = new L.Icon({\r\n                    iconUrl: \"/images/waypointhandle.png\",\r\n                    iconSize: new L.Point(10, 10, true),\r\n                    className: \"waypoint\"\r\n                });\r\n\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                options.contextmenu = true;\r\n                options.contextmenuInheritItems = false;\r\n                if (markerType === MarkerType.Harbour) {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.EditingHarbour(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.DeletingHarbour(this) }\r\n                        }\r\n                    ];\r\n                } else {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.EditingWaypoint(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.DeletingWaypoint(this) }\r\n                        }\r\n                    ];\r\n                }\r\n            }\r\n\r\n            const marker = new L.Marker(wp.LatLng, options);\r\n            marker.addTo(this.Map);\r\n            marker.Waypoint = wp;\r\n            wp.marker = marker;\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                if (markerType === MarkerType.Dummy)\r\n                    marker.addEventListener(\"mouseout\", (e) => {\r\n                        if (e.target.Waypoint.IsDummy()) {\r\n                            mapViewModel.HoveredPolyine = undefined;\r\n                        }\r\n                    })\r\n                marker.addEventListener(\"drag\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        wp.SetLatLng(wp.marker.getLatLng());\r\n                    });\r\n                if (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy) {\r\n                    this.WaypointMarkers.push(wp.marker);\r\n                    wp.marker.Point = mapViewModel.Map.latLngToContainerPoint(wp.LatLng);\r\n                }\r\n                wp.marker.addEventListener(\"click\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        if (wp.IsDummy()) {\r\n                            mapViewModel.Waypoints.push(wp);\r\n                            wp.convertFromDummyHandle();\r\n                        }\r\n                        if (mapViewModel.GetMapMode() === MapMode.RouteDrawing) {\r\n                            if (!wp.IsInPolyline(mapViewModel.DrawingPolyline)) {\r\n                                ServerApi.WaypointConnectionApi.GetDefault()\r\n                                    .Connect(wp.Id(), mapViewModel.DrawingPolyline.Waypoints[0].Id());\r\n                                wp.AddToPolyline(mapViewModel.DrawingPolyline);\r\n                                removeFromPolyline(mapViewModel.DrawingPolyline, mapViewModel.DrawingLatLng);\r\n                                addDummyHandle(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            } else {\r\n                                removePolyline(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            }\r\n                        }\r\n                    });\r\n                wp.marker.addEventListener(\"dblclick\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        mapViewModel.DrawingPolyline = mapViewModel.AddPolyline(wp);\r\n                        mapViewModel.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                        mapViewModel.DrawingPolyline.addLatLng(mapViewModel.DrawingLatLng);\r\n                    });\r\n                if (markerType === MarkerType.Dummy)\r\n                    wp.marker.addOneTimeEventListener(\"drag\",\r\n                        (e: L.LeafletMouseEvent) => {\r\n                            wp.convertFromDummyHandle();\r\n                            mapViewModel.Waypoints.push(wp);\r\n                        });\r\n                //else if (markerType === MarkerType.Waypoint) {\r\n                //    wp.Name(`Wegpunkt ${mapViewModel.Waypoints().length + 1}`);\r\n                //}\r\n                wp.marker.addEventListener(\"dragend\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        wp.SaveToServer();\r\n                    });\r\n            } else if (markerType === MarkerType.Harbour) {\r\n                wp.marker.addEventListener(\"mouseover\",\r\n                    () => {\r\n                        if (mapViewModel.SelectedHarbour() !== undefined)\r\n                            mapViewModel.ShowRoute(wp);\r\n                    });\r\n                wp.marker.addEventListener(\"click\", () => mapViewModel.SelectedHarbour(wp as ClientModel.Harbour));\r\n            }\r\n        }\r\n    }\r\n\r\n    CreateHarbour(name: string, latLng: L.LatLng) {\r\n        const h = new Harbour(name, latLng, this.Map as L.mapbox.Map);\r\n        this.InitializeWaypoint(h, MarkerType.Harbour);\r\n        return h;\r\n    }\r\n\r\n    SaveHarbour() {\r\n        const harbour: ClientModel.Harbour = this as any;\r\n        if (harbour.Id() === undefined) {\r\n            mapViewModel.Harbours.push(harbour);\r\n        }\r\n        harbour.SaveToServer()\r\n            .done(() => {\r\n                mapViewModel.EditingHarbour(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteHarbour() {\r\n        var h = mapViewModel.DeletingHarbour();\r\n        ServerApi.WaypointConnectionApi.GetDefault()\r\n            .Disconnect(h.Id())\r\n            .done(() => {\r\n                h.DeleteOnServer()\r\n                    .done(() => {\r\n                        h.RemoveFromMap();\r\n                        mapViewModel.Harbours.remove(h);\r\n                        mapViewModel.DeletingHarbour(undefined);\r\n                    });\r\n            });\r\n    }\r\n\r\n    SaveWaypoint() {\r\n        const waypoint: ClientModel.Waypoint = this as any;\r\n        waypoint.SaveToServer()\r\n            .done(() => {\r\n                mapViewModel.EditingWaypoint(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteWaypoint() {\r\n        var wp = mapViewModel.DeletingWaypoint();\r\n        ServerApi.WaypointConnectionApi.GetDefault()\r\n            .Disconnect(wp.Id())\r\n            .done(() => {\r\n                wp.DeleteOnServer()\r\n                    .done(() => {\r\n                        wp.RemoveFromMap();\r\n                        mapViewModel.Waypoints.remove(wp);\r\n                        mapViewModel.DeletingWaypoint(undefined);\r\n                    });\r\n            });\r\n    };\r\n\r\n\r\n    SaveJob() {\r\n        const job: ClientModel.Job = this as any;\r\n        const newJob = job.Id() === undefined;\r\n        job.SaveToServer()\r\n            .done(() => {\r\n                if (newJob) {\r\n                    mapViewModel.Jobs.push(mapViewModel.EditingJob());\r\n                    if (mapViewModel.EditingJob().SuperJobId() !== undefined)\r\n                        mapViewModel.GetJobById(mapViewModel.EditingJob().SuperJobId()).SubJobs.push(mapViewModel.EditingJob());\r\n                }\r\n                mapViewModel.EditingJob(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteJob() {\r\n        const job = mapViewModel.DeletingJob();\r\n        job.DeleteOnServer()\r\n            .done(() => {\r\n                mapViewModel.Jobs.remove(job);\r\n                if (job.SuperJobId() !== undefined)\r\n                    mapViewModel.GetJobById(job.SuperJobId()).SubJobs.remove(job);\r\n                mapViewModel.DeletingJob(undefined);\r\n            });\r\n    }\r\n\r\n\r\n    DrawingPolyline: L.Polyline;\r\n    Polylines = new Array<L.Polyline>();\r\n    EditingHarbour = ko.observable<Harbour>();\r\n    DeletingHarbour = ko.observable<Harbour>();\r\n    EditingWaypoint = ko.observable<Waypoint>();\r\n    DeletingWaypoint = ko.observable<Waypoint>();\r\n    DeletingJob = ko.observable<Job>();\r\n    EditingJob = ko.observable<Job>();\r\n    WaypointMarkers = new Array();\r\n    HoveredPolyine: L.Polyline;\r\n\r\n}\r\n\r\nvar mapViewModel = new MapViewModel(MapMode.View);\r\nko.applyBindings(mapViewModel);\r\nvar dropzoneModalOpenedByDrag = false;\r\n\r\nvar dropzoneModal = $(\"#dropzoneModal\");\r\nvar editingHarbourModal = $(\"#editingHarbourModal\");\r\nvar deletingHarbourModal = $(\"#deletingHarbourModal\");\r\nvar editingWaypointModal = $(\"#editingWaypointModal\");\r\nvar deletingWaypointModal = $(\"#deletingWaypointModal\");\r\nvar deletingJobModal = $(\"#deletingJobModal\");\r\nvar editingJobModal = $(\"#editingJobModal\");\r\nvar jobOverviewModal = $(\"#jobOverviewModal\");\r\nvar dropzone: Dropzone;\r\nvar hasDrag = false;\r\nvar uploadModalVisible = false;\r\nvar pswp = $(\".pswp\")[0];\r\n\r\nvar leftSidebar = new Sidebar($(\"#leftSidebar\"));\r\nvar rightSidebar = new Sidebar($(\"#rightSidebar\"));\r\nvar bottomSidebar = new Sidebar($(\"#bottomSidebar\"));\r\nvar harbourInfo = $(\"#harbourInfo\");\r\nDropzone.options.dropzone =\r\n    {\r\n        acceptedFiles: \"image/jpeg,image/png\",\r\n        dictInvalidFileType: \"Dieser Dateityp wird nicht unterstützt\",\r\n        dictDefaultMessage: \"Dateien hier ablegen\",\r\n        init() {\r\n            dropzone = this;\r\n            dropzone.on(\"success\",\r\n                (e, data: ServerModel.Image) => {\r\n                    var image = new ClientModel.Image().LoadFromServerEntity(data);\r\n                    mapViewModel.Images.push(image);\r\n                    mapViewModel.GetAlbumById(image.ParentAlbumId()).Images.push(image);\r\n                });\r\n            dropzone.on(\"queuecomplete\",\r\n                () => {\r\n                    if (dropzoneModalOpenedByDrag)\r\n                        dropzoneModal.modal(\"hide\");\r\n                });\r\n            dropzone.on(\"dragover\",\r\n                () => {\r\n                    hasDrag = true;\r\n                });\r\n        }\r\n    };\r\n\r\ndocument.ondragenter =\r\n    (e: DragEvent) => {\r\n        if (!uploadModalVisible &&\r\n            !hasDrag &&\r\n            !dropzoneModalOpenedByDrag &&\r\n            dropzoneModal.is(\":not(.in)\") &&\r\n            e.dataTransfer.types[0] === \"Files\" &&\r\n            mapViewModel.SelectedHarbour() !== undefined) {\r\n            dropzoneModal.modal(\"show\");\r\n            uploadModalVisible = true;\r\n            dropzoneModalOpenedByDrag = true;\r\n        }\r\n\r\n        hasDrag = true;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndocument.ondragover =\r\n    (e: DragEvent) => {\r\n        hasDrag = true;\r\n    };\r\ndocument.ondragleave =\r\n    (e: DragEvent) => {\r\n        if (uploadModalVisible && hasDrag && dropzoneModalOpenedByDrag && dropzone.getQueuedFiles().length === 0 ||\r\n            dropzone.getUploadingFiles().length === 0) {\r\n            hasDrag = false;\r\n            window.setTimeout(() => {\r\n                if (!hasDrag) {\r\n                    dropzoneModal.modal(\"hide\");\r\n                    uploadModalVisible = false;\r\n                }\r\n            },\r\n                1000);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndropzoneModal.on(\"hide.bs.modal\",\r\n    e => {\r\n        if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            alert(\"Das Fenster kann nicht geschlossen werden, während Dateien hochgeladen werden.\");\r\n            return false;\r\n        } else {\r\n            dropzone.removeAllFiles();\r\n            dropzoneModalOpenedByDrag = false;\r\n        }\r\n    });\r\nvar gallery: PhotoSwipe<PhotoSwipe.Options>;\r\n\r\n$(\".modal\").on(\"hidden.bs.modal\", function (event) {\r\n    $(this).removeClass(\"fv-modal-stack\");\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") - 1);\r\n});\r\n\r\n\r\n$(\".modal\").on(\"shown.bs.modal\", function (event) {\r\n\r\n    // keep track of the number of open modals\r\n\r\n    if (typeof ($(\"body\").data(\"fv_open_modals\")) == \"undefined\") {\r\n        $(\"body\").data(\"fv_open_modals\", 0);\r\n    }\r\n\r\n\r\n    // if the z-index of this modal has been set, ignore.\r\n\r\n    if ($(this).hasClass(\"fv-modal-stack\")) {\r\n        return;\r\n    }\r\n\r\n    $(this).addClass(\"fv-modal-stack\");\r\n\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") + 1);\r\n\r\n    $(this).css(\"z-index\", 1040 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n    $(\".modal-backdrop\").not(\".fv-modal-stack\")\r\n        .css(\"z-index\", 1039 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n\r\n    $(\".modal-backdrop\").not(\"fv-modal-stack\")\r\n        .addClass(\"fv-modal-stack\");\r\n\r\n});\r\n\r\n\r\n"],"sourceRoot":"/source/"}