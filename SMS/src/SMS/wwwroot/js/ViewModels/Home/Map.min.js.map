{"version":3,"sources":["/source/wwwroot/js/ViewModels/Home/ViewModels/Home/Map.ts"],"names":["getMiddle","pol","start","getLatLngs","end","L","LatLng","lat","lng","splitPolyline","polyline","Waypoints","length","DummyHandle","Waypoint","w2","w3","RemoveFromPolyline","undefined","AddToPolyline","addDummyHandle","mapViewModel","AddPolyline","Error","removePolyline","_i","_a","waypoint","RemoveFromMap","Map","removeLayer","CreateWaypoint","MarkerType","Dummy","redrawPolyline","middleLatLng","Longitude","Latitude","SetLatLng","redraw","removeFromPolyline","latLng","removeFromArray","arr","obj","tmpArr","Array","arr_1","item","push","pop","shift","SHarbour","ServerModel","Harbour","ClientModel","Job","WaypointDistance","MapMode","MapViewModel","mapMode","_this","this","routePolyline","ko","observable","IsLastTakInRoute","computed","read","trip","SelectedTrip","h","SelectedHarbour","Tacks","Start","deferEvaluation","GetRouteDistance","distance","tack","isNaN","Distance","TopJobs","Jobs","filter","j","SuperJobId","IsInViewMode","View","IsInAdminMode","Admin","WaypointsLoaded","WaypointConnectionsLoaded","PersonsLoaded","JobsLoaded","TripsLoaded","AddressesLoaded","ImagesLoaded","AlbumsLoaded","WaypointTacksLoaded","TacksLoaded","LocationsLoaded","AlbumImagesLoaded","observableArray","WaypointConnections","Harbours","Persons","Trips","Addresses","Images","Locations","Supermarkets","Restaurants","Albums","AlbumImages","SelectedWaypoint","SelectedPerson","SelectedJob","SelectedAddress","SelectedImage","SelectedTack","SelectedLocation","SelectedSupermarket","SelectedRestaurant","RemoveHarbour","remove","RemoveWaypoint","RemovePolyline","DrawingPolyline","routeFixed","noRevertToPreviousBounds","Polylines","EditingHarbour","DeletingHarbour","EditingWaypoint","DeletingWaypoint","DeletingJob","EditingJob","WaypointMarkers","mapbox","accessToken","subscribe","InitializeMap","mapOptions","contextmenu","contextmenuItems","text","callback","e","console","log","CreateHarbour","latlng","map","setView","tileLayer","addTo","LoadData","newHarbour","CalculateDistances","sort","h1","h2","HideRoute","harbour","editingHarbourModal","modal","SaveState","RevertState","Id","marker","deletingHarbourModal","editingWaypointModal","deletingWaypointModal","job","editingJobModal","deletingJobModal","rightSidebar","Hide","Show","t","bottomSidebar","addEventListener","GetMapMode","RouteDrawing","DrawingLatLng","Point","distanceTo","containerPoint","setOpacity","IsDummy","HoveredPolyine","p1","latLngToContainerPoint","p2","containerPointToLatLng","LineUtil","closestPointOnSegment","startId_1","SaveToServer","done","w","ServerApi","WaypointConnectionApi","GetDefault","Connect","addLatLng","originalEvent","cancelBubble","preventDefault","stopPropagation","$","document","keyup","keyCode","getLatLng","prototype","StartRoute","Trip","Tack","color","AddToRoute","targetHarbour","lastTack","startHarbour","RouteDistance","wp","RoutePrecessor","End","RedrawTrip","PullTack","tacks","index","indexOf","prevTack","tmpEnd","splice","PushTack","nextTack","RemoveTack","WaypointApi","Get","d","d_1","sEntity","Type","GetType","LoadFromServerEntity","Name","InitializeModel","d_2","PersonApi","d_3","Person","JobApi","d_4","TripApi","d_5","AddressApi","d_6","Address","ImageApi","d_7","Image","AlbumApi","d_8","Album","AlbumImageApi","d_9","ai","TackApi","d_10","LocationApi","d_11","Location","Restaurant","Supermarket","entity","AssignedToId","AssignedTo","GetPersonById","TripId","GetTripById","SuperJob","GetJobById","SubJobs","_b","_c","GetAlbumById","AlbumId","_d","_e","GetAddressById","AddressId","GetHarbourById","HarbourId","_f","_g","GetImageById","ImageId","_h","_j","connection","GetWayPointById","Waypoint1Id","Waypoint2Id","CreateMarker","p","enable","disable","GetWaypointById","id","GetTackById","GetLocationById","InitGallery","items","currImage","data","Height","Width","src","Path","gallery","PhotoSwipe","pswp","PhotoSwipeUI_Default","getThumbBoundsFn","elem","padding","parseFloat","window","getComputedStyle","getPropertyValue","replace","scrollIntoView","bounds","getBoundingClientRect","x","left","y","top","screenY","width","init","AddHarbour","getCenter","arg","Polyline","target","waypoints","calculating","calculated","calculateRoute","Precessor","minimalDist","Number","POSITIVE_INFINITY","minimalWP","calculating_1","_k","ConnectedWayPoints","cWP","dist","_l","calculated_1","Math","round","_m","calculated_2","ShowRoute","highlightedRoute","latLngs","bindLabel","toString","noHide","FitBounds","getBounds","currentBounds","contains","previousBounds","fitBounds","force","tmpBounds_1","setTimeout","FixRoute","markerType","InitializeWaypoint","options","draggable","opacity","icon","Icon","iconUrl","iconSize","className","contextmenuInheritItems","context","Marker","convertFromDummyHandle","IsInPolyline","addOneTimeEventListener","name","SaveHarbour","DeleteHarbour","Disconnect","DeleteOnServer","SaveWaypoint","DeleteWaypoint","SaveJob","newJob","DeleteJob","applyBindings","dropzoneModalOpenedByDrag","dropzoneModal","jobOverviewModal","dropzone","hasDrag","uploadModalVisible","leftSidebar","Sidebar","harbourInfo","Dropzone","acceptedFiles","dictInvalidFileType","dictDefaultMessage","on","image","ParentAlbumId","ondragenter","is","dataTransfer","types","ondragover","ondragleave","getQueuedFiles","getUploadingFiles","stopImmediatePropagation","alert","removeAllFiles","event","removeClass","hasClass","addClass","css","not"],"mappings":"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","file":"wwwroot/js/ViewModels/Home/Map.min.js","sourcesContent":["import SHarbour = ServerModel.Harbour;\r\n\r\nimport Waypoint = ClientModel.Waypoint;\r\nimport Harbour = ClientModel.Harbour;\r\nimport Job = ClientModel.Job;\r\nimport WaypointDistance = ClientModel.WaypointDistance;\r\n\r\nfunction getMiddle(pol: L.Polyline): L.LatLng {\r\n    const start = pol.getLatLngs()[0];\r\n    const end = pol.getLatLngs()[1];\r\n    return new L.LatLng(start.lat + ((end.lat - start.lat) / 2), start.lng + ((end.lng - start.lng) / 2));\r\n}\r\n\r\nfunction splitPolyline(polyline: L.Polyline) {\r\n    if (polyline.Waypoints.length === 2 && polyline.DummyHandle instanceof Waypoint) {\r\n        const w1 = polyline.Waypoints[0];\r\n        const w2 = polyline.DummyHandle;\r\n        const w3 = polyline.Waypoints[1];\r\n        w2.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle = undefined;\r\n        w2.AddToPolyline(polyline);\r\n        w3.RemoveFromPolyline(polyline);\r\n        addDummyHandle(polyline);\r\n        addDummyHandle(mapViewModel.AddPolyline([w2, w3]));\r\n        return;\r\n    }\r\n    throw new Error(\"Cannot split polyline. Polyline has no dummy handle or less or more than 2 waypoints\");\r\n}\r\n\r\n\r\nfunction removePolyline(polyline: L.Polyline) {\r\n    for (let waypoint of polyline.Waypoints) {\r\n        waypoint.RemoveFromPolyline(polyline);\r\n    }\r\n    if (polyline.DummyHandle !== undefined) {\r\n        polyline.DummyHandle.RemoveFromPolyline(polyline);\r\n        polyline.DummyHandle.RemoveFromMap();\r\n    }\r\n    mapViewModel.Map.removeLayer(polyline);\r\n}\r\n\r\nfunction addDummyHandle(polyline: L.Polyline) {\r\n    if (polyline.DummyHandle === undefined) {\r\n        polyline.DummyHandle = mapViewModel.CreateWaypoint(getMiddle(polyline), MarkerType.Dummy);\r\n        polyline.DummyHandle.AddToPolyline(polyline);\r\n    }\r\n}\r\n\r\nfunction redrawPolyline(polyline: L.Polyline) {\r\n    const middleLatLng = getMiddle(polyline);\r\n    if (polyline.DummyHandle === undefined)\r\n        addDummyHandle(polyline);\r\n    if (polyline.DummyHandle.Longitude() !== middleLatLng.lng || polyline.DummyHandle.Latitude() !== middleLatLng.lat)\r\n        polyline.DummyHandle.SetLatLng(middleLatLng);\r\n    else\r\n        polyline.redraw();\r\n}\r\n\r\nfunction removeFromPolyline(polyline: L.Polyline, latLng: L.LatLng) {\r\n    removeFromArray(polyline.getLatLngs(), latLng);\r\n    polyline.redraw();\r\n}\r\n\r\nfunction removeFromArray<T>(arr: T[], obj: T): boolean {\r\n    const tmpArr = new Array<T>();\r\n    for (let item of arr) {\r\n        if (item !== obj)\r\n            tmpArr.push(item);\r\n    }\r\n    if (tmpArr.length === arr.length)\r\n        return false;\r\n    while (arr.pop()) {\r\n    }\r\n    while (tmpArr.length > 0) {\r\n        arr.push(tmpArr.shift());\r\n    }\r\n    return true;\r\n}\r\n\r\nenum MapMode {\r\n    Admin,\r\n    View,\r\n    TripPlanning,\r\n    RouteDrawing\r\n}\r\n\r\ndeclare namespace L {\r\n    export interface Polyline extends Path {\r\n\r\n        Waypoints: Array<Waypoint>;\r\n        DummyHandle: Waypoint;\r\n    }\r\n\r\n    export interface LatLng {\r\n        Polylines: Polyline[];\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface Marker {\r\n        Waypoint: Waypoint;\r\n        Point: L.Point;\r\n        _icon;\r\n    }\r\n\r\n    export interface CircleMarker {\r\n        Waypoint: Waypoint;\r\n    }\r\n\r\n    export interface PathOptions {\r\n        Draggable?: boolean;\r\n    }\r\n\r\n    export interface MarkerOptions {\r\n        contextmenu?: boolean;\r\n        contextmenuWidth?: number;\r\n        contextmenuAnchor?: L.Point | L.Point[];\r\n        contextmenuItems?: contextmenuItem[];\r\n        contextmenuInheritItems: boolean;\r\n\r\n    }\r\n\r\n    export interface contextmenuItem {\r\n        text?: string;\r\n        icon?: string;\r\n        iconCls?: string;\r\n        callback?: Function;\r\n        context?: Object;\r\n        disabled?: boolean;\r\n        separator?: boolean;\r\n        hideOnSelect?: boolean;\r\n        index?: number;\r\n    }\r\n\r\n\r\n}\r\n\r\nclass MapViewModel {\r\n    constructor(mapMode: MapMode) {\r\n        L.mapbox\r\n            .accessToken =\r\n            \"pk.eyJ1IjoiZGFuaWVsLWt1b24iLCJhIjoiY2lldnVtY29iMDBiOHQxbTBvZzBqZWl6cCJ9.UEc2YqH59pB1YTpv22vg8A\";\r\n        this.MapMode(mapMode);\r\n        this.MapMode.subscribe(() => {\r\n            this.InitializeMap();\r\n        });\r\n        const mapOptions: L.mapbox.MapOptions = {\r\n            contextmenu: mapMode === MapMode.Admin,\r\n            contextmenuItems: [\r\n                {\r\n                    text: \"Neuer Hafen\",\r\n                    callback: function (e) {\r\n                        console.log(e);\r\n                        mapViewModel.EditingHarbour(mapViewModel.CreateHarbour(\"\", e.latlng))\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        this.Map = L.mapbox.map(\"map\",\r\n            \"mapbox.streets\",\r\n            mapOptions);\r\n        this.Map.setView([54.40774166820069, 10.523529052734373], 9);\r\n        L.tileLayer(\"http://t1.openseamap.org/seamark/{z}/{x}/{y}.png\").addTo(this.Map);\r\n        this.LoadData();\r\n        this.SelectedHarbour.subscribe((newHarbour) => {\r\n            if (newHarbour !== undefined) {\r\n                mapViewModel.CalculateDistances(newHarbour);\r\n                mapViewModel.Harbours.sort((h1, h2) => h1.Distance() - h2.Distance());\r\n            } else {\r\n                for (let h of mapViewModel.Harbours()) {\r\n                    h.Distance(0);\r\n                }\r\n            }\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        });\r\n        this.EditingHarbour.subscribe((harbour) => {\r\n            if (harbour === undefined) {\r\n                editingHarbourModal.modal(\"hide\");\r\n            } else {\r\n                harbour.SaveState();\r\n                editingHarbourModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingHarbour.subscribe((harbour) => {\r\n            if (harbour !== undefined) {\r\n                harbour.RevertState(true);\r\n                if (harbour.Id() === undefined)\r\n                    mapViewModel.Map.removeLayer(harbour.marker);\r\n            }\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingHarbour.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingHarbourModal.modal(\"hide\");\r\n            } else {\r\n                deletingHarbourModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingWaypoint.subscribe((waypoint) => {\r\n            if (waypoint === undefined) {\r\n                editingWaypointModal.modal(\"hide\");\r\n            } else {\r\n                waypoint.SaveState();\r\n                editingWaypointModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingWaypoint.subscribe((waypoint) => {\r\n            if (mapViewModel.EditingWaypoint() !== undefined)\r\n                mapViewModel.EditingWaypoint().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingWaypoint.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingWaypointModal.modal(\"hide\");\r\n            } else {\r\n                deletingWaypointModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingJob.subscribe((job) => {\r\n            if (job === undefined) {\r\n                editingJobModal.modal(\"hide\");\r\n            } else {\r\n                job.SaveState();\r\n                editingJobModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.EditingJob.subscribe((job) => {\r\n            if (mapViewModel.EditingJob() !== undefined)\r\n                mapViewModel.EditingJob().RevertState(true);\r\n        },\r\n            this,\r\n            \"beforeChange\");\r\n        this.DeletingJob.subscribe((h) => {\r\n            if (h === undefined) {\r\n                deletingJobModal.modal(\"hide\");\r\n            } else {\r\n                deletingJobModal.modal(\"show\");\r\n            }\r\n        });\r\n        this.SelectedHarbour.subscribe((h) => {\r\n            if (h === undefined)\r\n                rightSidebar.Hide();\r\n            else\r\n                rightSidebar.Show();\r\n\r\n        });\r\n        this.SelectedTrip.subscribe((t) => {\r\n            if (t === undefined)\r\n                bottomSidebar.Hide();\r\n            else\r\n                bottomSidebar.Show();\r\n        });\r\n        this.Map.addEventListener(\"mousemove\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    this.DrawingLatLng.lat = e.latlng.lat;\r\n                    this.DrawingLatLng.lng = e.latlng.lng;\r\n                    this.DrawingPolyline.redraw();\r\n                }\r\n                if (this.MapMode() === MapMode.Admin)\r\n                    for (let marker of this.WaypointMarkers) {\r\n                        if (marker.Point.distanceTo(e.containerPoint) < 150)\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 1);\r\n                        else\r\n                            marker.setOpacity(marker.Waypoint.IsDummy() ? 0.0 : 0.8);\r\n                    }\r\n                if (mapViewModel.HoveredPolyine !== undefined && mapViewModel.HoveredPolyine.DummyHandle !== undefined) {\r\n                    const polyline = mapViewModel.HoveredPolyine;\r\n                    const p1 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[0]);\r\n                    const p2 = mapViewModel.Map.latLngToContainerPoint(polyline.getLatLngs()[1]);\r\n                    if (p1.distanceTo(e.containerPoint) < 20 || p2.distanceTo(e.containerPoint) < 20) {\r\n                        mapViewModel.HoveredPolyine = undefined;\r\n                    } else {\r\n                        mapViewModel.HoveredPolyine.DummyHandle.marker.setOpacity(0.8);\r\n                        mapViewModel.HoveredPolyine.DummyHandle\r\n                            .SetLatLng(mapViewModel.Map\r\n                                .containerPointToLatLng(L.LineUtil\r\n                                    .closestPointOnSegment(e.containerPoint,\r\n                                    p1,\r\n                                    p2)),\r\n                            false);\r\n                    }\r\n                }\r\n\r\n            });\r\n        this.Map.addEventListener(\"click\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    const waypoint = mapViewModel.CreateWaypoint(e.latlng, MarkerType.Waypoint);\r\n                    const startId = this.DrawingPolyline.Waypoints[0].Id();\r\n                    waypoint.SaveToServer()\r\n                        .done(w => {\r\n                            ServerApi.WaypointConnectionApi.GetDefault()\r\n                                .Connect(w.Id, startId);\r\n                        });\r\n                    waypoint.AddToPolyline(this.DrawingPolyline);\r\n                    addDummyHandle(this.DrawingPolyline);\r\n                    removeFromPolyline(this.DrawingPolyline, this.DrawingLatLng);\r\n                    this.DrawingPolyline = this.AddPolyline(waypoint);\r\n                    this.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                    this.DrawingPolyline.addLatLng(this.DrawingLatLng);\r\n                }\r\n            });\r\n\r\n        this.Map.addEventListener(\"dblclick\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    e.originalEvent.cancelBubble = true;\r\n                    e.originalEvent.preventDefault();\r\n                    e.originalEvent.stopPropagation();\r\n                    this.DrawingPolyline.addLatLng(e.latlng);\r\n                    this.DrawingLatLng = e.latlng;\r\n                }\r\n            });\r\n        $(document)\r\n            .keyup((e: JQueryKeyEventObject) => {\r\n                if (this.GetMapMode() === MapMode.RouteDrawing) {\r\n                    if (e.keyCode === 27) {\r\n                        this.RemovePolyline(this.DrawingPolyline);\r\n                    }\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"move\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n        this.Map.addEventListener(\"zoom\",\r\n            (e: L.LeafletMouseEvent) => {\r\n                for (let marker of this.WaypointMarkers) {\r\n                    marker.Point = this.Map.latLngToContainerPoint(marker.getLatLng());\r\n                }\r\n            });\r\n    }\r\n\r\n    private routePolyline = ko.observable<L.Polyline>();\r\n\r\n    StartRoute() {\r\n        const trip = new ClientModel.Trip();\r\n        const tack = new ClientModel.Tack();\r\n        const harbour = mapViewModel.SelectedHarbour();\r\n        tack.Start(harbour);\r\n        trip.Tacks.push(tack);\r\n        mapViewModel.SelectedTrip(trip);\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n    }\r\n\r\n    IsLastTakInRoute = ko.computed({\r\n        read: () => {\r\n            var trip = mapViewModel.SelectedTrip();\r\n            var h = mapViewModel.SelectedHarbour();\r\n            return trip !== undefined && h !== undefined && trip.Tacks()[trip.Tacks().length - 1].Start() === h;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    GetRouteDistance = ko.computed({\r\n        read: () => {\r\n            var distance = 0;\r\n            for (let tack of mapViewModel.SelectedTrip().Tacks()) {\r\n                if (!isNaN(tack.Distance()))\r\n                    distance += tack.Distance();\r\n            }\r\n            return distance;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    TopJobs = ko.computed({\r\n        read: () => {\r\n            return mapViewModel.Jobs().filter((j) => j.SuperJobId() === undefined);\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    AddToRoute() {\r\n        const trip = mapViewModel.SelectedTrip();\r\n        const targetHarbour = mapViewModel.SelectedHarbour();\r\n        const tack = new ClientModel.Tack();\r\n        const lastTack = trip.Tacks()[trip.Tacks().length - 1];\r\n        const startHarbour = lastTack.Start();\r\n        mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n        lastTack.Distance(startHarbour.RouteDistance());\r\n        let wp: ClientModel.Waypoint = startHarbour;\r\n        mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n            wp = wp.RoutePrecessor();\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n        }\r\n\r\n        lastTack.End(targetHarbour);\r\n        tack.Start(targetHarbour);\r\n        trip.Tacks.push(tack);\r\n    }\r\n\r\n    RedrawTrip() {\r\n        mapViewModel.Map.removeLayer(mapViewModel.routePolyline());\r\n        mapViewModel.routePolyline(L.polyline([],\r\n            {\r\n                color: \"#009900\"\r\n            }));\r\n        mapViewModel.routePolyline().addTo(mapViewModel.Map);\r\n        for (let tack of mapViewModel.SelectedTrip().Tacks()) {\r\n            const targetHarbour = tack.End();\r\n            const startHarbour = tack.Start();\r\n            if (targetHarbour === undefined)\r\n                continue;\r\n            mapViewModel.CalculateDistances(targetHarbour, startHarbour);\r\n            tack.Distance(startHarbour.RouteDistance());\r\n            let wp: ClientModel.Waypoint = startHarbour;\r\n            mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            while (wp.RoutePrecessor() !== undefined /*&& wp.RoutePrecessor() !== startHarbour*/) {\r\n                wp = wp.RoutePrecessor();\r\n                mapViewModel.routePolyline().addLatLng(wp.LatLng);\r\n            }\r\n        }\r\n    }\r\n\r\n    PullTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        var tmpEnd = tack.End();\r\n        tack.End(prevTack.Start());\r\n        prevTack.End(tmpEnd);\r\n        if (index > 1) {\r\n            tacks()[index - 2].End(tack.Start());\r\n        }\r\n        tacks.splice(index - 1, 2, tack, prevTack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    PushTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const nextTack = tacks()[index + 1];\r\n        tack.End(nextTack.End());\r\n        nextTack.End(tack.Start());\r\n        if (index > 0) {\r\n            tacks()[index - 1].End(nextTack.Start());\r\n        }\r\n        tacks.splice(index, 2, nextTack, tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    RemoveTack() {\r\n        const tack: ClientModel.Tack = <any>this;\r\n        const tacks = mapViewModel.SelectedTrip().Tacks;\r\n        const index = tacks.indexOf(tack);\r\n        const prevTack = tacks()[index - 1];\r\n        if (prevTack !== undefined)\r\n            prevTack.End(tack.End());\r\n        tacks.remove(tack);\r\n        mapViewModel.RedrawTrip();\r\n    }\r\n\r\n    IsInViewMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.View;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n    IsInAdminMode = ko.computed<boolean>({\r\n        read: () => {\r\n            return mapViewModel.MapMode() === MapMode.Admin;\r\n        },\r\n        deferEvaluation: true\r\n    });\r\n\r\n\r\n    LoadData() {\r\n        ServerApi.WaypointApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    if (sEntity.Type === ServerModel.Waypoint.GetType())\r\n                        this.Waypoints.push(mapViewModel\r\n                            .CreateWaypoint(L.latLng(sEntity.Latitude, sEntity.Longitude), MarkerType.Waypoint)\r\n                            .LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === ServerModel.Harbour.GetType()) {\r\n                        const harbour = mapViewModel\r\n                            .CreateHarbour(sEntity.Name, L.latLng(sEntity.Latitude, sEntity.Longitude))\r\n                            .LoadFromServerEntity(sEntity as SHarbour);\r\n                        this.Harbours.push(harbour);\r\n                    }\r\n                }\r\n\r\n                this.WaypointsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.WaypointConnectionApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.WaypointConnections.push(sEntity);\r\n                }\r\n                this.WaypointConnectionsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.PersonApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Persons.push(new ClientModel.Person().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.PersonsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.JobApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Jobs.push(new ClientModel.Job().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.JobsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.TripApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Trips.push(new ClientModel.Trip().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TripsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AddressApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Addresses.push(new ClientModel.Address().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AddressesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.ImageApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Images.push(new ClientModel.Image().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.ImagesLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AlbumApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Albums.push(new ClientModel.Album().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.AlbumsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.AlbumImageApi.GetDefault().Get().done(d => {\r\n            for (let ai of d) {\r\n                this.AlbumImages.push(ai);\r\n            }\r\n            this.AlbumImagesLoaded = true;\r\n            this.InitializeModel();\r\n        })\r\n        //ServerApi.WaypointTackApi.GetDefault().Get().done(d => {\r\n        //    for (let sEntity of d) { this.WaypointTacks.push(new ClientModel.WaypointTack().LoadFromServerEntity(sEntity)); }\r\n        //    this.WaypointTacksLoaded = true;\r\n        //    this.InitialozeModel();\r\n        //});\r\n        ServerApi.TackApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    this.Tacks.push(new ClientModel.Tack().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.TacksLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n        ServerApi.LocationApi.GetDefault()\r\n            .Get()\r\n            .done(d => {\r\n                for (let sEntity of d) {\r\n                    if (sEntity.Type === ServerModel.Location.GetType())\r\n                        this.Locations.push(new ClientModel.Location().LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === ServerModel.Restaurant.GetType())\r\n                        this.Restaurants.push(new ClientModel.Restaurant().LoadFromServerEntity(sEntity));\r\n                    else if (sEntity.Type === ServerModel.Supermarket.GetType())\r\n                        this.Supermarkets.push(new ClientModel.Supermarket().LoadFromServerEntity(sEntity));\r\n                }\r\n                this.LocationsLoaded = true;\r\n                this.InitializeModel();\r\n            });\r\n    }\r\n\r\n    InitializeModel() {\r\n        if (this.WaypointsLoaded &&\r\n            this.WaypointConnectionsLoaded &&\r\n            this.PersonsLoaded &&\r\n            this.JobsLoaded &&\r\n            this.TripsLoaded &&\r\n            this.AddressesLoaded &&\r\n            this.ImagesLoaded &&\r\n            this.AlbumsLoaded &&\r\n            //this.WaypointTacksLoaded &&\r\n            this.TacksLoaded &&\r\n            this.LocationsLoaded &&\r\n            this.AlbumImagesLoaded) {\r\n            for (let entity of this.Jobs()) {\r\n                if (entity.AssignedToId() !== undefined)\r\n                    entity.AssignedTo(this.GetPersonById(entity.AssignedToId()));\r\n                if (entity.TripId() !== undefined)\r\n                    entity.Trip(this.GetTripById(entity.TripId()));\r\n                if (entity.SuperJobId() !== undefined) {\r\n                    entity.SuperJob(this.GetJobById(entity.SuperJobId()));\r\n                    entity.SuperJob().SubJobs.push(entity);\r\n                }\r\n            }\r\n            for (let entity of this.Harbours()) {\r\n                entity.Album(this.GetAlbumById(entity.AlbumId()));\r\n            }\r\n            for (let entity of this.Locations()) {\r\n                entity.Address(this.GetAddressById(entity.AddressId()));\r\n                this.GetHarbourById(entity.HarbourId()).Locations.push(entity);\r\n            }\r\n            for (let entity of this.AlbumImages()) {\r\n                this.GetAlbumById(entity.AlbumId).Images.push(this.GetImageById(entity.ImageId));\r\n            }\r\n            for (let connection of mapViewModel.WaypointConnections()) {\r\n                const polyline = mapViewModel.AddPolyline([\r\n                    mapViewModel.GetWayPointById(connection.Waypoint1Id), mapViewModel\r\n                        .GetWayPointById(connection.Waypoint2Id)\r\n                ]);\r\n                addDummyHandle(polyline);\r\n            }\r\n            $(\"#loadingOverlay\").remove();\r\n        }\r\n    }\r\n\r\n    InitializeMap() {\r\n        mapViewModel.SelectedHarbour(undefined);\r\n        for (let wp of mapViewModel.Waypoints()) {\r\n            if (wp.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(wp.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Waypoint, wp);\r\n        }\r\n        for (let h of mapViewModel.Harbours()) {\r\n            if (h.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(h.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Harbour, h);\r\n        }\r\n        for (let p of mapViewModel.Polylines) {\r\n            if (p.DummyHandle.marker !== undefined)\r\n                mapViewModel.Map.removeLayer(p.DummyHandle.marker);\r\n            mapViewModel.CreateMarker(MarkerType.Dummy, p.DummyHandle);\r\n        }\r\n        if (mapViewModel.MapMode() === MapMode.Admin) {\r\n            for (let p of mapViewModel.Polylines) {\r\n                p.addTo(mapViewModel.Map);\r\n            }\r\n            mapViewModel.Map.contextmenu.enable();\r\n        } else {\r\n            for (let p of mapViewModel.Polylines) {\r\n                mapViewModel.Map.removeLayer(p);\r\n            }\r\n            mapViewModel.Map.contextmenu.disable();\r\n        }\r\n    }\r\n\r\n    Map: L.mapbox.Map;\r\n\r\n    GetWaypointById(id: number): ClientModel.Waypoint {\r\n        for (let entity of this.Waypoints()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Waypoint with id \" + id + \" found\";\r\n    }\r\n\r\n    GetHarbourById(id: number): ClientModel.Harbour {\r\n        for (let entity of this.Harbours()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Harbour with id \" + id + \" found\";\r\n    }\r\n\r\n    GetPersonById(id: number): ClientModel.Person {\r\n        for (let entity of this.Persons()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Person with id \" + id + \" found\";\r\n    }\r\n\r\n    GetJobById(id: number): ClientModel.Job {\r\n        for (let entity of this.Jobs()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Job with id \" + id + \" found\";\r\n    }\r\n\r\n    GetTripById(id: number): ClientModel.Trip {\r\n        for (let entity of this.Trips()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Trip with id \" + id + \" found\";\r\n    }\r\n\r\n    GetAddressById(id: number): ClientModel.Address {\r\n        for (let entity of this.Addresses()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Address with id \" + id + \" found\";\r\n    }\r\n\r\n    GetImageById(id: number): ClientModel.Image {\r\n        for (let entity of this.Images()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Image with id \" + id + \" found\";\r\n    }\r\n\r\n    GetTackById(id: number): ClientModel.Tack {\r\n        for (let entity of this.Tacks()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n    }\r\n\r\n    GetAlbumById(id: number): ClientModel.Album {\r\n        for (let entity of this.Albums()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Tack with id \" + id + \" found\";\r\n    }\r\n\r\n    GetLocationById(id: number): ClientModel.Location {\r\n        for (let entity of this.Locations()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        for (let entity of this.Restaurants()) {\r\n            if (entity.Id() === id) return entity;\r\n        }\r\n        //throw \"No Location with id \" + id + \" found\";\r\n    }\r\n\r\n    WaypointsLoaded = false;\r\n    WaypointConnectionsLoaded = false;\r\n    PersonsLoaded = false;\r\n    JobsLoaded = false;\r\n    TripsLoaded = false;\r\n    AddressesLoaded = false;\r\n    ImagesLoaded = false;\r\n    AlbumsLoaded = false;\r\n    WaypointTacksLoaded = false;\r\n    TacksLoaded = false;\r\n    LocationsLoaded = false;\r\n    AlbumImagesLoaded = false;\r\n\r\n    Waypoints = ko.observableArray<ClientModel.Waypoint>();\r\n    WaypointConnections = ko.observableArray<ServerModel.WaypointConnection>();\r\n    Harbours = ko.observableArray<ClientModel.Harbour>();\r\n    Persons = ko.observableArray<ClientModel.Person>();\r\n    Jobs = ko.observableArray<ClientModel.Job>();\r\n    Trips = ko.observableArray<ClientModel.Trip>();\r\n    Addresses = ko.observableArray<ClientModel.Address>();\r\n    Images = ko.observableArray<ClientModel.Image>();\r\n    Tacks = ko.observableArray<ClientModel.Tack>();\r\n    Locations = ko.observableArray<ClientModel.Location>();\r\n    Supermarkets = ko.observableArray<ClientModel.Supermarket>();\r\n    Restaurants = ko.observableArray<ClientModel.Restaurant>();\r\n    Albums = ko.observableArray<ClientModel.Album>();\r\n    AlbumImages = ko.observableArray<ServerModel.AlbumImage>();\r\n\r\n\r\n    SelectedWaypoint = ko.observable<ClientModel.Waypoint>();\r\n    SelectedHarbour = ko.observable<ClientModel.Harbour>();\r\n    SelectedPerson = ko.observable<ClientModel.Person>();\r\n    SelectedJob = ko.observable<ClientModel.Job>();\r\n    SelectedTrip = ko.observable<ClientModel.Trip>();\r\n    SelectedAddress = ko.observable<ClientModel.Address>();\r\n    SelectedImage = ko.observable<ClientModel.Image>();\r\n    SelectedTack = ko.observable<ClientModel.Tack>();\r\n    SelectedLocation = ko.observable<ClientModel.Location>();\r\n    SelectedSupermarket = ko.observable<ClientModel.Supermarket>();\r\n    SelectedRestaurant = ko.observable<ClientModel.Restaurant>();\r\n\r\n    InitGallery() {\r\n        const items = new Array<PhotoSwipe.Item>();\r\n        const currImage: ClientModel.Image = this as any;\r\n        for (let data of mapViewModel.SelectedHarbour().Album().Images()) {\r\n            items.push(({\r\n                h: data.Height(),\r\n                w: data.Width(),\r\n                src: data.Path()\r\n            } as any));\r\n        }\r\n        gallery = new PhotoSwipe(pswp,\r\n            PhotoSwipeUI_Default,\r\n            items,\r\n            {\r\n                index: mapViewModel.SelectedHarbour().Album().Images.indexOf(currImage) as number,\r\n                getThumbBoundsFn: (index: number): { x: number; y: number; w: number } => {\r\n                    const elem = $(\".images:first img\")[index];\r\n                    var padding = parseFloat(window.getComputedStyle(elem, null)\r\n                        .getPropertyValue(\"padding-left\")\r\n                        .replace(\"px\", \"\"));\r\n                    elem.scrollIntoView();\r\n                    const bounds = elem.getBoundingClientRect();\r\n                    return {\r\n                        x: bounds.left + padding,\r\n                        y: bounds.top + window.screenY + padding,\r\n                        w: bounds.width - (2 * padding)\r\n                    };\r\n                }\r\n            });\r\n        gallery.init();\r\n    }\r\n\r\n    AddHarbour(): void {\r\n        const harbour = mapViewModel.CreateHarbour(`Hafen ${this.Harbours.length}`, this.Map.getCenter());\r\n        mapViewModel.Harbours.push(harbour);\r\n        harbour.SaveToServer();\r\n    }\r\n\r\n    RemoveHarbour = () => {\r\n        mapViewModel.SelectedWaypoint().RemoveFromMap();\r\n        mapViewModel.Waypoints.remove(this.SelectedWaypoint());\r\n    };\r\n    RemoveWaypoint = () => {\r\n        mapViewModel.SelectedHarbour().RemoveFromMap();\r\n        mapViewModel.Harbours.remove(this.SelectedHarbour());\r\n        mapViewModel.Harbours.remove(this.SelectedHarbour());\r\n    };\r\n\r\n    //CopyHarbour(h1: Harbour, h2: Harbour): void {\r\n    //    this.CopyWaypoint(h1, h2);\r\n    //}\r\n\r\n    //CopyWaypoint(w1: Waypoint, w2: Waypoint) {\r\n    //    w2.WaypointNumber(w1.WaypointNumber());\r\n    //    w2.Latitude(w1.Latitude());\r\n    //    w2.Longitude(w1.Longitude());\r\n    //    w2.Name(w1.Name());\r\n    //    w2.Description(w1.Description());\r\n    //}\r\n\r\n    AddPolyline(waypoint?: Waypoint): L.Polyline;\r\n    AddPolyline(waypoints?: Waypoint[]): L.Polyline;\r\n    AddPolyline(arg?): L.Polyline {\r\n        const polyline = new L.Polyline([]);\r\n        mapViewModel.Polylines.push(polyline);\r\n        if (mapViewModel.MapMode() === MapMode.Admin)\r\n            polyline.addTo(this.Map);\r\n        polyline.Waypoints = new Array();\r\n        if (arg !== undefined)\r\n            if (arg instanceof Waypoint)\r\n                (arg as Waypoint).AddToPolyline(polyline);\r\n            else\r\n                for (let waypoint of arg as Waypoint[]) {\r\n                    waypoint.AddToPolyline(polyline);\r\n                }\r\n        polyline.addEventListener(\"mouseover\",\r\n            () => {\r\n                mapViewModel.HoveredPolyine = polyline;\r\n            });\r\n        return polyline;\r\n    }\r\n\r\n\r\n    MapMode = ko.observable<MapMode>();\r\n    DrawingLatLng: L.LatLng;\r\n    DrawingSourceWaypoint: Waypoint;\r\n    DrawingTargetWaypoint: Waypoint;\r\n    RemovePolyline = (polyline: L.Polyline) => {\r\n        this.Map.removeLayer(polyline);\r\n        this.DrawingPolyline = undefined;\r\n    };\r\n\r\n    GetMapMode(): MapMode {\r\n        if (this.DrawingPolyline !== undefined && this.DrawingLatLng !== undefined)\r\n            return MapMode.RouteDrawing;\r\n        return this.MapMode();\r\n    }\r\n\r\n    GetWayPointById(id: number): Waypoint {\r\n        for (let waypoint of this.Waypoints()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        for (let waypoint of this.Harbours()) {\r\n            if (waypoint.Id() === id)\r\n                return waypoint;\r\n        }\r\n        throw `No Waypoint with id ${id} in model`;\r\n    }\r\n\r\n    CalculateDistances(start = mapViewModel.SelectedHarbour(), target?: ClientModel.Waypoint) {\r\n\r\n        const waypoints: Array<Waypoint> = [start];\r\n        const calculating = new Array<WaypointDistance>();\r\n        const calculated = new Array<WaypointDistance>();\r\n        const calculateRoute = target !== undefined;\r\n        calculating.push(new WaypointDistance(undefined, start, 0, waypoints, calculateRoute));\r\n        //for (let waypoint of mapViewModel.Waypoints()) {\r\n        //    waypoints.push(new WaypointDistance(null, waypoint, Number.POSITIVE_INFINITY));\r\n        //}\r\n        //for (let harbour of mapViewModel.Harbours()) {\r\n        //    if (harbour !== start) {\r\n        //        waypoints.push(new WaypointDistance(null, harbour, Number.POSITIVE_INFINITY));\r\n        //    }\r\n        //}\r\n        if (calculateRoute) {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.RoutePrecessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.RoutePrecessor(undefined);\r\n            }\r\n        } else {\r\n            for (let wp of mapViewModel.Waypoints()) {\r\n                wp.Precessor(undefined);\r\n            }\r\n            for (let h of mapViewModel.Harbours()) {\r\n                h.Precessor(undefined);\r\n            }\r\n        }\r\n        while (calculating.length > 0) {\r\n            let minimalDist = Number.POSITIVE_INFINITY;\r\n            let minimalWP: WaypointDistance;\r\n            for (let wp of calculating) {\r\n                for (let cWP of wp.ConnectedWayPoints) {\r\n                    if ((calculateRoute ? cWP.RoutePrecessor() : cWP.Precessor()) !== undefined)\r\n                        removeFromArray(wp.ConnectedWayPoints, cWP);\r\n                }\r\n                if (wp.ConnectedWayPoints.length === 0) {\r\n                    removeFromArray(calculating, wp);\r\n                    calculated.push(wp);\r\n                } else {\r\n                    const dist = wp.Distance + wp.ConnectedWayPoints[0].LatLng.distanceTo(wp.LatLng);\r\n                    if (dist < minimalDist) {\r\n                        minimalDist = dist;\r\n                        minimalWP = wp;\r\n                    }\r\n                }\r\n            }\r\n            if (minimalWP !== undefined) {\r\n                calculating.push(new WaypointDistance(minimalWP.Waypoint,\r\n                    minimalWP.ConnectedWayPoints.shift(),\r\n                    minimalDist,\r\n                    waypoints,\r\n                    calculateRoute));\r\n                //if (minimalWP.Waypoint === target)\r\n                //    break;\r\n            }\r\n        }\r\n        if (calculateRoute)\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.RouteDistance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n        else\r\n            for (let wp of calculated) {\r\n                wp.Waypoint.Distance(Math.round(wp.Distance / 100) / 10);\r\n                //wp.Waypoint.Precessor(wp.Precessor);\r\n            }\r\n    }\r\n\r\n    private highlightedRoute: L.Polyline;\r\n    private routeFixed = false;\r\n    private previousBounds: L.LatLngBounds;\r\n    private noRevertToPreviousBounds = false;\r\n\r\n    ShowRoute(h: ClientModel.Waypoint) {\r\n        if (mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.HideRoute();\r\n        }\r\n        if (h === undefined)\r\n            h = (this as any);\r\n        if (!(h instanceof ClientModel.Harbour))\r\n            return;\r\n        const latLngs = [h.LatLng];\r\n        let dist = h.Distance();\r\n        if (dist === undefined)\r\n            dist = 0;\r\n        while (h.Precessor() !== undefined) {\r\n            h = h.Precessor();\r\n            latLngs.push(h.LatLng);\r\n        }\r\n        mapViewModel.highlightedRoute = L.polyline(latLngs);\r\n        mapViewModel.highlightedRoute.addTo(mapViewModel.Map);\r\n        mapViewModel.highlightedRoute.bindLabel(dist.toString() + \" km\", { noHide: true });\r\n        mapViewModel.FitBounds(mapViewModel.highlightedRoute.getBounds());\r\n    }\r\n\r\n    FitBounds(bounds: L.LatLngBounds) {\r\n        const map = mapViewModel.Map;\r\n        const currentBounds = map.getBounds();\r\n        if (!currentBounds.contains(bounds)) {\r\n            if (mapViewModel.previousBounds === undefined)\r\n                mapViewModel.previousBounds = currentBounds;\r\n            map.fitBounds(bounds);\r\n        }\r\n    }\r\n\r\n    HideRoute(force = false) {\r\n        if ((!mapViewModel.routeFixed || force) && mapViewModel.highlightedRoute !== undefined) {\r\n            mapViewModel.routeFixed = false;\r\n            mapViewModel.Map.removeLayer(mapViewModel.highlightedRoute);\r\n            mapViewModel.highlightedRoute = undefined;\r\n            if (!mapViewModel.noRevertToPreviousBounds && mapViewModel.previousBounds !== undefined) {\r\n                const tmpBounds = mapViewModel.previousBounds;\r\n                mapViewModel.previousBounds = undefined;\r\n                window.setTimeout(() => {\r\n                    if (mapViewModel.previousBounds === undefined)\r\n                        mapViewModel.Map.fitBounds(tmpBounds);\r\n                    else\r\n                        mapViewModel.previousBounds = tmpBounds;\r\n                }, 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    FixRoute() {\r\n        mapViewModel.routeFixed = true;\r\n        mapViewModel.previousBounds = undefined;\r\n    }\r\n\r\n    CreateWaypoint(latLng: L.LatLng, markerType: MarkerType): Waypoint {\r\n        const wp = new Waypoint(latLng, markerType, mapViewModel.Map as L.mapbox.Map);\r\n        this.InitializeWaypoint(wp, markerType);\r\n        return wp;\r\n    }\r\n\r\n    InitializeWaypoint(wp: Waypoint, markerType: MarkerType) {\r\n        this.CreateMarker(markerType, wp);\r\n    }\r\n\r\n    CreateMarker(markerType: MarkerType, wp: ClientModel.Waypoint) {\r\n        if (mapViewModel.MapMode() === MapMode.Admin || markerType === MarkerType.Harbour) {\r\n            const options: L.MarkerOptions = {\r\n                draggable: (mapViewModel.MapMode() === MapMode.Admin)\r\n            };\r\n            if (markerType === MarkerType.Dummy) {\r\n                options.opacity = 0;\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin &&\r\n                (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy)) {\r\n                options.icon = new L.Icon({\r\n                    iconUrl: \"/images/waypointhandle.png\",\r\n                    iconSize: new L.Point(10, 10, true),\r\n                    className: \"waypoint\"\r\n                });\r\n\r\n            }\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                options.contextmenu = true;\r\n                options.contextmenuInheritItems = false;\r\n                if (markerType === MarkerType.Harbour) {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.EditingHarbour(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.DeletingHarbour(this) }\r\n                        }\r\n                    ];\r\n                } else {\r\n                    options.contextmenuItems = [\r\n                        {\r\n                            text: \"Bearbeiten\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.EditingWaypoint(this) }\r\n                        },\r\n                        {\r\n                            text: \"Löschen\",\r\n                            context: wp,\r\n                            callback: function () { mapViewModel.DeletingWaypoint(this) }\r\n                        }\r\n                    ];\r\n                }\r\n            }\r\n\r\n            const marker = new L.Marker(wp.LatLng, options);\r\n            marker.addTo(this.Map);\r\n            marker.Waypoint = wp;\r\n            wp.marker = marker;\r\n            if (mapViewModel.MapMode() === MapMode.Admin) {\r\n                if (markerType === MarkerType.Dummy)\r\n                    marker.addEventListener(\"mouseout\", (e) => {\r\n                        if (e.target.Waypoint.IsDummy()) {\r\n                            mapViewModel.HoveredPolyine = undefined;\r\n                        }\r\n                    })\r\n                marker.addEventListener(\"drag\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        wp.SetLatLng(wp.marker.getLatLng());\r\n                    });\r\n                if (markerType === MarkerType.Waypoint || markerType === MarkerType.Dummy) {\r\n                    this.WaypointMarkers.push(wp.marker);\r\n                    wp.marker.Point = mapViewModel.Map.latLngToContainerPoint(wp.LatLng);\r\n                }\r\n                wp.marker.addEventListener(\"click\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        if (wp.IsDummy()) {\r\n                            mapViewModel.Waypoints.push(wp);\r\n                            wp.convertFromDummyHandle();\r\n                        }\r\n                        if (mapViewModel.GetMapMode() === MapMode.RouteDrawing) {\r\n                            if (!wp.IsInPolyline(mapViewModel.DrawingPolyline)) {\r\n                                ServerApi.WaypointConnectionApi.GetDefault()\r\n                                    .Connect(wp.Id(), mapViewModel.DrawingPolyline.Waypoints[0].Id());\r\n                                wp.AddToPolyline(mapViewModel.DrawingPolyline);\r\n                                removeFromPolyline(mapViewModel.DrawingPolyline, mapViewModel.DrawingLatLng);\r\n                                addDummyHandle(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            } else {\r\n                                removePolyline(mapViewModel.DrawingPolyline);\r\n                                mapViewModel.DrawingPolyline = undefined;\r\n                                mapViewModel.DrawingLatLng = undefined;\r\n                            }\r\n                        }\r\n                    });\r\n                wp.marker.addEventListener(\"dblclick\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        mapViewModel.DrawingPolyline = mapViewModel.AddPolyline(wp);\r\n                        mapViewModel.DrawingLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\r\n                        mapViewModel.DrawingPolyline.addLatLng(mapViewModel.DrawingLatLng);\r\n                    });\r\n                if (markerType === MarkerType.Dummy)\r\n                    wp.marker.addOneTimeEventListener(\"drag\",\r\n                        (e: L.LeafletMouseEvent) => {\r\n                            wp.convertFromDummyHandle();\r\n                            mapViewModel.Waypoints.push(wp);\r\n                        });\r\n                //else if (markerType === MarkerType.Waypoint) {\r\n                //    wp.Name(`Wegpunkt ${mapViewModel.Waypoints().length + 1}`);\r\n                //}\r\n                wp.marker.addEventListener(\"dragend\",\r\n                    (e: L.LeafletMouseEvent) => {\r\n                        wp.SaveToServer();\r\n                    });\r\n            } else if (markerType === MarkerType.Harbour) {\r\n                wp.marker.addEventListener(\"mouseover\",\r\n                    () => {\r\n                        if (mapViewModel.SelectedHarbour() !== undefined)\r\n                            mapViewModel.ShowRoute(wp);\r\n                    });\r\n                wp.marker.addEventListener(\"click\", () => mapViewModel.SelectedHarbour(wp as ClientModel.Harbour));\r\n            }\r\n        }\r\n    }\r\n\r\n    CreateHarbour(name: string, latLng: L.LatLng) {\r\n        const h = new Harbour(name, latLng, this.Map as L.mapbox.Map);\r\n        this.InitializeWaypoint(h, MarkerType.Harbour);\r\n        return h;\r\n    }\r\n\r\n    SaveHarbour() {\r\n        const harbour: ClientModel.Harbour = this as any;\r\n        if (harbour.Id() === undefined) {\r\n            mapViewModel.Harbours.push(harbour);\r\n        }\r\n        harbour.SaveToServer()\r\n            .done(() => {\r\n                mapViewModel.EditingHarbour(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteHarbour() {\r\n        var h = mapViewModel.DeletingHarbour();\r\n        ServerApi.WaypointConnectionApi.GetDefault()\r\n            .Disconnect(h.Id())\r\n            .done(() => {\r\n                h.DeleteOnServer()\r\n                    .done(() => {\r\n                        h.RemoveFromMap();\r\n                        mapViewModel.Harbours.remove(h);\r\n                        mapViewModel.DeletingHarbour(undefined);\r\n                    });\r\n            });\r\n    }\r\n\r\n    SaveWaypoint() {\r\n        const waypoint: ClientModel.Waypoint = this as any;\r\n        waypoint.SaveToServer()\r\n            .done(() => {\r\n                mapViewModel.EditingWaypoint(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteWaypoint() {\r\n        var wp = mapViewModel.DeletingWaypoint();\r\n        ServerApi.WaypointConnectionApi.GetDefault()\r\n            .Disconnect(wp.Id())\r\n            .done(() => {\r\n                wp.DeleteOnServer()\r\n                    .done(() => {\r\n                        wp.RemoveFromMap();\r\n                        mapViewModel.Waypoints.remove(wp);\r\n                        mapViewModel.DeletingWaypoint(undefined);\r\n                    });\r\n            });\r\n    };\r\n\r\n\r\n    SaveJob() {\r\n        const job: ClientModel.Job = this as any;\r\n        const newJob = job.Id() === undefined;\r\n        job.SaveToServer()\r\n            .done(() => {\r\n                if (newJob) {\r\n                    mapViewModel.Jobs.push(mapViewModel.EditingJob());\r\n                    if (mapViewModel.EditingJob().SuperJobId() !== undefined)\r\n                        mapViewModel.GetJobById(mapViewModel.EditingJob().SuperJobId()).SubJobs.push(mapViewModel.EditingJob());\r\n                }\r\n                mapViewModel.EditingJob(undefined);\r\n            });\r\n    }\r\n\r\n    DeleteJob() {\r\n        const job = mapViewModel.DeletingJob();\r\n        job.DeleteOnServer()\r\n            .done(() => {\r\n                mapViewModel.Jobs.remove(job);\r\n                if (job.SuperJobId() !== undefined)\r\n                    mapViewModel.GetJobById(job.SuperJobId()).SubJobs.remove(job);\r\n                mapViewModel.DeletingJob(undefined);\r\n            });\r\n    }\r\n\r\n\r\n    DrawingPolyline: L.Polyline;\r\n    Polylines = new Array<L.Polyline>();\r\n    EditingHarbour = ko.observable<Harbour>();\r\n    DeletingHarbour = ko.observable<Harbour>();\r\n    EditingWaypoint = ko.observable<Waypoint>();\r\n    DeletingWaypoint = ko.observable<Waypoint>();\r\n    DeletingJob = ko.observable<Job>();\r\n    EditingJob = ko.observable<Job>();\r\n    WaypointMarkers = new Array();\r\n    HoveredPolyine: L.Polyline;\r\n\r\n}\r\n\r\nvar mapViewModel = new MapViewModel(MapMode.View);\r\nko.applyBindings(mapViewModel);\r\nvar dropzoneModalOpenedByDrag = false;\r\n\r\nvar dropzoneModal = $(\"#dropzoneModal\");\r\nvar editingHarbourModal = $(\"#editingHarbourModal\");\r\nvar deletingHarbourModal = $(\"#deletingHarbourModal\");\r\nvar editingWaypointModal = $(\"#editingWaypointModal\");\r\nvar deletingWaypointModal = $(\"#deletingWaypointModal\");\r\nvar deletingJobModal = $(\"#deletingJobModal\");\r\nvar editingJobModal = $(\"#editingJobModal\");\r\nvar jobOverviewModal = $(\"#jobOverviewModal\");\r\nvar dropzone: Dropzone;\r\nvar hasDrag = false;\r\nvar uploadModalVisible = false;\r\nvar pswp = $(\".pswp\")[0];\r\n\r\nvar leftSidebar = new Sidebar($(\"#leftSidebar\"));\r\nvar rightSidebar = new Sidebar($(\"#rightSidebar\"));\r\nvar bottomSidebar = new Sidebar($(\"#bottomSidebar\"));\r\nvar harbourInfo = $(\"#harbourInfo\");\r\nDropzone.options.dropzone =\r\n    {\r\n        acceptedFiles: \"image/jpeg,image/png\",\r\n        dictInvalidFileType: \"Dieser Dateityp wird nicht unterstützt\",\r\n        dictDefaultMessage: \"Dateien hier ablegen\",\r\n        init() {\r\n            dropzone = this;\r\n            dropzone.on(\"success\",\r\n                (e, data: ServerModel.Image) => {\r\n                    var image = new ClientModel.Image().LoadFromServerEntity(data);\r\n                    mapViewModel.Images.push(image);\r\n                    mapViewModel.GetAlbumById(image.ParentAlbumId()).Images.push(image);\r\n                });\r\n            dropzone.on(\"queuecomplete\",\r\n                () => {\r\n                    if (dropzoneModalOpenedByDrag)\r\n                        dropzoneModal.modal(\"hide\");\r\n                });\r\n            dropzone.on(\"dragover\",\r\n                () => {\r\n                    hasDrag = true;\r\n                });\r\n        }\r\n    };\r\n\r\ndocument.ondragenter =\r\n    (e: DragEvent) => {\r\n        if (!uploadModalVisible &&\r\n            !hasDrag &&\r\n            !dropzoneModalOpenedByDrag &&\r\n            dropzoneModal.is(\":not(.in)\") &&\r\n            e.dataTransfer.types[0] === \"Files\" &&\r\n            mapViewModel.SelectedHarbour() !== undefined) {\r\n            dropzoneModal.modal(\"show\");\r\n            uploadModalVisible = true;\r\n            dropzoneModalOpenedByDrag = true;\r\n        }\r\n\r\n        hasDrag = true;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndocument.ondragover =\r\n    (e: DragEvent) => {\r\n        hasDrag = true;\r\n    };\r\ndocument.ondragleave =\r\n    (e: DragEvent) => {\r\n        if (uploadModalVisible && hasDrag && dropzoneModalOpenedByDrag && dropzone.getQueuedFiles().length === 0 ||\r\n            dropzone.getUploadingFiles().length === 0) {\r\n            hasDrag = false;\r\n            window.setTimeout(() => {\r\n                if (!hasDrag) {\r\n                    dropzoneModal.modal(\"hide\");\r\n                    uploadModalVisible = false;\r\n                }\r\n            },\r\n                1000);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\ndropzoneModal.on(\"hide.bs.modal\",\r\n    e => {\r\n        if (dropzone.getQueuedFiles().length > 0 || dropzone.getUploadingFiles().length > 0) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            alert(\"Das Fenster kann nicht geschlossen werden, während Dateien hochgeladen werden.\");\r\n            return false;\r\n        } else {\r\n            dropzone.removeAllFiles();\r\n            dropzoneModalOpenedByDrag = false;\r\n        }\r\n    });\r\nvar gallery: PhotoSwipe<PhotoSwipe.Options>;\r\n\r\n$(\".modal\").on(\"hidden.bs.modal\", function (event) {\r\n    $(this).removeClass(\"fv-modal-stack\");\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") - 1);\r\n});\r\n\r\n\r\n$(\".modal\").on(\"shown.bs.modal\", function (event) {\r\n\r\n    // keep track of the number of open modals\r\n\r\n    if (typeof ($(\"body\").data(\"fv_open_modals\")) == \"undefined\") {\r\n        $(\"body\").data(\"fv_open_modals\", 0);\r\n    }\r\n\r\n\r\n    // if the z-index of this modal has been set, ignore.\r\n\r\n    if ($(this).hasClass(\"fv-modal-stack\")) {\r\n        return;\r\n    }\r\n\r\n    $(this).addClass(\"fv-modal-stack\");\r\n\r\n    $(\"body\").data(\"fv_open_modals\", $(\"body\").data(\"fv_open_modals\") + 1);\r\n\r\n    $(this).css(\"z-index\", 1040 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n    $(\".modal-backdrop\").not(\".fv-modal-stack\")\r\n        .css(\"z-index\", 1039 + (10 * $(\"body\").data(\"fv_open_modals\")));\r\n\r\n\r\n    $(\".modal-backdrop\").not(\"fv-modal-stack\")\r\n        .addClass(\"fv-modal-stack\");\r\n\r\n});\r\n\r\n\r\n"],"sourceRoot":"/source/"}