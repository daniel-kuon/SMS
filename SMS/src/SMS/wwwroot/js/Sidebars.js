var SidebarPositions;
(function (SidebarPositions) {
    SidebarPositions[SidebarPositions["Left"] = 0] = "Left";
    SidebarPositions[SidebarPositions["Right"] = 1] = "Right";
    SidebarPositions[SidebarPositions["Bottom"] = 2] = "Bottom";
})(SidebarPositions || (SidebarPositions = {}));
var Sidebar = (function () {
    function Sidebar(sidebarElem, transitionTime) {
        if (transitionTime === void 0) { transitionTime = 400; }
        this.sidebarElem = sidebarElem;
        this.transitionTime = transitionTime;
        this.map = $("#map");
        this.active = false;
        if (sidebarElem.is(".right")) {
            this.position = SidebarPositions.Right;
            this.bodyClass = "hasRightSidebar";
        }
        else if (sidebarElem.is(".left")) {
            this.bodyClass = "hasLeftSidebar";
            this.position = SidebarPositions.Left;
        }
        else if (sidebarElem.is(".bottom")) {
            this.bodyClass = "hasBottomSidebar";
            this.position = SidebarPositions.Bottom;
        }
    }
    Sidebar.prototype.IsActiv = function () {
        return this.active;
    };
    Sidebar.prototype.Show = function () {
        if (!this.active) {
            this.map.addClass(this.bodyClass, this.transitionTime, function () { return mapViewModel.Map.invalidateSize(true); });
            this.sidebarElem.addClass("active", this.transitionTime);
            this.active = true;
            if (this.position === SidebarPositions.Bottom) {
                $(".sidebar").not(".bottom").addClass("hasBottomSidebar", this.transitionTime);
            }
        }
    };
    Sidebar.prototype.Hide = function () {
        if (this.active) {
            this.map.removeClass(this.bodyClass, this.transitionTime, function () { return mapViewModel.Map.invalidateSize(true); });
            this.sidebarElem.removeClass("active", this.transitionTime);
            this.active = false;
            if (this.position === SidebarPositions.Bottom)
                $(".sidebar").not(".bottom").removeClass("hasBottomSidebar", this.transitionTime);
        }
    };
    return Sidebar;
}());

//# sourceMappingURL=data:application/json;base64,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cEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7Z0JBQzFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMxRixDQUFDO0lBQ0wsQ0FBQztJQXlCTCxjQUFDO0FBQUQsQ0FwRUEsQUFvRUMsSUFBQSIsImZpbGUiOiJTaWRlYmFycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImVudW0gU2lkZWJhclBvc2l0aW9ucyB7XHJcbiAgICBMZWZ0LFxyXG4gICAgUmlnaHQsXHJcbiAgICBCb3R0b21cclxufVxyXG5cclxuY2xhc3MgU2lkZWJhciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzaWRlYmFyRWxlbTogSlF1ZXJ5LCBwcml2YXRlIHRyYW5zaXRpb25UaW1lID0gNDAwKSB7XHJcbiAgICAgICAgaWYgKHNpZGViYXJFbGVtLmlzKFwiLnJpZ2h0XCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBTaWRlYmFyUG9zaXRpb25zLlJpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLmJvZHlDbGFzcyA9IFwiaGFzUmlnaHRTaWRlYmFyXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzaWRlYmFyRWxlbS5pcyhcIi5sZWZ0XCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm9keUNsYXNzID0gXCJoYXNMZWZ0U2lkZWJhclwiO1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gU2lkZWJhclBvc2l0aW9ucy5MZWZ0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2lkZWJhckVsZW0uaXMoXCIuYm90dG9tXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm9keUNsYXNzID0gXCJoYXNCb3R0b21TaWRlYmFyXCI7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBTaWRlYmFyUG9zaXRpb25zLkJvdHRvbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBib2R5Q2xhc3M6IHN0cmluZztcclxuICAgIHByaXZhdGUgcG9zaXRpb246IFNpZGViYXJQb3NpdGlvbnM7XHJcbiAgICBwcml2YXRlIG1hcCA9ICQoXCIjbWFwXCIpO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICBJc0FjdGl2KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICBTaG93KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5hY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ2xhc3ModGhpcy5ib2R5Q2xhc3MsIHRoaXMudHJhbnNpdGlvblRpbWUsICgpID0+IG1hcFZpZXdNb2RlbC5NYXAuaW52YWxpZGF0ZVNpemUodHJ1ZSkpO1xyXG4gICAgICAgICAgICB0aGlzLnNpZGViYXJFbGVtLmFkZENsYXNzKFwiYWN0aXZlXCIsIHRoaXMudHJhbnNpdGlvblRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSBTaWRlYmFyUG9zaXRpb25zLkJvdHRvbSkge1xyXG4gICAgICAgICAgICAgICAgJChcIi5zaWRlYmFyXCIpLm5vdChcIi5ib3R0b21cIikuYWRkQ2xhc3MoXCJoYXNCb3R0b21TaWRlYmFyXCIsIHRoaXMudHJhbnNpdGlvblRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEhpZGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUNsYXNzKHRoaXMuYm9keUNsYXNzLCB0aGlzLnRyYW5zaXRpb25UaW1lLCgpPT5tYXBWaWV3TW9kZWwuTWFwLmludmFsaWRhdGVTaXplKHRydWUpKTtcclxuICAgICAgICAgICAgdGhpcy5zaWRlYmFyRWxlbS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiLCB0aGlzLnRyYW5zaXRpb25UaW1lKTtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucG9zaXRpb24gPT09IFNpZGViYXJQb3NpdGlvbnMuQm90dG9tKVxyXG4gICAgICAgICAgICAgICAgJChcIi5zaWRlYmFyXCIpLm5vdChcIi5ib3R0b21cIikucmVtb3ZlQ2xhc3MoXCJoYXNCb3R0b21TaWRlYmFyXCIsIHRoaXMudHJhbnNpdGlvblRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL0FkZChlbGVtOiBKUXVlcnkpIHtcclxuICAgIC8vICAgIGVsZW0uZGF0YShcInNpZGViYXJcIiwgdGhpcyk7XHJcbiAgICAvLyAgICBpZiAodGhpcy5hY3RpdmUpIHtcclxuICAgIC8vICAgICAgICBlbGVtLmhpZGUoKTtcclxuICAgIC8vICAgICAgICBlbGVtLnNob3coXCJibGluZFwiLCB7fSwgdGhpcy50cmFuc2l0aW9uVGltZSk7XHJcbiAgICAvLyAgICAgICAgZWxlbS5hcHBlbmRUbyh0aGlzLnNpZGViYXJFbGVtKTtcclxuICAgIC8vICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgZWxlbS5zaG93KCk7XHJcbiAgICAvLyAgICAgICAgZWxlbS5hcHBlbmRUbyh0aGlzLnNpZGViYXJFbGVtKTtcclxuICAgIC8vICAgICAgICB0aGlzLlNob3coKTtcclxuICAgIC8vICAgIH1cclxuICAgIC8vfVxyXG5cclxuICAgIC8vUmVtb3ZlKGVsZW06IEpRdWVyeSkge1xyXG4gICAgLy8gICAgaWYgKGVsZW0uZGF0YShcInNpZGViYXJcIikgPT09IHRoaXMpIHtcclxuICAgIC8vICAgICAgICBpZiAodGhpcy5zaWRlYmFyRWxlbS5jaGlsZHJlbigpLmxlbmd0aCA+IDEpIHtcclxuICAgIC8vICAgICAgICAgICAgZWxlbS5oaWRlKFwiYmxpbmRcIiwge30sIHRoaXMudHJhbnNpdGlvblRpbWUsICgpID0+IGVsZW0ucmVtb3ZlRGF0YShcInNpZGViYXJcIikucmVtb3ZlKCkpO1xyXG4gICAgLy8gICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgIHRoaXMuSGlkZSgpO1xyXG4gICAgLy8gICAgICAgICAgICBlbGVtLnJlbW92ZURhdGEoXCJzaWRlYmFyXCIpLnJlbW92ZSgpO1xyXG4gICAgLy8gICAgICAgIH1cclxuICAgIC8vICAgIH1cclxuICAgIC8vfVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
