{"version":3,"sources":["wwwroot/js/knockout.pickadateime.js"],"names":["ko","bindingHandlers","pickadate","init","element","valueAccessor","allBindingsAccessor","options","utils","unwrapObservable","$","Object","assign","onSet","valueBinding","value","pickatime","pickadatetime","timeOptions","dateOptions","initialValue","$element","isObservable","undefined","time","date","dateField","timeField","inputContainer","append","datepicker","timepicker","extend","container","onRender","on","close","open","prependTo","this","$root","find","item","select","off","val","get","focus","obj","setHours","Math","floor","setMinutes","toJSON","event","stopPropagation","initialDate","Date","set","getHours","getMinutes","setTimeout"],"mappings":"AACAA,GAAGC,gBAAgBC,WACfC,KAAM,SAASC,EAASC,EAAeC,GACnC,GAAIC,GAAUP,GAAGQ,MAAMC,iBAAiBJ,QACxCK,GAAEN,GACGF,UAAUS,OAAOC,UACdL,GAEIM,MAAO,WACCC,cACAA,aAAaV,EAAQW,aAOjDf,GAAGC,gBAAgBe,WACfb,KAAM,SAASC,EAASC,GACpB,GAAIE,GAAUP,GAAGQ,MAAMC,iBAAiBJ,QACxCK,GAAEN,GAASY,UAAUT,KAI7BP,GAAGC,gBAAgBgB,eACfd,KAAM,SAASC,EAASC,GACpB,GACIS,GACAI,EACAC,EACAC,EAJAC,EAAWX,EAAEN,EAKbJ,IAAGsB,aAAajB,MAChBS,EAAeT,IACfe,EAAef,OACYkB,SAApBlB,MACHL,GAAGsB,aAAajB,IAAgBU,QAChCD,EAAeT,IAAgBU,MAC/BK,EAAef,IAAgBU,SAE/BK,EAAef,IAAgBU,MACnCG,EAAcb,IAAgBmB,KAC9BL,EAAcd,IAAgBoB,KAMlC,IAAIC,GAAYhB,EAAE,aACdiB,EAAYjB,EAAE,aACdkB,EACAlB,EAAE,mHACNkB,GAAeC,OAAOH,GAAWG,OAAOF,GACxCjB,EAAE,QAAQmB,OAAOD,EACjB,IAAIE,GACAC,EAAaJ,EAAUX,UAAUN,EAAEsB,QAE3BC,UAAWvB,EAAE,QAAQ,GACrBwB,SAAU,WACNxB,EAAE,sFACGyB,GAAG,QACA,WACIJ,EAAWK,QACXN,EAAWO,SAElBC,UAAUC,KAAKC,MAAMC,KAAK,kBAEnC5B,MAAO,SAAU6B,GACb,GAAkBnB,SAAdmB,EAAKC,QAKL,GAJAtB,EAASuB,IAAI,SACRC,IAAIf,EAAWgB,MAAQ,IAAMf,EAAWe,OACxCC,QACAZ,GAAG,QAASL,EAAWO,MACPd,SAAjBT,EAA4B,CAC5B,GAAIW,GAAOK,EAAWgB,IAAI,UAAUE,GACpCvB,GAAKwB,SAASC,KAAKC,MAAMpB,EAAWe,IAAI,UAAUtB,KAAO,KACzDC,EAAK2B,WAAWrB,EAAWe,IAAI,UAAUtB,KAAO,IAChDV,EAAaW,EAAK4B,eAEE9B,UAAjBT,IACPA,EAAaS,QACbF,EAASuB,IAAI,SACRC,IAAI,IACJE,QACAZ,GAAG,QAASL,EAAWO,SAIxCnB,IACHF,UAAU,SAcf,IAbAc,EAAaJ,EAAUxB,UAAUQ,EAAEsB,QAEvBC,UAAWvB,EAAE,QAAQ,IAEzBS,IACHjB,UAAU,UACfmB,EACKc,GAAG,QAASL,EAAWO,MACvBF,GAAG,QACA,SAASmB,GACLA,EAAMC,kBACNzB,EAAWO,SAEFd,SAAjBH,EAA4B,CAC5B,GAAIoC,GAAc,GAAIC,MAAKrC,EAC3BU,GAAW4B,IAAI,SAAU,GAAID,MAAKrC,IAClCW,EAAW2B,IAAI,SAAiC,GAAvBF,EAAYG,WAAgBH,EAAYI,cAErE9B,EAAWK,GAAG,MACV,SAASO,GACD,UAAYA,GACZmB,WAAW9B,EAAWM,KAAM,GACNd,SAAjBT,GACLA,EAAaS","file":"wwwroot/js/knockout.pickadateime.min.js","sourcesContent":["\r\nko.bindingHandlers.pickadate = {\r\n    init: function(element, valueAccessor, allBindingsAccessor) {\r\n        var options = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n        $(element)\r\n            .pickadate(Object.assign({},\r\n                options,\r\n                {\r\n                    onSet: function() {\r\n                        if (valueBinding) {\r\n                            valueBinding(element.value);\r\n                        }\r\n                    }\r\n                }));\r\n    }\r\n};\r\n\r\nko.bindingHandlers.pickatime = {\r\n    init: function(element, valueAccessor) {\r\n        var options = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n        $(element).pickatime(options);\r\n    }\r\n};\r\n\r\nko.bindingHandlers.pickadatetime = {\r\n    init: function(element, valueAccessor) {\r\n        var $element = $(element);\r\n        var valueBinding;\r\n        var timeOptions;\r\n        var dateOptions;\r\n        var initialValue;\r\n        if (ko.isObservable(valueAccessor())) {\r\n            valueBinding = valueAccessor();\r\n            initialValue = valueAccessor()();\r\n        } else if (valueAccessor() !== undefined) {\r\n            if (ko.isObservable(valueAccessor().value)) {\r\n                valueBinding = valueAccessor().value;\r\n                initialValue = valueAccessor().value();\r\n            } else\r\n                initialValue = valueAccessor().value;\r\n            timeOptions = valueAccessor().time;\r\n            dateOptions = valueAccessor().date;\r\n        }\r\n        //if (ko.utils.unwrapObservable(valueBinding()) !== undefined)\r\n        //    //$element.val(moment(valueBinding()).format(\"dddd, dd. mmmm yyyy\"));\r\n        //else\r\n        //    $element.val(\"\");\r\n        var dateField = $(\"<input />\");\r\n        var timeField = $(\"<input />\");\r\n        var inputContainer =\r\n            $(\"<div style='display:none;position: absolute; top: 0; left: 0; width: 1px; height: 1px; overflow: hidden;'></div>\");\r\n        inputContainer.append(dateField).append(timeField);\r\n        $(\"body\").append(inputContainer);\r\n        var datepicker;\r\n        var timepicker = timeField.pickatime($.extend({\r\n                    //container: $element.parent()[0],\r\n                    container: $(\"body\")[0],\r\n                    onRender: function() {\r\n                        $('<button class=\"picker__button--clear\" type=\"button\">Zur&uuml;ck zum Datum</button>')\r\n                            .on(\"click\",\r\n                                function() {\r\n                                    timepicker.close();\r\n                                    datepicker.open();\r\n                                })\r\n                            .prependTo(this.$root.find(\".picker__box\"));\r\n                    },\r\n                    onSet: function (item) {\r\n                        if (item.select!==undefined) {\r\n                            $element.off(\"focus\")\r\n                                .val(datepicker.get() + \" \" + timepicker.get())\r\n                                .focus()\r\n                                .on(\"focus\", datepicker.open);\r\n                            if (valueBinding !== undefined) {\r\n                                var date = datepicker.get(\"select\").obj;\r\n                                date.setHours(Math.floor(timepicker.get(\"select\").time / 60));\r\n                                date.setMinutes(timepicker.get(\"select\").time % 60);\r\n                                valueBinding(date.toJSON());\r\n                            }\r\n                        } else if (valueBinding !== undefined) {\r\n                            valueBinding(undefined);\r\n                            $element.off(\"focus\")\r\n                                .val(\"\")\r\n                                .focus()\r\n                                .on(\"focus\", datepicker.open);\r\n                        }\r\n                    }\r\n                },\r\n                timeOptions))\r\n            .pickatime(\"picker\");\r\n        datepicker = dateField.pickadate($.extend({\r\n                    //container: $element.parent()[0]\r\n                    container: $(\"body\")[0]\r\n                },\r\n                dateOptions))\r\n            .pickadate(\"picker\");\r\n        $element\r\n            .on(\"focus\", datepicker.open)\r\n            .on(\"click\",\r\n                function(event) {\r\n                    event.stopPropagation();\r\n                    datepicker.open();\r\n                });\r\n        if (initialValue !== undefined) {\r\n            var initialDate = new Date(initialValue);\r\n            datepicker.set(\"select\", new Date(initialValue));\r\n            timepicker.set(\"select\", initialDate.getHours()*60 + initialDate.getMinutes());\r\n        }\r\n        datepicker.on(\"set\",\r\n            function(item) {\r\n                if (\"select\" in item)\r\n                    setTimeout(timepicker.open, 0);\r\n                else if (valueBinding !== undefined)\r\n                    valueBinding(undefined);\r\n            });\r\n    }\r\n};"],"sourceRoot":"/source/"}