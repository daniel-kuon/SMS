{"version":3,"sources":["wwwroot/lib/bootstrap-multiselect/dist/js/bootstrap-multiselect.js"],"names":["$","forEach","array","callback","index","length","Multiselect","select","options","this","$select","attr","nonSelectedText","data","mergeOptions","extend","originalOptions","clone","query","searchTimeout","lastToggledInput","multiple","onChange","proxy","onDropdownShow","onDropdownHide","onDropdownShown","onDropdownHidden","buildContainer","buildButton","buildDropdown","buildSelectAll","buildDropdownOptions","buildFilter","updateButtonText","updateSelectAll","disableIfEmpty","disable","hide","after","$container","ko","bindingHandlers","multiselect","init","element","valueAccessor","allBindings","viewModel","bindingContext","$element","config","toJS","has","get","isObservable","computed","read","setTimeout","ms","updateOriginalOptions","disposeWhenNodeIsRemoved","value","rateLimit","notifyWhenChangesStop","selectedOptions","utils","domNodeDisposal","addDisposeCallback","update","prototype","defaults","buttonText","allSelectedText","selectAllNumber","numberDisplayed","nSelectedText","selected","delimiter","delimiterText","each","label","undefined","text","substr","buttonTitle","optionLabel","option","checked","event","onSelectAll","enableHTML","buttonClass","inheritClass","buttonWidth","buttonContainer","dropRight","selectedClass","maxHeight","checkboxName","includeSelectAllOption","includeSelectAllIfMoreThan","selectAllText","selectAllValue","selectAllName","enableFiltering","enableCaseInsensitiveFiltering","enableClickableOptGroups","filterPlaceholder","filterBehavior","includeFilterClearBtn","preventInputChangeEvent","templates","button","ul","filter","filterClearBtn","li","divider","liGroup","constructor","on","$button","addClass","prop","enable","css","width","overflow","text-overflow","tabindex","prepend","$ul","max-height","overflow-y","overflow-x","append","children","tag","toLowerCase","createOptgroup","createDivider","createOptionValue","$target","target","isSelectAllOption","val","closest","removeClass","$option","getOptionByValue","$optionsNotThis","not","$checkboxesNotThis","selectAll","deselectAll","click","change","e","shiftKey","stopPropagation","is","preventDefault","find","from","to","tmp","range","slice","toggleClass","i","j","$checkbox","trigger","blur","off","keyCode","hasClass","$items","$current","eq","focus","group","parent","$options","nextUntil","$visibleOptions","allChecked","optionInputs","inputType","$li","$label","html","$divider","groupName","toString","alreadyHasSelectAll","hasSelectAll","includeSelectAllDivider","enableFilterLength","Math","max","$filter","clearBtn","clearTimeout","show","which","asyncFunction","currentGroup","currentGroupVisible","filterCandidate","showElement","indexOf","toggle","destroy","remove","refresh","$input","selectValues","triggerOnChange","isArray","getInputByValue","clearSelection","deselect","deselectValues","justVisible","triggerOnSelectAll","allCheckboxes","visibleCheckboxes","allCheckboxesCount","visibleCheckboxesCount","values","map","inArray","rebuild","dataprovider","groupCounter","empty","$tag","disabled","subOption","title","setOptions","allBoxes","allBoxesLength","checkedBoxesLength","selectAllLi","selectAllInput","getSelected","valueToCompare","checkboxes","checkbox","timeout","self","args","Array","call","arguments","apply","window","setAllSelectedText","fn","parameter","extraOptions","Constructor","jQuery"],"mappings":"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","file":"wwwroot/lib/bootstrap-multiselect/dist/js/bootstrap-multiselect.min.js","sourcesContent":["/**\r\n * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\r\n * \r\n * Apache License, Version 2.0:\r\n * Copyright (c) 2012 - 2015 David Stutz\r\n * \r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n * use this file except in compliance with the License. You may obtain a\r\n * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n * \r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\n * License for the specific language governing permissions and limitations\r\n * under the License.\r\n * \r\n * BSD 3-Clause License:\r\n * Copyright (c) 2012 - 2015 David Stutz\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *    - Redistributions of source code must retain the above copyright notice,\r\n *      this list of conditions and the following disclaimer.\r\n *    - Redistributions in binary form must reproduce the above copyright notice,\r\n *      this list of conditions and the following disclaimer in the documentation\r\n *      and/or other materials provided with the distribution.\r\n *    - Neither the name of David Stutz nor the names of its contributors may be\r\n *      used to endorse or promote products derived from this software without\r\n *      specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\r\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\r\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\r\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n!function ($) {\r\n    \"use strict\";// jshint ;_;\r\n\r\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\r\n        ko.bindingHandlers.multiselect = {\r\n            after: ['options', 'value', 'selectedOptions'],\r\n\r\n            init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                var $element = $(element);\r\n                var config = ko.toJS(valueAccessor());\r\n\r\n                $element.multiselect(config);\r\n\r\n                if (allBindings.has('options')) {\r\n                    var options = allBindings.get('options');\r\n                    if (ko.isObservable(options)) {\r\n                        ko.computed({\r\n                            read: function() {\r\n                                options();\r\n                                setTimeout(function() {\r\n                                    var ms = $element.data('multiselect');\r\n                                    if (ms)\r\n                                        ms.updateOriginalOptions();//Not sure how beneficial this is.\r\n                                    $element.multiselect('rebuild');\r\n                                }, 1);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //value and selectedOptions are two-way, so these will be triggered even by our own actions.\r\n                //It needs some way to tell if they are triggered because of us or because of outside change.\r\n                //It doesn't loop but it's a waste of processing.\r\n                if (allBindings.has('value')) {\r\n                    var value = allBindings.get('value');\r\n                    if (ko.isObservable(value)) {\r\n                        ko.computed({\r\n                            read: function() {\r\n                                value();\r\n                                setTimeout(function() {\r\n                                    $element.multiselect('refresh');\r\n                                }, 1);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\r\n                    }\r\n                }\r\n\r\n                //Switched from arrayChange subscription to general subscription using 'refresh'.\r\n                //Not sure performance is any better using 'select' and 'deselect'.\r\n                if (allBindings.has('selectedOptions')) {\r\n                    var selectedOptions = allBindings.get('selectedOptions');\r\n                    if (ko.isObservable(selectedOptions)) {\r\n                        ko.computed({\r\n                            read: function() {\r\n                                selectedOptions();\r\n                                setTimeout(function() {\r\n                                    $element.multiselect('refresh');\r\n                                }, 1);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\r\n                    }\r\n                }\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                    $element.multiselect('destroy');\r\n                });\r\n            },\r\n\r\n            update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                var $element = $(element);\r\n                var config = ko.toJS(valueAccessor());\r\n\r\n                $element.multiselect('setOptions', config);\r\n                $element.multiselect('rebuild');\r\n            }\r\n        };\r\n    }\r\n\r\n    function forEach(array, callback) {\r\n        for (var index = 0; index < array.length; ++index) {\r\n            callback(array[index], index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructor to create a new multiselect using the given select.\r\n     *\r\n     * @param {jQuery} select\r\n     * @param {Object} options\r\n     * @returns {Multiselect}\r\n     */\r\n    function Multiselect(select, options) {\r\n\r\n        this.$select = $(select);\r\n        \r\n        // Placeholder via data attributes\r\n        if (this.$select.attr(\"data-placeholder\")) {\r\n            options.nonSelectedText = this.$select.data(\"placeholder\");\r\n        }\r\n        \r\n        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));\r\n\r\n        // Initialization.\r\n        // We have to clone to create a new reference.\r\n        this.originalOptions = this.$select.clone()[0].options;\r\n        this.query = '';\r\n        this.searchTimeout = null;\r\n        this.lastToggledInput = null\r\n\r\n        this.options.multiple = this.$select.attr('multiple') === \"multiple\";\r\n        this.options.onChange = $.proxy(this.options.onChange, this);\r\n        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\r\n        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\r\n        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\r\n        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\r\n        \r\n        // Build select all if enabled.\r\n        this.buildContainer();\r\n        this.buildButton();\r\n        this.buildDropdown();\r\n        this.buildSelectAll();\r\n        this.buildDropdownOptions();\r\n        this.buildFilter();\r\n\r\n        this.updateButtonText();\r\n        this.updateSelectAll();\r\n\r\n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\r\n            this.disable();\r\n        }\r\n        \r\n        this.$select.hide().after(this.$container);\r\n    };\r\n\r\n    Multiselect.prototype = {\r\n\r\n        defaults: {\r\n            /**\r\n             * Default text function will either print 'None selected' in case no\r\n             * option is selected or a list of the selected options up to a length\r\n             * of 3 selected options.\r\n             * \r\n             * @param {jQuery} options\r\n             * @param {jQuery} select\r\n             * @returns {String}\r\n             */\r\n            buttonText: function(options, select) {\r\n                if (options.length === 0) {\r\n                    return this.nonSelectedText;\r\n                }\r\n                else if (this.allSelectedText \r\n                            && options.length === $('option', $(select)).length \r\n                            && $('option', $(select)).length !== 1 \r\n                            && this.multiple) {\r\n\r\n                    if (this.selectAllNumber) {\r\n                        return this.allSelectedText + ' (' + options.length + ')';\r\n                    }\r\n                    else {\r\n                        return this.allSelectedText;\r\n                    }\r\n                }\r\n                else if (options.length > this.numberDisplayed) {\r\n                    return options.length + ' ' + this.nSelectedText;\r\n                }\r\n                else {\r\n                    var selected = '';\r\n                    var delimiter = this.delimiterText;\r\n                    \r\n                    options.each(function() {\r\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\r\n                        selected += label + delimiter;\r\n                    });\r\n                    \r\n                    return selected.substr(0, selected.length - 2);\r\n                }\r\n            },\r\n            /**\r\n             * Updates the title of the button similar to the buttonText function.\r\n             * \r\n             * @param {jQuery} options\r\n             * @param {jQuery} select\r\n             * @returns {@exp;selected@call;substr}\r\n             */\r\n            buttonTitle: function(options, select) {\r\n                if (options.length === 0) {\r\n                    return this.nonSelectedText;\r\n                }\r\n                else {\r\n                    var selected = '';\r\n                    var delimiter = this.delimiterText;\r\n                    \r\n                    options.each(function () {\r\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\r\n                        selected += label + delimiter;\r\n                    });\r\n                    return selected.substr(0, selected.length - 2);\r\n                }\r\n            },\r\n            /**\r\n             * Create a label.\r\n             *\r\n             * @param {jQuery} element\r\n             * @returns {String}\r\n             */\r\n            optionLabel: function(element){\r\n                return $(element).attr('label') || $(element).text();\r\n            },\r\n            /**\r\n             * Triggered on change of the multiselect.\r\n             * \r\n             * Not triggered when selecting/deselecting options manually.\r\n             * \r\n             * @param {jQuery} option\r\n             * @param {Boolean} checked\r\n             */\r\n            onChange : function(option, checked) {\r\n\r\n            },\r\n            /**\r\n             * Triggered when the dropdown is shown.\r\n             *\r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownShow: function(event) {\r\n\r\n            },\r\n            /**\r\n             * Triggered when the dropdown is hidden.\r\n             *\r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownHide: function(event) {\r\n\r\n            },\r\n            /**\r\n             * Triggered after the dropdown is shown.\r\n             * \r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownShown: function(event) {\r\n                \r\n            },\r\n            /**\r\n             * Triggered after the dropdown is hidden.\r\n             * \r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownHidden: function(event) {\r\n                \r\n            },\r\n            /**\r\n             * Triggered on select all.\r\n             */\r\n            onSelectAll: function() {\r\n                \r\n            },\r\n            enableHTML: false,\r\n            buttonClass: 'btn btn-default',\r\n            inheritClass: false,\r\n            buttonWidth: 'auto',\r\n            buttonContainer: '<div class=\"btn-group\" />',\r\n            dropRight: false,\r\n            selectedClass: 'active',\r\n            // Maximum height of the dropdown menu.\r\n            // If maximum height is exceeded a scrollbar will be displayed.\r\n            maxHeight: false,\r\n            checkboxName: false,\r\n            includeSelectAllOption: false,\r\n            includeSelectAllIfMoreThan: 0,\r\n            selectAllText: ' Select all',\r\n            selectAllValue: 'multiselect-all',\r\n            selectAllName: false,\r\n            selectAllNumber: true,\r\n            enableFiltering: false,\r\n            enableCaseInsensitiveFiltering: false,\r\n            enableClickableOptGroups: false,\r\n            filterPlaceholder: 'Search',\r\n            // possible options: 'text', 'value', 'both'\r\n            filterBehavior: 'text',\r\n            includeFilterClearBtn: true,\r\n            preventInputChangeEvent: false,\r\n            nonSelectedText: 'None selected',\r\n            nSelectedText: 'selected',\r\n            allSelectedText: 'All selected',\r\n            numberDisplayed: 3,\r\n            disableIfEmpty: false,\r\n            delimiterText: ', ',\r\n            templates: {\r\n                button: '<button type=\"button\" class=\"multiselect dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span> <b class=\"caret\"></b></button>',\r\n                ul: '<ul class=\"multiselect-container dropdown-menu\"></ul>',\r\n                filter: '<li class=\"multiselect-item filter\"><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\r\n                filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"glyphicon glyphicon-remove-circle\"></i></button></span>',\r\n                li: '<li><a tabindex=\"0\"><label></label></a></li>',\r\n                divider: '<li class=\"multiselect-item divider\"></li>',\r\n                liGroup: '<li class=\"multiselect-item multiselect-group\"><label></label></li>'\r\n            }\r\n        },\r\n\r\n        constructor: Multiselect,\r\n\r\n        /**\r\n         * Builds the container of the multiselect.\r\n         */\r\n        buildContainer: function() {\r\n            this.$container = $(this.options.buttonContainer);\r\n            this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\r\n            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\r\n            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\r\n            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\r\n        },\r\n\r\n        /**\r\n         * Builds the button of the multiselect.\r\n         */\r\n        buildButton: function() {\r\n            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\r\n            if (this.$select.attr('class') && this.options.inheritClass) {\r\n                this.$button.addClass(this.$select.attr('class'));\r\n            }\r\n            // Adopt active state.\r\n            if (this.$select.prop('disabled')) {\r\n                this.disable();\r\n            }\r\n            else {\r\n                this.enable();\r\n            }\r\n\r\n            // Manually add button width if set.\r\n            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\r\n                this.$button.css({\r\n                    'width' : this.options.buttonWidth,\r\n                    'overflow' : 'hidden',\r\n                    'text-overflow' : 'ellipsis'\r\n                });\r\n                this.$container.css({\r\n                    'width': this.options.buttonWidth\r\n                });\r\n            }\r\n\r\n            // Keep the tab index from the select.\r\n            var tabindex = this.$select.attr('tabindex');\r\n            if (tabindex) {\r\n                this.$button.attr('tabindex', tabindex);\r\n            }\r\n\r\n            this.$container.prepend(this.$button);\r\n        },\r\n\r\n        /**\r\n         * Builds the ul representing the dropdown menu.\r\n         */\r\n        buildDropdown: function() {\r\n\r\n            // Build ul.\r\n            this.$ul = $(this.options.templates.ul);\r\n\r\n            if (this.options.dropRight) {\r\n                this.$ul.addClass('pull-right');\r\n            }\r\n\r\n            // Set max height of dropdown menu to activate auto scrollbar.\r\n            if (this.options.maxHeight) {\r\n                // TODO: Add a class for this option to move the css declarations.\r\n                this.$ul.css({\r\n                    'max-height': this.options.maxHeight + 'px',\r\n                    'overflow-y': 'auto',\r\n                    'overflow-x': 'hidden'\r\n                });\r\n            }\r\n\r\n            this.$container.append(this.$ul);\r\n        },\r\n\r\n        /**\r\n         * Build the dropdown options and binds all nessecary events.\r\n         * \r\n         * Uses createDivider and createOptionValue to create the necessary options.\r\n         */\r\n        buildDropdownOptions: function() {\r\n\r\n            this.$select.children().each($.proxy(function(index, element) {\r\n\r\n                var $element = $(element);\r\n                // Support optgroups and options without a group simultaneously.\r\n                var tag = $element.prop('tagName')\r\n                    .toLowerCase();\r\n            \r\n                if ($element.prop('value') === this.options.selectAllValue) {\r\n                    return;\r\n                }\r\n\r\n                if (tag === 'optgroup') {\r\n                    this.createOptgroup(element);\r\n                }\r\n                else if (tag === 'option') {\r\n\r\n                    if ($element.data('role') === 'divider') {\r\n                        this.createDivider();\r\n                    }\r\n                    else {\r\n                        this.createOptionValue(element);\r\n                    }\r\n\r\n                }\r\n\r\n                // Other illegal tags will be ignored.\r\n            }, this));\r\n\r\n            // Bind the change event on the dropdown elements.\r\n            $('li input', this.$ul).on('change', $.proxy(function(event) {\r\n                var $target = $(event.target);\r\n\r\n                var checked = $target.prop('checked') || false;\r\n                var isSelectAllOption = $target.val() === this.options.selectAllValue;\r\n\r\n                // Apply or unapply the configured selected class.\r\n                if (this.options.selectedClass) {\r\n                    if (checked) {\r\n                        $target.closest('li')\r\n                            .addClass(this.options.selectedClass);\r\n                    }\r\n                    else {\r\n                        $target.closest('li')\r\n                            .removeClass(this.options.selectedClass);\r\n                    }\r\n                }\r\n\r\n                // Get the corresponding option.\r\n                var value = $target.val();\r\n                var $option = this.getOptionByValue(value);\r\n\r\n                var $optionsNotThis = $('option', this.$select).not($option);\r\n                var $checkboxesNotThis = $('input', this.$container).not($target);\r\n\r\n                if (isSelectAllOption) {\r\n                    if (checked) {\r\n                        this.selectAll();\r\n                    }\r\n                    else {\r\n                        this.deselectAll();\r\n                    }\r\n                }\r\n\r\n                if(!isSelectAllOption){\r\n                    if (checked) {\r\n                        $option.prop('selected', true);\r\n\r\n                        if (this.options.multiple) {\r\n                            // Simply select additional option.\r\n                            $option.prop('selected', true);\r\n                        }\r\n                        else {\r\n                            // Unselect all other options and corresponding checkboxes.\r\n                            if (this.options.selectedClass) {\r\n                                $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\r\n                            }\r\n\r\n                            $($checkboxesNotThis).prop('checked', false);\r\n                            $optionsNotThis.prop('selected', false);\r\n\r\n                            // It's a single selection, so close.\r\n                            this.$button.click();\r\n                        }\r\n\r\n                        if (this.options.selectedClass === \"active\") {\r\n                            $optionsNotThis.closest(\"a\").css(\"outline\", \"\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Unselect option.\r\n                        $option.prop('selected', false);\r\n                    }\r\n                }\r\n\r\n                this.$select.change();\r\n\r\n                this.updateButtonText();\r\n                this.updateSelectAll();\r\n\r\n                this.options.onChange($option, checked);\r\n\r\n                if(this.options.preventInputChangeEvent) {\r\n                    return false;\r\n                }\r\n            }, this));\r\n\r\n            $('li a', this.$ul).on('mousedown', function(e) {\r\n                if (e.shiftKey) {\r\n                    // Prevent selecting text by Shift+click\r\n                    return false;\r\n                }\r\n            });\r\n        \r\n            $('li a', this.$ul).on('touchstart click', $.proxy(function(event) {\r\n                event.stopPropagation();\r\n\r\n                var $target = $(event.target);\r\n                \r\n                if (event.shiftKey && this.options.multiple) {\r\n                    if($target.is(\"label\")){ // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\r\n                        event.preventDefault();\r\n                        $target = $target.find(\"input\");\r\n                        $target.prop(\"checked\", !$target.prop(\"checked\"));\r\n                    }\r\n                    var checked = $target.prop('checked') || false;\r\n\r\n                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range\r\n                        var from = $target.closest(\"li\").index();\r\n                        var to = this.lastToggledInput.closest(\"li\").index();\r\n                        \r\n                        if (from > to) { // Swap the indices\r\n                            var tmp = to;\r\n                            to = from;\r\n                            from = tmp;\r\n                        }\r\n                        \r\n                        // Make sure we grab all elements since slice excludes the last index\r\n                        ++to;\r\n                        \r\n                        // Change the checkboxes and underlying options\r\n                        var range = this.$ul.find(\"li\").slice(from, to).find(\"input\");\r\n                        \r\n                        range.prop('checked', checked);\r\n                        \r\n                        if (this.options.selectedClass) {\r\n                            range.closest('li')\r\n                                .toggleClass(this.options.selectedClass, checked);\r\n                        }\r\n                        \r\n                        for (var i = 0, j = range.length; i < j; i++) {\r\n                            var $checkbox = $(range[i]);\r\n\r\n                            var $option = this.getOptionByValue($checkbox.val());\r\n\r\n                            $option.prop('selected', checked);\r\n                        }                   \r\n                    }\r\n                    \r\n                    // Trigger the select \"change\" event\r\n                    $target.trigger(\"change\");\r\n                }\r\n                \r\n                // Remembers last clicked option\r\n                if($target.is(\"input\") && !$target.closest(\"li\").is(\".multiselect-item\")){\r\n                    this.lastToggledInput = $target;\r\n                }\r\n\r\n                $target.blur();\r\n            }, this));\r\n\r\n            // Keyboard support.\r\n            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function(event) {\r\n                if ($('input[type=\"text\"]', this.$container).is(':focus')) {\r\n                    return;\r\n                }\r\n\r\n                if (event.keyCode === 9 && this.$container.hasClass('open')) {\r\n                    this.$button.click();\r\n                }\r\n                else {\r\n                    var $items = $(this.$container).find(\"li:not(.divider):not(.disabled) a\").filter(\":visible\");\r\n\r\n                    if (!$items.length) {\r\n                        return;\r\n                    }\r\n\r\n                    var index = $items.index($items.filter(':focus'));\r\n\r\n                    // Navigation up.\r\n                    if (event.keyCode === 38 && index > 0) {\r\n                        index--;\r\n                    }\r\n                    // Navigate down.\r\n                    else if (event.keyCode === 40 && index < $items.length - 1) {\r\n                        index++;\r\n                    }\r\n                    else if (!~index) {\r\n                        index = 0;\r\n                    }\r\n\r\n                    var $current = $items.eq(index);\r\n                    $current.focus();\r\n\r\n                    if (event.keyCode === 32 || event.keyCode === 13) {\r\n                        var $checkbox = $current.find('input');\r\n\r\n                        $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\r\n                        $checkbox.change();\r\n                    }\r\n\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n            }, this));\r\n\r\n            if(this.options.enableClickableOptGroups && this.options.multiple) {\r\n                $('li.multiselect-group', this.$ul).on('click', $.proxy(function(event) {\r\n                    event.stopPropagation();\r\n\r\n                    var group = $(event.target).parent();\r\n\r\n                    // Search all option in optgroup\r\n                    var $options = group.nextUntil('li.multiselect-group');\r\n                    var $visibleOptions = $options.filter(\":visible:not(.disabled)\");\r\n\r\n                    // check or uncheck items\r\n                    var allChecked = true;\r\n                    var optionInputs = $visibleOptions.find('input');\r\n                    optionInputs.each(function() {\r\n                        allChecked = allChecked && $(this).prop('checked');\r\n                    });\r\n\r\n                    optionInputs.prop('checked', !allChecked).trigger('change');\r\n               }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create an option using the given select option.\r\n         *\r\n         * @param {jQuery} element\r\n         */\r\n        createOptionValue: function(element) {\r\n            var $element = $(element);\r\n            if ($element.is(':selected')) {\r\n                $element.prop('selected', true);\r\n            }\r\n\r\n            // Support the label attribute on options.\r\n            var label = this.options.optionLabel(element);\r\n            var value = $element.val();\r\n            var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\r\n\r\n            var $li = $(this.options.templates.li);\r\n            var $label = $('label', $li);\r\n            $label.addClass(inputType);\r\n\r\n            if (this.options.enableHTML) {\r\n                $label.html(\" \" + label);\r\n            }\r\n            else {\r\n                $label.text(\" \" + label);\r\n            }\r\n        \r\n            var $checkbox = $('<input/>').attr('type', inputType);\r\n\r\n            if (this.options.checkboxName) {\r\n                $checkbox.attr('name', this.options.checkboxName);\r\n            }\r\n            $label.prepend($checkbox);\r\n\r\n            var selected = $element.prop('selected') || false;\r\n            $checkbox.val(value);\r\n\r\n            if (value === this.options.selectAllValue) {\r\n                $li.addClass(\"multiselect-item multiselect-all\");\r\n                $checkbox.parent().parent()\r\n                    .addClass('multiselect-all');\r\n            }\r\n\r\n            $label.attr('title', $element.attr('title'));\r\n\r\n            this.$ul.append($li);\r\n\r\n            if ($element.is(':disabled')) {\r\n                $checkbox.attr('disabled', 'disabled')\r\n                    .prop('disabled', true)\r\n                    .closest('a')\r\n                    .attr(\"tabindex\", \"-1\")\r\n                    .closest('li')\r\n                    .addClass('disabled');\r\n            }\r\n\r\n            $checkbox.prop('checked', selected);\r\n\r\n            if (selected && this.options.selectedClass) {\r\n                $checkbox.closest('li')\r\n                    .addClass(this.options.selectedClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates a divider using the given select option.\r\n         *\r\n         * @param {jQuery} element\r\n         */\r\n        createDivider: function(element) {\r\n            var $divider = $(this.options.templates.divider);\r\n            this.$ul.append($divider);\r\n        },\r\n\r\n        /**\r\n         * Creates an optgroup.\r\n         *\r\n         * @param {jQuery} group\r\n         */\r\n        createOptgroup: function(group) {\r\n            var groupName = $(group).prop('label');\r\n\r\n            // Add a header for the group.\r\n            var $li = $(this.options.templates.liGroup);\r\n            \r\n            if (this.options.enableHTML) {\r\n                $('label', $li).html(groupName);\r\n            }\r\n            else {\r\n                $('label', $li).text(groupName);\r\n            }\r\n            \r\n            if (this.options.enableClickableOptGroups) {\r\n                $li.addClass('multiselect-group-clickable');\r\n            }\r\n\r\n            this.$ul.append($li);\r\n\r\n            if ($(group).is(':disabled')) {\r\n                $li.addClass('disabled');\r\n            }\r\n\r\n            // Add the options of the group.\r\n            $('option', group).each($.proxy(function(index, element) {\r\n                this.createOptionValue(element);\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Build the selct all.\r\n         * \r\n         * Checks if a select all has already been created.\r\n         */\r\n        buildSelectAll: function() {\r\n            if (typeof this.options.selectAllValue === 'number') {\r\n                this.options.selectAllValue = this.options.selectAllValue.toString();\r\n            }\r\n            \r\n            var alreadyHasSelectAll = this.hasSelectAll();\r\n\r\n            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple\r\n                    && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\r\n\r\n                // Check whether to add a divider after the select all.\r\n                if (this.options.includeSelectAllDivider) {\r\n                    this.$ul.prepend($(this.options.templates.divider));\r\n                }\r\n\r\n                var $li = $(this.options.templates.li);\r\n                $('label', $li).addClass(\"checkbox\");\r\n                \r\n                if (this.options.enableHTML) {\r\n                    $('label', $li).html(\" \" + this.options.selectAllText);\r\n                }\r\n                else {\r\n                    $('label', $li).text(\" \" + this.options.selectAllText);\r\n                }\r\n                \r\n                if (this.options.selectAllName) {\r\n                    $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\r\n                }\r\n                else {\r\n                    $('label', $li).prepend('<input type=\"checkbox\" />');\r\n                }\r\n                \r\n                var $checkbox = $('input', $li);\r\n                $checkbox.val(this.options.selectAllValue);\r\n\r\n                $li.addClass(\"multiselect-item multiselect-all\");\r\n                $checkbox.parent().parent()\r\n                    .addClass('multiselect-all');\r\n\r\n                this.$ul.prepend($li);\r\n\r\n                $checkbox.prop('checked', false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Builds the filter.\r\n         */\r\n        buildFilter: function() {\r\n\r\n            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\r\n            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\r\n                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\r\n\r\n                if (this.$select.find('option').length >= enableFilterLength) {\r\n\r\n                    this.$filter = $(this.options.templates.filter);\r\n                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);\r\n                    \r\n                    // Adds optional filter clear button\r\n                    if(this.options.includeFilterClearBtn){\r\n                        var clearBtn = $(this.options.templates.filterClearBtn);\r\n                        clearBtn.on('click', $.proxy(function(event){\r\n                            clearTimeout(this.searchTimeout);\r\n                            this.$filter.find('.multiselect-search').val('');\r\n                            $('li', this.$ul).show().removeClass(\"filter-hidden\");\r\n                            this.updateSelectAll();\r\n                        }, this));\r\n                        this.$filter.find('.input-group').append(clearBtn);\r\n                    }\r\n                    \r\n                    this.$ul.prepend(this.$filter);\r\n\r\n                    this.$filter.val(this.query).on('click', function(event) {\r\n                        event.stopPropagation();\r\n                    }).on('input keydown', $.proxy(function(event) {\r\n                        // Cancel enter key default behaviour\r\n                        if (event.which === 13) {\r\n                          event.preventDefault();\r\n                        }\r\n                        \r\n                        // This is useful to catch \"keydown\" events after the browser has updated the control.\r\n                        clearTimeout(this.searchTimeout);\r\n\r\n                        this.searchTimeout = this.asyncFunction($.proxy(function() {\r\n\r\n                            if (this.query !== event.target.value) {\r\n                                this.query = event.target.value;\r\n\r\n                                var currentGroup, currentGroupVisible;\r\n                                $.each($('li', this.$ul), $.proxy(function(index, element) {\r\n                                    var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\r\n                                    var text = $('label', element).text();\r\n\r\n                                    var filterCandidate = '';\r\n                                    if ((this.options.filterBehavior === 'text')) {\r\n                                        filterCandidate = text;\r\n                                    }\r\n                                    else if ((this.options.filterBehavior === 'value')) {\r\n                                        filterCandidate = value;\r\n                                    }\r\n                                    else if (this.options.filterBehavior === 'both') {\r\n                                        filterCandidate = text + '\\n' + value;\r\n                                    }\r\n\r\n                                    if (value !== this.options.selectAllValue && text) {\r\n                                        // By default lets assume that element is not\r\n                                        // interesting for this search.\r\n                                        var showElement = false;\r\n\r\n                                        if (this.options.enableCaseInsensitiveFiltering && filterCandidate.toLowerCase().indexOf(this.query.toLowerCase()) > -1) {\r\n                                            showElement = true;\r\n                                        }\r\n                                        else if (filterCandidate.indexOf(this.query) > -1) {\r\n                                            showElement = true;\r\n                                        }\r\n\r\n                                        // Toggle current element (group or group item) according to showElement boolean.\r\n                                        $(element).toggle(showElement).toggleClass('filter-hidden', !showElement);\r\n                                        \r\n                                        // Differentiate groups and group items.\r\n                                        if ($(element).hasClass('multiselect-group')) {\r\n                                            // Remember group status.\r\n                                            currentGroup = element;\r\n                                            currentGroupVisible = showElement;\r\n                                        }\r\n                                        else {\r\n                                            // Show group name when at least one of its items is visible.\r\n                                            if (showElement) {\r\n                                                $(currentGroup).show().removeClass('filter-hidden');\r\n                                            }\r\n                                            \r\n                                            // Show all group items when group name satisfies filter.\r\n                                            if (!showElement && currentGroupVisible) {\r\n                                                $(element).show().removeClass('filter-hidden');\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }, this));\r\n                            }\r\n\r\n                            this.updateSelectAll();\r\n                        }, this), 300, this);\r\n                    }, this));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unbinds the whole plugin.\r\n         */\r\n        destroy: function() {\r\n            this.$container.remove();\r\n            this.$select.show();\r\n            this.$select.data('multiselect', null);\r\n        },\r\n\r\n        /**\r\n         * Refreshs the multiselect based on the selected options of the select.\r\n         */\r\n        refresh: function() {\r\n            $('option', this.$select).each($.proxy(function(index, element) {\r\n                var $input = $('li input', this.$ul).filter(function() {\r\n                    return $(this).val() === $(element).val();\r\n                });\r\n\r\n                if ($(element).is(':selected')) {\r\n                    $input.prop('checked', true);\r\n\r\n                    if (this.options.selectedClass) {\r\n                        $input.closest('li')\r\n                            .addClass(this.options.selectedClass);\r\n                    }\r\n                }\r\n                else {\r\n                    $input.prop('checked', false);\r\n\r\n                    if (this.options.selectedClass) {\r\n                        $input.closest('li')\r\n                            .removeClass(this.options.selectedClass);\r\n                    }\r\n                }\r\n\r\n                if ($(element).is(\":disabled\")) {\r\n                    $input.attr('disabled', 'disabled')\r\n                        .prop('disabled', true)\r\n                        .closest('li')\r\n                        .addClass('disabled');\r\n                }\r\n                else {\r\n                    $input.prop('disabled', false)\r\n                        .closest('li')\r\n                        .removeClass('disabled');\r\n                }\r\n            }, this));\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n\r\n        /**\r\n         * Select all options of the given values.\r\n         * \r\n         * If triggerOnChange is set to true, the on change event is triggered if\r\n         * and only if one value is passed.\r\n         * \r\n         * @param {Array} selectValues\r\n         * @param {Boolean} triggerOnChange\r\n         */\r\n        select: function(selectValues, triggerOnChange) {\r\n            if(!$.isArray(selectValues)) {\r\n                selectValues = [selectValues];\r\n            }\r\n\r\n            for (var i = 0; i < selectValues.length; i++) {\r\n                var value = selectValues[i];\r\n\r\n                if (value === null || value === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                var $option = this.getOptionByValue(value);\r\n                var $checkbox = this.getInputByValue(value);\r\n\r\n                if($option === undefined || $checkbox === undefined) {\r\n                    continue;\r\n                }\r\n                \r\n                if (!this.options.multiple) {\r\n                    this.deselectAll(false);\r\n                }\r\n                \r\n                if (this.options.selectedClass) {\r\n                    $checkbox.closest('li')\r\n                        .addClass(this.options.selectedClass);\r\n                }\r\n\r\n                $checkbox.prop('checked', true);\r\n                $option.prop('selected', true);\r\n                \r\n                if (triggerOnChange) {\r\n                    this.options.onChange($option, true);\r\n                }\r\n            }\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n\r\n        /**\r\n         * Clears all selected items.\r\n         */\r\n        clearSelection: function () {\r\n            this.deselectAll(false);\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n\r\n        /**\r\n         * Deselects all options of the given values.\r\n         * \r\n         * If triggerOnChange is set to true, the on change event is triggered, if\r\n         * and only if one value is passed.\r\n         * \r\n         * @param {Array} deselectValues\r\n         * @param {Boolean} triggerOnChange\r\n         */\r\n        deselect: function(deselectValues, triggerOnChange) {\r\n            if(!$.isArray(deselectValues)) {\r\n                deselectValues = [deselectValues];\r\n            }\r\n\r\n            for (var i = 0; i < deselectValues.length; i++) {\r\n                var value = deselectValues[i];\r\n\r\n                if (value === null || value === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                var $option = this.getOptionByValue(value);\r\n                var $checkbox = this.getInputByValue(value);\r\n\r\n                if($option === undefined || $checkbox === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (this.options.selectedClass) {\r\n                    $checkbox.closest('li')\r\n                        .removeClass(this.options.selectedClass);\r\n                }\r\n\r\n                $checkbox.prop('checked', false);\r\n                $option.prop('selected', false);\r\n                \r\n                if (triggerOnChange) {\r\n                    this.options.onChange($option, false);\r\n                }\r\n            }\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n        \r\n        /**\r\n         * Selects all enabled & visible options.\r\n         *\r\n         * If justVisible is true or not specified, only visible options are selected.\r\n         *\r\n         * @param {Boolean} justVisible\r\n         * @param {Boolean} triggerOnSelectAll\r\n         */\r\n        selectAll: function (justVisible, triggerOnSelectAll) {\r\n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\r\n            var allCheckboxes = $(\"li input[type='checkbox']:enabled\", this.$ul);\r\n            var visibleCheckboxes = allCheckboxes.filter(\":visible\");\r\n            var allCheckboxesCount = allCheckboxes.length;\r\n            var visibleCheckboxesCount = visibleCheckboxes.length;\r\n            \r\n            if(justVisible) {\r\n                visibleCheckboxes.prop('checked', true);\r\n                $(\"li:not(.divider):not(.disabled)\", this.$ul).filter(\":visible\").addClass(this.options.selectedClass);\r\n            }\r\n            else {\r\n                allCheckboxes.prop('checked', true);\r\n                $(\"li:not(.divider):not(.disabled)\", this.$ul).addClass(this.options.selectedClass);\r\n            }\r\n                \r\n            if (allCheckboxesCount === visibleCheckboxesCount || justVisible === false) {\r\n                $(\"option:enabled\", this.$select).prop('selected', true);\r\n            }\r\n            else {\r\n                var values = visibleCheckboxes.map(function() {\r\n                    return $(this).val();\r\n                }).get();\r\n                \r\n                $(\"option:enabled\", this.$select).filter(function(index) {\r\n                    return $.inArray($(this).val(), values) !== -1;\r\n                }).prop('selected', true);\r\n            }\r\n            \r\n            if (triggerOnSelectAll) {\r\n                this.options.onSelectAll();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Deselects all options.\r\n         * \r\n         * If justVisible is true or not specified, only visible options are deselected.\r\n         * \r\n         * @param {Boolean} justVisible\r\n         */\r\n        deselectAll: function (justVisible) {\r\n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\r\n            \r\n            if(justVisible) {              \r\n                var visibleCheckboxes = $(\"li input[type='checkbox']:not(:disabled)\", this.$ul).filter(\":visible\");\r\n                visibleCheckboxes.prop('checked', false);\r\n                \r\n                var values = visibleCheckboxes.map(function() {\r\n                    return $(this).val();\r\n                }).get();\r\n                \r\n                $(\"option:enabled\", this.$select).filter(function(index) {\r\n                    return $.inArray($(this).val(), values) !== -1;\r\n                }).prop('selected', false);\r\n                \r\n                if (this.options.selectedClass) {\r\n                    $(\"li:not(.divider):not(.disabled)\", this.$ul).filter(\":visible\").removeClass(this.options.selectedClass);\r\n                }\r\n            }\r\n            else {\r\n                $(\"li input[type='checkbox']:enabled\", this.$ul).prop('checked', false);\r\n                $(\"option:enabled\", this.$select).prop('selected', false);\r\n                \r\n                if (this.options.selectedClass) {\r\n                    $(\"li:not(.divider):not(.disabled)\", this.$ul).removeClass(this.options.selectedClass);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Rebuild the plugin.\r\n         * \r\n         * Rebuilds the dropdown, the filter and the select all option.\r\n         */\r\n        rebuild: function() {\r\n            this.$ul.html('');\r\n\r\n            // Important to distinguish between radios and checkboxes.\r\n            this.options.multiple = this.$select.attr('multiple') === \"multiple\";\r\n\r\n            this.buildSelectAll();\r\n            this.buildDropdownOptions();\r\n            this.buildFilter();\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n            \r\n            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\r\n                this.disable();\r\n            }\r\n            else {\r\n                this.enable();\r\n            }\r\n            \r\n            if (this.options.dropRight) {\r\n                this.$ul.addClass('pull-right');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The provided data will be used to build the dropdown.\r\n         */\r\n        dataprovider: function(dataprovider) {\r\n            \r\n            var groupCounter = 0;\r\n            var $select = this.$select.empty();\r\n            \r\n            $.each(dataprovider, function (index, option) {\r\n                var $tag;\r\n                \r\n                if ($.isArray(option.children)) { // create optiongroup tag\r\n                    groupCounter++;\r\n                    \r\n                    $tag = $('<optgroup/>').attr({\r\n                        label: option.label || 'Group ' + groupCounter,\r\n                        disabled: !!option.disabled\r\n                    });\r\n                    \r\n                    forEach(option.children, function(subOption) { // add children option tags\r\n                        $tag.append($('<option/>').attr({\r\n                            value: subOption.value,\r\n                            label: subOption.label || subOption.value,\r\n                            title: subOption.title,\r\n                            selected: !!subOption.selected,\r\n                            disabled: !!subOption.disabled\r\n                        }));\r\n                    });\r\n                }\r\n                else {\r\n                    $tag = $('<option/>').attr({\r\n                        value: option.value,\r\n                        label: option.label || option.value,\r\n                        title: option.title,\r\n                        selected: !!option.selected,\r\n                        disabled: !!option.disabled\r\n                    });\r\n                }\r\n                \r\n                $select.append($tag);\r\n            });\r\n            \r\n            this.rebuild();\r\n        },\r\n\r\n        /**\r\n         * Enable the multiselect.\r\n         */\r\n        enable: function() {\r\n            this.$select.prop('disabled', false);\r\n            this.$button.prop('disabled', false)\r\n                .removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Disable the multiselect.\r\n         */\r\n        disable: function() {\r\n            this.$select.prop('disabled', true);\r\n            this.$button.prop('disabled', true)\r\n                .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Set the options.\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        setOptions: function(options) {\r\n            this.options = this.mergeOptions(options);\r\n        },\r\n\r\n        /**\r\n         * Merges the given options with the default options.\r\n         *\r\n         * @param {Array} options\r\n         * @returns {Array}\r\n         */\r\n        mergeOptions: function(options) {\r\n            return $.extend(true, {}, this.defaults, this.options, options);\r\n        },\r\n\r\n        /**\r\n         * Checks whether a select all checkbox is present.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasSelectAll: function() {\r\n            return $('li.multiselect-all', this.$ul).length > 0;\r\n        },\r\n\r\n        /**\r\n         * Updates the select all checkbox based on the currently displayed and selected checkboxes.\r\n         */\r\n        updateSelectAll: function() {\r\n            if (this.hasSelectAll()) {\r\n                var allBoxes = $(\"li:not(.multiselect-item):not(.filter-hidden) input:enabled\", this.$ul);\r\n                var allBoxesLength = allBoxes.length;\r\n                var checkedBoxesLength = allBoxes.filter(\":checked\").length;\r\n                var selectAllLi  = $(\"li.multiselect-all\", this.$ul);\r\n                var selectAllInput = selectAllLi.find(\"input\");\r\n                \r\n                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\r\n                    selectAllInput.prop(\"checked\", true);\r\n                    selectAllLi.addClass(this.options.selectedClass);\r\n                    this.options.onSelectAll();\r\n                }\r\n                else {\r\n                    selectAllInput.prop(\"checked\", false);\r\n                    selectAllLi.removeClass(this.options.selectedClass);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update the button text and its title based on the currently selected options.\r\n         */\r\n        updateButtonText: function() {\r\n            var options = this.getSelected();\r\n            \r\n            // First update the displayed button text.\r\n            if (this.options.enableHTML) {\r\n                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\r\n            }\r\n            else {\r\n                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\r\n            }\r\n            \r\n            // Now update the title attribute of the button.\r\n            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\r\n        },\r\n\r\n        /**\r\n         * Get all selected options.\r\n         *\r\n         * @returns {jQUery}\r\n         */\r\n        getSelected: function() {\r\n            return $('option', this.$select).filter(\":selected\");\r\n        },\r\n\r\n        /**\r\n         * Gets a select option by its value.\r\n         *\r\n         * @param {String} value\r\n         * @returns {jQuery}\r\n         */\r\n        getOptionByValue: function (value) {\r\n\r\n            var options = $('option', this.$select);\r\n            var valueToCompare = value.toString();\r\n\r\n            for (var i = 0; i < options.length; i = i + 1) {\r\n                var option = options[i];\r\n                if (option.value === valueToCompare) {\r\n                    return $(option);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the input (radio/checkbox) by its value.\r\n         *\r\n         * @param {String} value\r\n         * @returns {jQuery}\r\n         */\r\n        getInputByValue: function (value) {\r\n\r\n            var checkboxes = $('li input', this.$ul);\r\n            var valueToCompare = value.toString();\r\n\r\n            for (var i = 0; i < checkboxes.length; i = i + 1) {\r\n                var checkbox = checkboxes[i];\r\n                if (checkbox.value === valueToCompare) {\r\n                    return $(checkbox);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Used for knockout integration.\r\n         */\r\n        updateOriginalOptions: function() {\r\n            this.originalOptions = this.$select.clone()[0].options;\r\n        },\r\n\r\n        asyncFunction: function(callback, timeout, self) {\r\n            var args = Array.prototype.slice.call(arguments, 3);\r\n            return setTimeout(function() {\r\n                callback.apply(self || window, args);\r\n            }, timeout);\r\n        },\r\n\r\n        setAllSelectedText: function(allSelectedText) {\r\n            this.options.allSelectedText = allSelectedText;\r\n            this.updateButtonText();\r\n        }\r\n    };\r\n\r\n    $.fn.multiselect = function(option, parameter, extraOptions) {\r\n        return this.each(function() {\r\n            var data = $(this).data('multiselect');\r\n            var options = typeof option === 'object' && option;\r\n\r\n            // Initialize the multiselect.\r\n            if (!data) {\r\n                data = new Multiselect(this, options);\r\n                $(this).data('multiselect', data);\r\n            }\r\n\r\n            // Call multiselect method.\r\n            if (typeof option === 'string') {\r\n                data[option](parameter, extraOptions);\r\n                \r\n                if (option === 'destroy') {\r\n                    $(this).data('multiselect', false);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    $.fn.multiselect.Constructor = Multiselect;\r\n\r\n    $(function() {\r\n        $(\"select[data-role=multiselect]\").multiselect();\r\n    });\r\n\r\n}(window.jQuery);\r\n"],"sourceRoot":"/source/"}