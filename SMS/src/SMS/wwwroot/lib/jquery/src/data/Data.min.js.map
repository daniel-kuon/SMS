{"version":3,"sources":["wwwroot/lib/jquery/src/data/Data.js"],"names":["define","jQuery","rnotwhite","acceptData","Data","this","expando","uid","prototype","register","owner","initial","value","nodeType","Object","defineProperty","writable","configurable","cache","set","data","prop","get","key","undefined","access","stored","camelCase","remove","i","name","camel","isArray","concat","map","match","length","isEmptyObject","hasData"],"mappings":"AAAAA,QACC,UACA,mBACA,oBACE,SAAUC,EAAQC,EAAWC,GAEhC,QAASC,KACRC,KAAKC,QAAUL,EAAOK,QAAUF,EAAKG,MA+LtC,MA5LAH,GAAKG,IAAM,EAEXH,EAAKI,WAEJC,SAAU,SAAUC,EAAOC,GAC1B,GAAIC,GAAQD,KAiBZ,OAbKD,GAAMG,SACVH,EAAOL,KAAKC,SAAYM,EAMxBE,OAAOC,eAAgBL,EAAOL,KAAKC,SAClCM,MAAOA,EACPI,UAAU,EACVC,cAAc,IAGTP,EAAOL,KAAKC,UAEpBY,MAAO,SAAUR,GAKhB,IAAMP,EAAYO,GACjB,QAID,IAAIE,GAAQF,EAAOL,KAAKC,QA4BxB,OAzBMM,KACLA,KAKKT,EAAYO,KAIXA,EAAMG,SACVH,EAAOL,KAAKC,SAAYM,EAMxBE,OAAOC,eAAgBL,EAAOL,KAAKC,SAClCM,MAAOA,EACPK,cAAc,MAMXL,GAERO,IAAK,SAAUT,EAAOU,EAAMR,GAC3B,GAAIS,GACHH,EAAQb,KAAKa,MAAOR,EAGrB,IAAqB,gBAATU,GACXF,EAAOE,GAASR,MAMhB,KAAMS,IAAQD,GACbF,EAAOG,GAASD,EAAMC,EAGxB,OAAOH,IAERI,IAAK,SAAUZ,EAAOa,GACrB,MAAeC,UAARD,EACNlB,KAAKa,MAAOR,GACZA,EAAOL,KAAKC,UAAaI,EAAOL,KAAKC,SAAWiB,IAElDE,OAAQ,SAAUf,EAAOa,EAAKX,GAC7B,GAAIc,EAaJ,OAAaF,UAARD,GACCA,GAAsB,gBAARA,IAAgCC,SAAVZ,GAEzCc,EAASrB,KAAKiB,IAAKZ,EAAOa,GAERC,SAAXE,EACNA,EAASrB,KAAKiB,IAAKZ,EAAOT,EAAO0B,UAAWJ,MAS9ClB,KAAKc,IAAKT,EAAOa,EAAKX,GAILY,SAAVZ,EAAsBA,EAAQW,IAEtCK,OAAQ,SAAUlB,EAAOa,GACxB,GAAIM,GAAGC,EAAMC,EACZb,EAAQR,EAAOL,KAAKC,QAErB,IAAekB,SAAVN,EAAL,CAIA,GAAaM,SAARD,EACJlB,KAAKI,SAAUC,OAET,CAGDT,EAAO+B,QAAST,GAQpBO,EAAOP,EAAIU,OAAQV,EAAIW,IAAKjC,EAAO0B,aAEnCI,EAAQ9B,EAAO0B,UAAWJ,GAGrBA,IAAOL,GACXY,GAASP,EAAKQ,IAKdD,EAAOC,EACPD,EAAOA,IAAQZ,IACZY,GAAWA,EAAKK,MAAOjC,SAI5B2B,EAAIC,EAAKM,MAET,MAAQP,WACAX,GAAOY,EAAMD,KAKTL,SAARD,GAAqBtB,EAAOoC,cAAenB,MAM1CR,EAAMG,SACVH,EAAOL,KAAKC,SAAYkB,aAEjBd,GAAOL,KAAKC,YAItBgC,QAAS,SAAU5B,GAClB,GAAIQ,GAAQR,EAAOL,KAAKC,QACxB,OAAiBkB,UAAVN,IAAwBjB,EAAOoC,cAAenB,KAIhDd","file":"wwwroot/lib/jquery/src/data/Data.min.js","sourcesContent":["define( [\r\n\t\"../core\",\r\n\t\"../var/rnotwhite\",\r\n\t\"./var/acceptData\"\r\n], function( jQuery, rnotwhite, acceptData ) {\r\n\r\nfunction Data() {\r\n\tthis.expando = jQuery.expando + Data.uid++;\r\n}\r\n\r\nData.uid = 1;\r\n\r\nData.prototype = {\r\n\r\n\tregister: function( owner, initial ) {\r\n\t\tvar value = initial || {};\r\n\r\n\t\t// If it is a node unlikely to be stringify-ed or looped over\r\n\t\t// use plain assignment\r\n\t\tif ( owner.nodeType ) {\r\n\t\t\towner[ this.expando ] = value;\r\n\r\n\t\t// Otherwise secure it in a non-enumerable, non-writable property\r\n\t\t// configurability must be true to allow the property to be\r\n\t\t// deleted with the delete operator\r\n\t\t} else {\r\n\t\t\tObject.defineProperty( owner, this.expando, {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\twritable: true,\r\n\t\t\t\tconfigurable: true\r\n\t\t\t} );\r\n\t\t}\r\n\t\treturn owner[ this.expando ];\r\n\t},\r\n\tcache: function( owner ) {\r\n\r\n\t\t// We can accept data for non-element nodes in modern browsers,\r\n\t\t// but we should not, see #8335.\r\n\t\t// Always return an empty object.\r\n\t\tif ( !acceptData( owner ) ) {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\t// Check if the owner object already has a cache\r\n\t\tvar value = owner[ this.expando ];\r\n\r\n\t\t// If not, create one\r\n\t\tif ( !value ) {\r\n\t\t\tvalue = {};\r\n\r\n\t\t\t// We can accept data for non-element nodes in modern browsers,\r\n\t\t\t// but we should not, see #8335.\r\n\t\t\t// Always return an empty object.\r\n\t\t\tif ( acceptData( owner ) ) {\r\n\r\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\r\n\t\t\t\t// use plain assignment\r\n\t\t\t\tif ( owner.nodeType ) {\r\n\t\t\t\t\towner[ this.expando ] = value;\r\n\r\n\t\t\t\t// Otherwise secure it in a non-enumerable property\r\n\t\t\t\t// configurable must be true to allow the property to be\r\n\t\t\t\t// deleted when data is removed\r\n\t\t\t\t} else {\r\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tconfigurable: true\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t},\r\n\tset: function( owner, data, value ) {\r\n\t\tvar prop,\r\n\t\t\tcache = this.cache( owner );\r\n\r\n\t\t// Handle: [ owner, key, value ] args\r\n\t\tif ( typeof data === \"string\" ) {\r\n\t\t\tcache[ data ] = value;\r\n\r\n\t\t// Handle: [ owner, { properties } ] args\r\n\t\t} else {\r\n\r\n\t\t\t// Copy the properties one-by-one to the cache object\r\n\t\t\tfor ( prop in data ) {\r\n\t\t\t\tcache[ prop ] = data[ prop ];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cache;\r\n\t},\r\n\tget: function( owner, key ) {\r\n\t\treturn key === undefined ?\r\n\t\t\tthis.cache( owner ) :\r\n\t\t\towner[ this.expando ] && owner[ this.expando ][ key ];\r\n\t},\r\n\taccess: function( owner, key, value ) {\r\n\t\tvar stored;\r\n\r\n\t\t// In cases where either:\r\n\t\t//\r\n\t\t//   1. No key was specified\r\n\t\t//   2. A string key was specified, but no value provided\r\n\t\t//\r\n\t\t// Take the \"read\" path and allow the get method to determine\r\n\t\t// which value to return, respectively either:\r\n\t\t//\r\n\t\t//   1. The entire cache object\r\n\t\t//   2. The data stored at the key\r\n\t\t//\r\n\t\tif ( key === undefined ||\r\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\r\n\r\n\t\t\tstored = this.get( owner, key );\r\n\r\n\t\t\treturn stored !== undefined ?\r\n\t\t\t\tstored : this.get( owner, jQuery.camelCase( key ) );\r\n\t\t}\r\n\r\n\t\t// When the key is not a string, or both a key and value\r\n\t\t// are specified, set or extend (existing objects) with either:\r\n\t\t//\r\n\t\t//   1. An object of properties\r\n\t\t//   2. A key and value\r\n\t\t//\r\n\t\tthis.set( owner, key, value );\r\n\r\n\t\t// Since the \"set\" path can have two possible entry points\r\n\t\t// return the expected data based on which path was taken[*]\r\n\t\treturn value !== undefined ? value : key;\r\n\t},\r\n\tremove: function( owner, key ) {\r\n\t\tvar i, name, camel,\r\n\t\t\tcache = owner[ this.expando ];\r\n\r\n\t\tif ( cache === undefined ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( key === undefined ) {\r\n\t\t\tthis.register( owner );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Support array or space separated string of keys\r\n\t\t\tif ( jQuery.isArray( key ) ) {\r\n\r\n\t\t\t\t// If \"name\" is an array of keys...\r\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\r\n\t\t\t\t// keys will be converted to camelCase.\r\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\r\n\t\t\t\t// both plain key and camelCase key. #12786\r\n\t\t\t\t// This will only penalize the array argument path.\r\n\t\t\t\tname = key.concat( key.map( jQuery.camelCase ) );\r\n\t\t\t} else {\r\n\t\t\t\tcamel = jQuery.camelCase( key );\r\n\r\n\t\t\t\t// Try the string as a key before any manipulation\r\n\t\t\t\tif ( key in cache ) {\r\n\t\t\t\t\tname = [ key, camel ];\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// If a key with the spaces exists, use it.\r\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\r\n\t\t\t\t\tname = camel;\r\n\t\t\t\t\tname = name in cache ?\r\n\t\t\t\t\t\t[ name ] : ( name.match( rnotwhite ) || [] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\ti = name.length;\r\n\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tdelete cache[ name[ i ] ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Remove the expando if there's no more data\r\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\r\n\r\n\t\t\t// Support: Chrome <= 35-45+\r\n\t\t\t// Webkit & Blink performance suffers when deleting properties\r\n\t\t\t// from DOM nodes, so set to undefined instead\r\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=378607\r\n\t\t\tif ( owner.nodeType ) {\r\n\t\t\t\towner[ this.expando ] = undefined;\r\n\t\t\t} else {\r\n\t\t\t\tdelete owner[ this.expando ];\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\thasData: function( owner ) {\r\n\t\tvar cache = owner[ this.expando ];\r\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\r\n\t}\r\n};\r\n\r\nreturn Data;\r\n} );\r\n"],"sourceRoot":"/source/"}