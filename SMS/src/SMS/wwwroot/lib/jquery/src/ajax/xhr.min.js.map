{"version":3,"sources":["wwwroot/lib/jquery/src/ajax/xhr.js"],"names":["define","jQuery","support","ajaxSettings","xhr","window","XMLHttpRequest","e","xhrSuccessStatus",0,1223,"xhrSupported","cors","ajax","ajaxTransport","options","callback","errorCallback","crossDomain","send","headers","complete","i","open","type","url","async","username","password","xhrFields","mimeType","overrideMimeType","setRequestHeader","onload","onerror","onabort","onreadystatechange","abort","status","statusText","responseType","responseText","binary","response","text","getAllResponseHeaders","undefined","readyState","setTimeout","hasContent","data"],"mappings":"AAAAA,QACC,UACA,iBACA,WACE,SAAUC,EAAQC,GAErBD,EAAOE,aAAaC,IAAM,WACzB,IACC,MAAO,IAAIC,QAAOC,eACjB,MAAQC,KAGX,IAAIC,IAGFC,EAAG,IAIHC,KAAM,KAEPC,EAAeV,EAAOE,aAAaC,KAEpCF,GAAQU,OAASD,GAAkB,mBAAqBA,GACxDT,EAAQW,KAAOF,IAAiBA,EAEhCV,EAAOa,cAAe,SAAUC,GAC/B,GAAIC,GAAUC,CAGd,OAAKf,GAAQU,MAAQD,IAAiBI,EAAQG,aAE5CC,KAAM,SAAUC,EAASC,GACxB,GAAIC,GACHlB,EAAMW,EAAQX,KAWf,IATAA,EAAImB,KACHR,EAAQS,KACRT,EAAQU,IACRV,EAAQW,MACRX,EAAQY,SACRZ,EAAQa,UAIJb,EAAQc,UACZ,IAAMP,IAAKP,GAAQc,UAClBzB,EAAKkB,GAAMP,EAAQc,UAAWP,EAK3BP,GAAQe,UAAY1B,EAAI2B,kBAC5B3B,EAAI2B,iBAAkBhB,EAAQe,UAQzBf,EAAQG,aAAgBE,EAAS,sBACtCA,EAAS,oBAAuB,iBAIjC,KAAME,IAAKF,GACVhB,EAAI4B,iBAAkBV,EAAGF,EAASE,GAInCN,GAAW,SAAUQ,GACpB,MAAO,YACDR,IACJA,EAAWC,EAAgBb,EAAI6B,OAC9B7B,EAAI8B,QAAU9B,EAAI+B,QAAU/B,EAAIgC,mBAAqB,KAExC,UAATZ,EACJpB,EAAIiC,QACgB,UAATb,EAKgB,gBAAfpB,GAAIkC,OACfjB,EAAU,EAAG,SAEbA,EAGCjB,EAAIkC,OACJlC,EAAImC,YAINlB,EACCb,EAAkBJ,EAAIkC,SAAYlC,EAAIkC,OACtClC,EAAImC,WAK+B,UAAjCnC,EAAIoC,cAAgB,SACM,gBAArBpC,GAAIqC,cACRC,OAAQtC,EAAIuC,WACZC,KAAMxC,EAAIqC,cACbrC,EAAIyC,4BAQTzC,EAAI6B,OAASjB,IACbC,EAAgBb,EAAI8B,QAAUlB,EAAU,SAKnB8B,SAAhB1C,EAAI+B,QACR/B,EAAI+B,QAAUlB,EAEdb,EAAIgC,mBAAqB,WAGA,IAAnBhC,EAAI2C,YAMR1C,OAAO2C,WAAY,WACbhC,GACJC,OAQLD,EAAWA,EAAU,QAErB,KAGCZ,EAAIe,KAAMJ,EAAQkC,YAAclC,EAAQmC,MAAQ,MAC/C,MAAQ3C,GAGT,GAAKS,EACJ,KAAMT,KAKT8B,MAAO,WACDrB,GACJA,MAjIJ","file":"wwwroot/lib/jquery/src/ajax/xhr.min.js","sourcesContent":["define( [\r\n\t\"../core\",\r\n\t\"../var/support\",\r\n\t\"../ajax\"\r\n], function( jQuery, support ) {\r\n\r\njQuery.ajaxSettings.xhr = function() {\r\n\ttry {\r\n\t\treturn new window.XMLHttpRequest();\r\n\t} catch ( e ) {}\r\n};\r\n\r\nvar xhrSuccessStatus = {\r\n\r\n\t\t// File protocol always yields status code 0, assume 200\r\n\t\t0: 200,\r\n\r\n\t\t// Support: IE9\r\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\r\n\t\t1223: 204\r\n\t},\r\n\txhrSupported = jQuery.ajaxSettings.xhr();\r\n\r\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\r\nsupport.ajax = xhrSupported = !!xhrSupported;\r\n\r\njQuery.ajaxTransport( function( options ) {\r\n\tvar callback, errorCallback;\r\n\r\n\t// Cross domain only allowed if supported through XMLHttpRequest\r\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\r\n\t\treturn {\r\n\t\t\tsend: function( headers, complete ) {\r\n\t\t\t\tvar i,\r\n\t\t\t\t\txhr = options.xhr();\r\n\r\n\t\t\t\txhr.open(\r\n\t\t\t\t\toptions.type,\r\n\t\t\t\t\toptions.url,\r\n\t\t\t\t\toptions.async,\r\n\t\t\t\t\toptions.username,\r\n\t\t\t\t\toptions.password\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Apply custom fields if provided\r\n\t\t\t\tif ( options.xhrFields ) {\r\n\t\t\t\t\tfor ( i in options.xhrFields ) {\r\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Override mime type if needed\r\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\r\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// X-Requested-With header\r\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\r\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\r\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\r\n\t\t\t\t// For same-domain requests, won't change header if already provided.\r\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\r\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set headers\r\n\t\t\t\tfor ( i in headers ) {\r\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Callback\r\n\t\t\t\tcallback = function( type ) {\r\n\t\t\t\t\treturn function() {\r\n\t\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\r\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\r\n\r\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\r\n\t\t\t\t\t\t\t\txhr.abort();\r\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\r\n\r\n\t\t\t\t\t\t\t\t// Support: IE9\r\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\r\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\r\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\r\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tcomplete(\r\n\r\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\r\n\t\t\t\t\t\t\t\t\t\txhr.status,\r\n\t\t\t\t\t\t\t\t\t\txhr.statusText\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcomplete(\r\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\r\n\t\t\t\t\t\t\t\t\txhr.statusText,\r\n\r\n\t\t\t\t\t\t\t\t\t// Support: IE9 only\r\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\r\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\r\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\r\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\r\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\r\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\r\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Listen to events\r\n\t\t\t\txhr.onload = callback();\r\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\r\n\r\n\t\t\t\t// Support: IE9\r\n\t\t\t\t// Use onreadystatechange to replace onabort\r\n\t\t\t\t// to handle uncaught aborts\r\n\t\t\t\tif ( xhr.onabort !== undefined ) {\r\n\t\t\t\t\txhr.onabort = errorCallback;\r\n\t\t\t\t} else {\r\n\t\t\t\t\txhr.onreadystatechange = function() {\r\n\r\n\t\t\t\t\t\t// Check readyState before timeout as it changes\r\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\r\n\r\n\t\t\t\t\t\t\t// Allow onerror to be called first,\r\n\t\t\t\t\t\t\t// but that will not handle a native abort\r\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\r\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\r\n\t\t\t\t\t\t\twindow.setTimeout( function() {\r\n\t\t\t\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\t\t\t\terrorCallback();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create the abort callback\r\n\t\t\t\tcallback = callback( \"abort\" );\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\t// Do send the request (this may raise an exception)\r\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\r\n\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tabort: function() {\r\n\t\t\t\tif ( callback ) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n} );\r\n\r\n} );\r\n"],"sourceRoot":"/source/"}