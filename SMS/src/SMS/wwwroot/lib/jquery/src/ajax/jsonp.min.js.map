{"version":3,"sources":["wwwroot/lib/jquery/src/ajax/jsonp.js"],"names":["define","jQuery","nonce","rquery","oldCallbacks","rjsonp","ajaxSetup","jsonp","jsonpCallback","callback","pop","expando","this","ajaxPrefilter","s","originalSettings","jqXHR","callbackName","overwritten","responseContainer","jsonProp","test","url","data","contentType","indexOf","dataTypes","isFunction","replace","converters","error","window","arguments","always","undefined","removeProp","push"],"mappings":"AAAAA,QACC,UACA,cACA,eACA,WACE,SAAUC,EAAQC,EAAOC,GAE5B,GAAIC,MACHC,EAAS,mBAGVJ,GAAOK,WACNC,MAAO,WACPC,cAAe,WACd,GAAIC,GAAWL,EAAaM,OAAWT,EAAOU,QAAU,IAAQT,GAEhE,OADAU,MAAMH,IAAa,EACZA,KAKTR,EAAOY,cAAe,aAAc,SAAUC,EAAGC,EAAkBC,GAElE,GAAIC,GAAcC,EAAaC,EAC9BC,EAAWN,EAAEP,SAAU,IAAWF,EAAOgB,KAAMP,EAAEQ,KAChD,MACkB,gBAAXR,GAAES,MAE6C,KADnDT,EAAEU,aAAe,IACjBC,QAAS,sCACXpB,EAAOgB,KAAMP,EAAES,OAAU,OAI5B,OAAKH,IAAiC,UAArBN,EAAEY,UAAW,IAG7BT,EAAeH,EAAEN,cAAgBP,EAAO0B,WAAYb,EAAEN,eACrDM,EAAEN,gBACFM,EAAEN,cAGEY,EACJN,EAAGM,GAAaN,EAAGM,GAAWQ,QAASvB,EAAQ,KAAOY,GAC3CH,EAAEP,SAAU,IACvBO,EAAEQ,MAASnB,EAAOkB,KAAMP,EAAEQ,KAAQ,IAAM,KAAQR,EAAEP,MAAQ,IAAMU,GAIjEH,EAAEe,WAAY,eAAkB,WAI/B,MAHMV,IACLlB,EAAO6B,MAAOb,EAAe,mBAEvBE,EAAmB,IAI3BL,EAAEY,UAAW,GAAM,OAGnBR,EAAca,OAAQd,GACtBc,OAAQd,GAAiB,WACxBE,EAAoBa,WAIrBhB,EAAMiB,OAAQ,WAGQC,SAAhBhB,EACJjB,EAAQ8B,QAASI,WAAYlB,GAI7Bc,OAAQd,GAAiBC,EAIrBJ,EAAGG,KAGPH,EAAEN,cAAgBO,EAAiBP,cAGnCJ,EAAagC,KAAMnB,IAIfE,GAAqBlB,EAAO0B,WAAYT,IAC5CA,EAAaC,EAAmB,IAGjCA,EAAoBD,EAAcgB,SAI5B,UA9DR","file":"wwwroot/lib/jquery/src/ajax/jsonp.min.js","sourcesContent":["define( [\r\n\t\"../core\",\r\n\t\"./var/nonce\",\r\n\t\"./var/rquery\",\r\n\t\"../ajax\"\r\n], function( jQuery, nonce, rquery ) {\r\n\r\nvar oldCallbacks = [],\r\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\r\n\r\n// Default jsonp settings\r\njQuery.ajaxSetup( {\r\n\tjsonp: \"callback\",\r\n\tjsonpCallback: function() {\r\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\r\n\t\tthis[ callback ] = true;\r\n\t\treturn callback;\r\n\t}\r\n} );\r\n\r\n// Detect, normalize options and install callbacks for jsonp requests\r\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\r\n\r\n\tvar callbackName, overwritten, responseContainer,\r\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\r\n\t\t\t\"url\" :\r\n\t\t\ttypeof s.data === \"string\" &&\r\n\t\t\t\t( s.contentType || \"\" )\r\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\r\n\t\t\t\trjsonp.test( s.data ) && \"data\"\r\n\t\t);\r\n\r\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\r\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\r\n\r\n\t\t// Get callback name, remembering preexisting value associated with it\r\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\r\n\t\t\ts.jsonpCallback() :\r\n\t\t\ts.jsonpCallback;\r\n\r\n\t\t// Insert callback into url or form data\r\n\t\tif ( jsonProp ) {\r\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\r\n\t\t} else if ( s.jsonp !== false ) {\r\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\r\n\t\t}\r\n\r\n\t\t// Use data converter to retrieve json after script execution\r\n\t\ts.converters[ \"script json\" ] = function() {\r\n\t\t\tif ( !responseContainer ) {\r\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\r\n\t\t\t}\r\n\t\t\treturn responseContainer[ 0 ];\r\n\t\t};\r\n\r\n\t\t// Force json dataType\r\n\t\ts.dataTypes[ 0 ] = \"json\";\r\n\r\n\t\t// Install callback\r\n\t\toverwritten = window[ callbackName ];\r\n\t\twindow[ callbackName ] = function() {\r\n\t\t\tresponseContainer = arguments;\r\n\t\t};\r\n\r\n\t\t// Clean-up function (fires after converters)\r\n\t\tjqXHR.always( function() {\r\n\r\n\t\t\t// If previous value didn't exist - remove it\r\n\t\t\tif ( overwritten === undefined ) {\r\n\t\t\t\tjQuery( window ).removeProp( callbackName );\r\n\r\n\t\t\t// Otherwise restore preexisting value\r\n\t\t\t} else {\r\n\t\t\t\twindow[ callbackName ] = overwritten;\r\n\t\t\t}\r\n\r\n\t\t\t// Save back as free\r\n\t\t\tif ( s[ callbackName ] ) {\r\n\r\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\r\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\r\n\r\n\t\t\t\t// Save the callback name for future use\r\n\t\t\t\toldCallbacks.push( callbackName );\r\n\t\t\t}\r\n\r\n\t\t\t// Call if it was a function and we have a response\r\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\r\n\t\t\t\toverwritten( responseContainer[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\tresponseContainer = overwritten = undefined;\r\n\t\t} );\r\n\r\n\t\t// Delegate to script\r\n\t\treturn \"script\";\r\n\t}\r\n} );\r\n\r\n} );\r\n"],"sourceRoot":"/source/"}