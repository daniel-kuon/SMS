{"version":3,"sources":["wwwroot/lib/jquery/src/exports/amd.js"],"names":["define","jQuery","amd"],"mappings":"AAAAA,QACC,WACE,SAAUC,GAeU,kBAAXD,SAAyBA,OAAOE,KAC3CF,OAAQ,YAAc,WACrB,MAAOC","file":"wwwroot/lib/jquery/src/exports/amd.min.js","sourcesContent":["define( [\r\n\t\"../core\"\r\n], function( jQuery ) {\r\n\r\n// Register as a named AMD module, since jQuery can be concatenated with other\r\n// files that may use define, but not via a proper concatenation script that\r\n// understands anonymous AMD modules. A named AMD is safest and most robust\r\n// way to register. Lowercase jquery is used because AMD module names are\r\n// derived from file names, and jQuery is normally delivered in a lowercase\r\n// file name. Do this after creating the global so that if an AMD module wants\r\n// to call noConflict to hide this version of jQuery, it will work.\r\n\r\n// Note that for maximum portability, libraries that are not jQuery should\r\n// declare themselves as anonymous modules, and avoid setting a global if an\r\n// AMD loader is present. jQuery is a special case. For more information, see\r\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\r\n\r\nif ( typeof define === \"function\" && define.amd ) {\r\n\tdefine( \"jquery\", [], function() {\r\n\t\treturn jQuery;\r\n\t} );\r\n}\r\n\r\n} );\r\n"],"sourceRoot":"/source/"}