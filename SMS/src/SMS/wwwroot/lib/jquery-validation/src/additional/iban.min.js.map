{"version":3,"sources":["wwwroot/lib/jquery-validation/src/additional/iban.js"],"names":["$","validator","addMethod","value","element","this","optional","countrycode","ibancheck","charAt","cChar","bbanpattern","bbancountrypatterns","ibanregexp","i","p","iban","replace","toUpperCase","ibancheckdigits","leadingZeroes","cRest","cOperator","substring","AL","AD","AT","AZ","BE","BH","BA","BR","BG","CR","HR","CY","CZ","DK","DO","EE","FO","FI","FR","GE","DE","GI","GR","GL","GT","HU","IS","IE","IL","IT","KZ","KW","LV","LB","LI","LT","LU","MK","MT","MR","MU","MC","MD","ME","NL","NO","PK","PS","PL","PT","RO","SM","SA","RS","SK","SI","ES","SE","CH","TN","TR","AE","GB","VG","RegExp","test","length","indexOf"],"mappings":"AAMAA,EAAEC,UAAUC,UAAW,OAAQ,SAAUC,EAAOC,GAG/C,GAAKC,KAAKC,SAAUF,GACnB,OAAO,CAIR,IAKCG,GAAaC,EAAWC,EAAQC,EAAOC,EAAaC,EAAqBC,EAAYC,EAAGC,EALrFC,EAAOb,EAAMc,QAAS,KAAM,IAAKC,cACpCC,EAAkB,GAClBC,GAAgB,EAChBC,EAAQ,GACRC,EAAY,EAiFb,IA7EAf,EAAcS,EAAKO,UAAW,EAAG,GACjCX,GACCY,GAAM,qBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,4BACNC,GAAM,UACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,kBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,4BACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,0BACNC,GAAM,UACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,2BACNC,GAAM,qBACNC,GAAM,uBACNC,GAAM,uBACNC,GAAM,qBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,2BACNC,GAAM,6BACNC,GAAM,UACNC,GAAM,0BACNC,GAAM,4BACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,kBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,2BACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,gBACNC,GAAM,kBACNC,GAAM,sBAGP5E,EAAcC,EAAqBL,GASP,mBAAhBI,KACXE,EAAa,GAAI2E,QAAQ,kBAAoB7E,EAAc,IAAK,KACxDE,EAAW4E,KAAMzE,IACxB,OAAO,CAMT,KADAR,EAAYQ,EAAKO,UAAW,EAAGP,EAAK0E,QAAW1E,EAAKO,UAAW,EAAG,GAC5DT,EAAI,EAAGA,EAAIN,EAAUkF,OAAQ5E,IAClCL,EAASD,EAAUC,OAAQK,GACX,MAAXL,IACJW,GAAgB,GAEXA,IACLD,GAAmB,uCAAuCwE,QAASlF,GAKrE,KAAMM,EAAI,EAAGA,EAAII,EAAgBuE,OAAQ3E,IACxCL,EAAQS,EAAgBV,OAAQM,GAChCO,EAAY,GAAKD,EAAaX,EAC9BW,EAAQC,EAAY,EAErB,OAAiB,KAAVD,GACL","file":"wwwroot/lib/jquery-validation/src/additional/iban.min.js","sourcesContent":["/**\n * IBAN is the international bank account number.\n * It has a country - specific format, that is checked here too\n *\n * Validation is case-insensitive. Please make sure to normalize input yourself.\n */\n$.validator.addMethod( \"iban\", function( value, element ) {\n\n\t// Some quick simple tests to prevent needless work\n\tif ( this.optional( element ) ) {\n\t\treturn true;\n\t}\n\n\t// Remove spaces and to upper case\n\tvar iban = value.replace( / /g, \"\" ).toUpperCase(),\n\t\tibancheckdigits = \"\",\n\t\tleadingZeroes = true,\n\t\tcRest = \"\",\n\t\tcOperator = \"\",\n\t\tcountrycode, ibancheck, charAt, cChar, bbanpattern, bbancountrypatterns, ibanregexp, i, p;\n\n\t// Check the country code and find the country specific format\n\tcountrycode = iban.substring( 0, 2 );\n\tbbancountrypatterns = {\n\t\t\"AL\": \"\\\\d{8}[\\\\dA-Z]{16}\",\n\t\t\"AD\": \"\\\\d{8}[\\\\dA-Z]{12}\",\n\t\t\"AT\": \"\\\\d{16}\",\n\t\t\"AZ\": \"[\\\\dA-Z]{4}\\\\d{20}\",\n\t\t\"BE\": \"\\\\d{12}\",\n\t\t\"BH\": \"[A-Z]{4}[\\\\dA-Z]{14}\",\n\t\t\"BA\": \"\\\\d{16}\",\n\t\t\"BR\": \"\\\\d{23}[A-Z][\\\\dA-Z]\",\n\t\t\"BG\": \"[A-Z]{4}\\\\d{6}[\\\\dA-Z]{8}\",\n\t\t\"CR\": \"\\\\d{17}\",\n\t\t\"HR\": \"\\\\d{17}\",\n\t\t\"CY\": \"\\\\d{8}[\\\\dA-Z]{16}\",\n\t\t\"CZ\": \"\\\\d{20}\",\n\t\t\"DK\": \"\\\\d{14}\",\n\t\t\"DO\": \"[A-Z]{4}\\\\d{20}\",\n\t\t\"EE\": \"\\\\d{16}\",\n\t\t\"FO\": \"\\\\d{14}\",\n\t\t\"FI\": \"\\\\d{14}\",\n\t\t\"FR\": \"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\",\n\t\t\"GE\": \"[\\\\dA-Z]{2}\\\\d{16}\",\n\t\t\"DE\": \"\\\\d{18}\",\n\t\t\"GI\": \"[A-Z]{4}[\\\\dA-Z]{15}\",\n\t\t\"GR\": \"\\\\d{7}[\\\\dA-Z]{16}\",\n\t\t\"GL\": \"\\\\d{14}\",\n\t\t\"GT\": \"[\\\\dA-Z]{4}[\\\\dA-Z]{20}\",\n\t\t\"HU\": \"\\\\d{24}\",\n\t\t\"IS\": \"\\\\d{22}\",\n\t\t\"IE\": \"[\\\\dA-Z]{4}\\\\d{14}\",\n\t\t\"IL\": \"\\\\d{19}\",\n\t\t\"IT\": \"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\",\n\t\t\"KZ\": \"\\\\d{3}[\\\\dA-Z]{13}\",\n\t\t\"KW\": \"[A-Z]{4}[\\\\dA-Z]{22}\",\n\t\t\"LV\": \"[A-Z]{4}[\\\\dA-Z]{13}\",\n\t\t\"LB\": \"\\\\d{4}[\\\\dA-Z]{20}\",\n\t\t\"LI\": \"\\\\d{5}[\\\\dA-Z]{12}\",\n\t\t\"LT\": \"\\\\d{16}\",\n\t\t\"LU\": \"\\\\d{3}[\\\\dA-Z]{13}\",\n\t\t\"MK\": \"\\\\d{3}[\\\\dA-Z]{10}\\\\d{2}\",\n\t\t\"MT\": \"[A-Z]{4}\\\\d{5}[\\\\dA-Z]{18}\",\n\t\t\"MR\": \"\\\\d{23}\",\n\t\t\"MU\": \"[A-Z]{4}\\\\d{19}[A-Z]{3}\",\n\t\t\"MC\": \"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\",\n\t\t\"MD\": \"[\\\\dA-Z]{2}\\\\d{18}\",\n\t\t\"ME\": \"\\\\d{18}\",\n\t\t\"NL\": \"[A-Z]{4}\\\\d{10}\",\n\t\t\"NO\": \"\\\\d{11}\",\n\t\t\"PK\": \"[\\\\dA-Z]{4}\\\\d{16}\",\n\t\t\"PS\": \"[\\\\dA-Z]{4}\\\\d{21}\",\n\t\t\"PL\": \"\\\\d{24}\",\n\t\t\"PT\": \"\\\\d{21}\",\n\t\t\"RO\": \"[A-Z]{4}[\\\\dA-Z]{16}\",\n\t\t\"SM\": \"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\",\n\t\t\"SA\": \"\\\\d{2}[\\\\dA-Z]{18}\",\n\t\t\"RS\": \"\\\\d{18}\",\n\t\t\"SK\": \"\\\\d{20}\",\n\t\t\"SI\": \"\\\\d{15}\",\n\t\t\"ES\": \"\\\\d{20}\",\n\t\t\"SE\": \"\\\\d{20}\",\n\t\t\"CH\": \"\\\\d{5}[\\\\dA-Z]{12}\",\n\t\t\"TN\": \"\\\\d{20}\",\n\t\t\"TR\": \"\\\\d{5}[\\\\dA-Z]{17}\",\n\t\t\"AE\": \"\\\\d{3}\\\\d{16}\",\n\t\t\"GB\": \"[A-Z]{4}\\\\d{14}\",\n\t\t\"VG\": \"[\\\\dA-Z]{4}\\\\d{16}\"\n\t};\n\n\tbbanpattern = bbancountrypatterns[ countrycode ];\n\n\t// As new countries will start using IBAN in the\n\t// future, we only check if the countrycode is known.\n\t// This prevents false negatives, while almost all\n\t// false positives introduced by this, will be caught\n\t// by the checksum validation below anyway.\n\t// Strict checking should return FALSE for unknown\n\t// countries.\n\tif ( typeof bbanpattern !== \"undefined\" ) {\n\t\tibanregexp = new RegExp( \"^[A-Z]{2}\\\\d{2}\" + bbanpattern + \"$\", \"\" );\n\t\tif ( !( ibanregexp.test( iban ) ) ) {\n\t\t\treturn false; // Invalid country specific format\n\t\t}\n\t}\n\n\t// Now check the checksum, first convert to digits\n\tibancheck = iban.substring( 4, iban.length ) + iban.substring( 0, 4 );\n\tfor ( i = 0; i < ibancheck.length; i++ ) {\n\t\tcharAt = ibancheck.charAt( i );\n\t\tif ( charAt !== \"0\" ) {\n\t\t\tleadingZeroes = false;\n\t\t}\n\t\tif ( !leadingZeroes ) {\n\t\t\tibancheckdigits += \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf( charAt );\n\t\t}\n\t}\n\n\t// Calculate the result of: ibancheckdigits % 97\n\tfor ( p = 0; p < ibancheckdigits.length; p++ ) {\n\t\tcChar = ibancheckdigits.charAt( p );\n\t\tcOperator = \"\" + cRest + \"\" + cChar;\n\t\tcRest = cOperator % 97;\n\t}\n\treturn cRest === 1;\n}, \"Please specify a valid IBAN\" );\n"],"sourceRoot":"/source/"}